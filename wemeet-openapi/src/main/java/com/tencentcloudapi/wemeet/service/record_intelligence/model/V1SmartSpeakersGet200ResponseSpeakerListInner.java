/*
 * 腾讯会议OpenAPI
 * SAAS版RESTFUL风格API
 *
 * The version of the OpenAPI document: v1.0.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.tencentcloudapi.wemeet.service.record_intelligence.model;

import java.util.*;
import java.math.BigDecimal;

import com.fasterxml.jackson.annotation.*;
import org.jetbrains.annotations.NotNull;

/**
 * V1SmartSpeakersGet200ResponseSpeakerListInner
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
public class V1SmartSpeakersGet200ResponseSpeakerListInner {
    @JsonProperty(value = "ms_open_id")
    private String msOpenId;

    @JsonProperty(value = "speaker_id")
    private String speakerId;

    @JsonProperty(value = "speaker_id_type")
    private Long speakerIdType;

    @JsonProperty(value = "speaker_name")
    private String speakerName;

    @JsonProperty(value = "speaker_time")
    private List<V1SmartSpeakersGet200ResponseSpeakerListInnerSpeakerTimeInner> speakerTime;

    @JsonProperty(value = "total_time")
    private Long totalTime;

    /**
     */
    public V1SmartSpeakersGet200ResponseSpeakerListInner() {
    }

    /**
     * @param msOpenId 会议中为每个参会成员授予的临时 ID，以会议为维度，表示同一场会议内用户的唯一标识，不同会议间 ms_open_id 隔离。
     */
    public V1SmartSpeakersGet200ResponseSpeakerListInner msOpenId(String msOpenId) {
        this.msOpenId = msOpenId;
        return this;
    }
    /**
     * @return msOpenId 会议中为每个参会成员授予的临时 ID，以会议为维度，表示同一场会议内用户的唯一标识，不同会议间 ms_open_id 隔离。
     **/
    public String getMsOpenId() {
        return msOpenId;
    }

    /**
     * @param msOpenId 会议中为每个参会成员授予的临时 ID，以会议为维度，表示同一场会议内用户的唯一标识，不同会议间 ms_open_id 隔离。
     */
    public void setMsOpenId(String msOpenId) {
        this.msOpenId = msOpenId;
    }
    /**
     * @param speakerId 发言人ID。speaker_id 必须与 speaker_id_type 配合使用。根据 speaker_id_type 的值，speaker_id 代表不同类型。
     */
    public V1SmartSpeakersGet200ResponseSpeakerListInner speakerId(String speakerId) {
        this.speakerId = speakerId;
        return this;
    }
    /**
     * @return speakerId 发言人ID。speaker_id 必须与 speaker_id_type 配合使用。根据 speaker_id_type 的值，speaker_id 代表不同类型。
     **/
    public String getSpeakerId() {
        return speakerId;
    }

    /**
     * @param speakerId 发言人ID。speaker_id 必须与 speaker_id_type 配合使用。根据 speaker_id_type 的值，speaker_id 代表不同类型。
     */
    public void setSpeakerId(String speakerId) {
        this.speakerId = speakerId;
    }
    /**
     * @param speakerIdType 发言人ID类型： 1：userid 2：openid 6：temp_id（临时 ID，上传的文件无法映射到 userid，故仅在当前录制发言人中代表唯一标识）
     */
    public V1SmartSpeakersGet200ResponseSpeakerListInner speakerIdType(Long speakerIdType) {
        this.speakerIdType = speakerIdType;
        return this;
    }
    /**
     * @return speakerIdType 发言人ID类型： 1：userid 2：openid 6：temp_id（临时 ID，上传的文件无法映射到 userid，故仅在当前录制发言人中代表唯一标识）
     **/
    public Long getSpeakerIdType() {
        return speakerIdType;
    }

    /**
     * @param speakerIdType 发言人ID类型： 1：userid 2：openid 6：temp_id（临时 ID，上传的文件无法映射到 userid，故仅在当前录制发言人中代表唯一标识）
     */
    public void setSpeakerIdType(Long speakerIdType) {
        this.speakerIdType = speakerIdType;
    }
    /**
     * @param speakerName 发言人名称，base64编码
     */
    public V1SmartSpeakersGet200ResponseSpeakerListInner speakerName(String speakerName) {
        this.speakerName = speakerName;
        return this;
    }
    /**
     * @return speakerName 发言人名称，base64编码
     **/
    public String getSpeakerName() {
        return speakerName;
    }

    /**
     * @param speakerName 发言人名称，base64编码
     */
    public void setSpeakerName(String speakerName) {
        this.speakerName = speakerName;
    }
    /**
     * @param speakerTime 本录制文件某个具体发言人的发言时间段，以对象数组形式返回
     */
    public V1SmartSpeakersGet200ResponseSpeakerListInner speakerTime(List<V1SmartSpeakersGet200ResponseSpeakerListInnerSpeakerTimeInner> speakerTime) {
        this.speakerTime = speakerTime;
        return this;
    }
    /**
     * @return speakerTime 本录制文件某个具体发言人的发言时间段，以对象数组形式返回
     **/
    public List<V1SmartSpeakersGet200ResponseSpeakerListInnerSpeakerTimeInner> getSpeakerTime() {
        return speakerTime;
    }

    /**
     * @param speakerTime 本录制文件某个具体发言人的发言时间段，以对象数组形式返回
     */
    public void setSpeakerTime(List<V1SmartSpeakersGet200ResponseSpeakerListInnerSpeakerTimeInner> speakerTime) {
        this.speakerTime = speakerTime;
    }
    /**
     * @param totalTime 发言总时长
     */
    public V1SmartSpeakersGet200ResponseSpeakerListInner totalTime(Long totalTime) {
        this.totalTime = totalTime;
        return this;
    }
    /**
     * @return totalTime 发言总时长
     **/
    public Long getTotalTime() {
        return totalTime;
    }

    /**
     * @param totalTime 发言总时长
     */
    public void setTotalTime(Long totalTime) {
        this.totalTime = totalTime;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V1SmartSpeakersGet200ResponseSpeakerListInner v1SmartSpeakersGet200ResponseSpeakerListInner = (V1SmartSpeakersGet200ResponseSpeakerListInner) o;
        return Objects.equals(this.msOpenId, v1SmartSpeakersGet200ResponseSpeakerListInner.msOpenId) &&
            Objects.equals(this.speakerId, v1SmartSpeakersGet200ResponseSpeakerListInner.speakerId) &&
            Objects.equals(this.speakerIdType, v1SmartSpeakersGet200ResponseSpeakerListInner.speakerIdType) &&
            Objects.equals(this.speakerName, v1SmartSpeakersGet200ResponseSpeakerListInner.speakerName) &&
            Objects.equals(this.speakerTime, v1SmartSpeakersGet200ResponseSpeakerListInner.speakerTime) &&
            Objects.equals(this.totalTime, v1SmartSpeakersGet200ResponseSpeakerListInner.totalTime);
    }

    @Override
    public int hashCode() {
        return Objects.hash(msOpenId, speakerId, speakerIdType, speakerName, speakerTime, totalTime);
    }

    /**
    * Convert the given object to string with each line indented by 4 spaces
    * (except the first line).
    */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class V1SmartSpeakersGet200ResponseSpeakerListInner {\n");
        sb.append("    msOpenId: ").append(toIndentedString(msOpenId)).append("\n");
        sb.append("    speakerId: ").append(toIndentedString(speakerId)).append("\n");
        sb.append("    speakerIdType: ").append(toIndentedString(speakerIdType)).append("\n");
        sb.append("    speakerName: ").append(toIndentedString(speakerName)).append("\n");
        sb.append("    speakerTime: ").append(toIndentedString(speakerTime)).append("\n");
        sb.append("    totalTime: ").append(toIndentedString(totalTime)).append("\n");
        sb.append("}");
        return sb.toString();
    }
}

