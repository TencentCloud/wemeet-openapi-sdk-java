/*
 * 腾讯会议OpenAPI
 * SAAS版RESTFUL风格API
 *
 * The version of the OpenAPI document: v1.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.tencentcloudapi.wemeet.service.meeting_room.model;

import java.util.*;
import java.math.BigDecimal;

import com.fasterxml.jackson.annotation.*;
import org.jetbrains.annotations.NotNull;

/**
 * V1MeetingRoomsMeetingRoomIdBackgroundPostRequest
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
public class V1MeetingRoomsMeetingRoomIdBackgroundPostRequest {
    @JsonProperty(value = "background_image")
    private String backgroundImage;

    @JsonProperty(value = "operator_id", required = true)
    private String operatorId;

    @JsonProperty(value = "operator_id_type", required = true)
    private Long operatorIdType;

    /**
     * @param operatorId  (required)
     * @param operatorIdType 1:userid (required)
     */
    public V1MeetingRoomsMeetingRoomIdBackgroundPostRequest(@NotNull String operatorId, @NotNull Long operatorIdType) {
        this.operatorId = operatorId;
        this.operatorIdType = operatorIdType;
    }

    /**
     * @param backgroundImage 不传或者传空则设置为默认背景，目前只能设置一张 背景图片地址，1920*1080,大小10M以内，png/jpg/jpeg格式
     */
    public V1MeetingRoomsMeetingRoomIdBackgroundPostRequest backgroundImage(String backgroundImage) {
        this.backgroundImage = backgroundImage;
        return this;
    }
    /**
     * @return backgroundImage 不传或者传空则设置为默认背景，目前只能设置一张 背景图片地址，1920*1080,大小10M以内，png/jpg/jpeg格式
     **/
    public String getBackgroundImage() {
        return backgroundImage;
    }

    /**
     * @param backgroundImage 不传或者传空则设置为默认背景，目前只能设置一张 背景图片地址，1920*1080,大小10M以内，png/jpg/jpeg格式
     */
    public void setBackgroundImage(String backgroundImage) {
        this.backgroundImage = backgroundImage;
    }
    /**
     * @param operatorId  (required)
     */
    public V1MeetingRoomsMeetingRoomIdBackgroundPostRequest operatorId(@NotNull String operatorId) {
        this.operatorId = operatorId;
        return this;
    }
    /**
     * @return operatorId 
     **/
    public String getOperatorId() {
        return operatorId;
    }

    /**
     * @param operatorId  (required)
     */
    public void setOperatorId(String operatorId) {
        this.operatorId = operatorId;
    }
    /**
     * @param operatorIdType 1:userid (required)
     */
    public V1MeetingRoomsMeetingRoomIdBackgroundPostRequest operatorIdType(@NotNull Long operatorIdType) {
        this.operatorIdType = operatorIdType;
        return this;
    }
    /**
     * @return operatorIdType 1:userid
     **/
    public Long getOperatorIdType() {
        return operatorIdType;
    }

    /**
     * @param operatorIdType 1:userid (required)
     */
    public void setOperatorIdType(Long operatorIdType) {
        this.operatorIdType = operatorIdType;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V1MeetingRoomsMeetingRoomIdBackgroundPostRequest v1MeetingRoomsMeetingRoomIdBackgroundPostRequest = (V1MeetingRoomsMeetingRoomIdBackgroundPostRequest) o;
        return Objects.equals(this.backgroundImage, v1MeetingRoomsMeetingRoomIdBackgroundPostRequest.backgroundImage) &&
            Objects.equals(this.operatorId, v1MeetingRoomsMeetingRoomIdBackgroundPostRequest.operatorId) &&
            Objects.equals(this.operatorIdType, v1MeetingRoomsMeetingRoomIdBackgroundPostRequest.operatorIdType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(backgroundImage, operatorId, operatorIdType);
    }

    /**
    * Convert the given object to string with each line indented by 4 spaces
    * (except the first line).
    */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class V1MeetingRoomsMeetingRoomIdBackgroundPostRequest {\n");
        sb.append("    backgroundImage: ").append(toIndentedString(backgroundImage)).append("\n");
        sb.append("    operatorId: ").append(toIndentedString(operatorId)).append("\n");
        sb.append("    operatorIdType: ").append(toIndentedString(operatorIdType)).append("\n");
        sb.append("}");
        return sb.toString();
    }
}

