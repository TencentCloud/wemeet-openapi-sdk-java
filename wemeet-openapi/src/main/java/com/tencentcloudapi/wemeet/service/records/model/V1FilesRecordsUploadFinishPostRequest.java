/*
 * 腾讯会议OpenAPI
 * SAAS版RESTFUL风格API
 *
 * The version of the OpenAPI document: v1.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.tencentcloudapi.wemeet.service.records.model;

import java.util.*;
import java.math.BigDecimal;

import com.fasterxml.jackson.annotation.*;
import org.jetbrains.annotations.NotNull;

/**
 * V1FilesRecordsUploadFinishPostRequest
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
public class V1FilesRecordsUploadFinishPostRequest {
    @JsonProperty(value = "ai_record")
    private Boolean aiRecord;

    @JsonProperty(value = "operator_id", required = true)
    private String operatorId;

    @JsonProperty(value = "operator_id_type", required = true)
    private Long operatorIdType;

    @JsonProperty(value = "speak_number", required = true)
    private Long speakNumber;

    @JsonProperty(value = "upload_id", required = true)
    private String uploadId;

    /**
     * @param operatorId 操作者ID (required)
     * @param operatorIdType 操作者ID类型 (required)
     * @param speakNumber 上传文件中的发言人数：传具体数值代表几人发言，最多支持12人，其中0代表多人发言 (required)
     * @param uploadId 上传事务ID，由upload-prepare接口返回 (required)
     */
    public V1FilesRecordsUploadFinishPostRequest(@NotNull String operatorId, @NotNull Long operatorIdType, @NotNull Long speakNumber, @NotNull String uploadId) {
        this.operatorId = operatorId;
        this.operatorIdType = operatorIdType;
        this.speakNumber = speakNumber;
        this.uploadId = uploadId;
    }

    /**
     * @param aiRecord 自动生成智能转写和智能纪要：true：自动生成（默认）  false：不生成
     */
    public V1FilesRecordsUploadFinishPostRequest aiRecord(Boolean aiRecord) {
        this.aiRecord = aiRecord;
        return this;
    }
    /**
     * @return aiRecord 自动生成智能转写和智能纪要：true：自动生成（默认）  false：不生成
     **/
    public Boolean getAiRecord() {
        return aiRecord;
    }

    /**
     * @param aiRecord 自动生成智能转写和智能纪要：true：自动生成（默认）  false：不生成
     */
    public void setAiRecord(Boolean aiRecord) {
        this.aiRecord = aiRecord;
    }
    /**
     * @param operatorId 操作者ID (required)
     */
    public V1FilesRecordsUploadFinishPostRequest operatorId(@NotNull String operatorId) {
        this.operatorId = operatorId;
        return this;
    }
    /**
     * @return operatorId 操作者ID
     **/
    public String getOperatorId() {
        return operatorId;
    }

    /**
     * @param operatorId 操作者ID (required)
     */
    public void setOperatorId(String operatorId) {
        this.operatorId = operatorId;
    }
    /**
     * @param operatorIdType 操作者ID类型 (required)
     */
    public V1FilesRecordsUploadFinishPostRequest operatorIdType(@NotNull Long operatorIdType) {
        this.operatorIdType = operatorIdType;
        return this;
    }
    /**
     * @return operatorIdType 操作者ID类型
     **/
    public Long getOperatorIdType() {
        return operatorIdType;
    }

    /**
     * @param operatorIdType 操作者ID类型 (required)
     */
    public void setOperatorIdType(Long operatorIdType) {
        this.operatorIdType = operatorIdType;
    }
    /**
     * @param speakNumber 上传文件中的发言人数：传具体数值代表几人发言，最多支持12人，其中0代表多人发言 (required)
     */
    public V1FilesRecordsUploadFinishPostRequest speakNumber(@NotNull Long speakNumber) {
        this.speakNumber = speakNumber;
        return this;
    }
    /**
     * @return speakNumber 上传文件中的发言人数：传具体数值代表几人发言，最多支持12人，其中0代表多人发言
     **/
    public Long getSpeakNumber() {
        return speakNumber;
    }

    /**
     * @param speakNumber 上传文件中的发言人数：传具体数值代表几人发言，最多支持12人，其中0代表多人发言 (required)
     */
    public void setSpeakNumber(Long speakNumber) {
        this.speakNumber = speakNumber;
    }
    /**
     * @param uploadId 上传事务ID，由upload-prepare接口返回 (required)
     */
    public V1FilesRecordsUploadFinishPostRequest uploadId(@NotNull String uploadId) {
        this.uploadId = uploadId;
        return this;
    }
    /**
     * @return uploadId 上传事务ID，由upload-prepare接口返回
     **/
    public String getUploadId() {
        return uploadId;
    }

    /**
     * @param uploadId 上传事务ID，由upload-prepare接口返回 (required)
     */
    public void setUploadId(String uploadId) {
        this.uploadId = uploadId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V1FilesRecordsUploadFinishPostRequest v1FilesRecordsUploadFinishPostRequest = (V1FilesRecordsUploadFinishPostRequest) o;
        return Objects.equals(this.aiRecord, v1FilesRecordsUploadFinishPostRequest.aiRecord) &&
            Objects.equals(this.operatorId, v1FilesRecordsUploadFinishPostRequest.operatorId) &&
            Objects.equals(this.operatorIdType, v1FilesRecordsUploadFinishPostRequest.operatorIdType) &&
            Objects.equals(this.speakNumber, v1FilesRecordsUploadFinishPostRequest.speakNumber) &&
            Objects.equals(this.uploadId, v1FilesRecordsUploadFinishPostRequest.uploadId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(aiRecord, operatorId, operatorIdType, speakNumber, uploadId);
    }

    /**
    * Convert the given object to string with each line indented by 4 spaces
    * (except the first line).
    */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class V1FilesRecordsUploadFinishPostRequest {\n");
        sb.append("    aiRecord: ").append(toIndentedString(aiRecord)).append("\n");
        sb.append("    operatorId: ").append(toIndentedString(operatorId)).append("\n");
        sb.append("    operatorIdType: ").append(toIndentedString(operatorIdType)).append("\n");
        sb.append("    speakNumber: ").append(toIndentedString(speakNumber)).append("\n");
        sb.append("    uploadId: ").append(toIndentedString(uploadId)).append("\n");
        sb.append("}");
        return sb.toString();
    }
}

