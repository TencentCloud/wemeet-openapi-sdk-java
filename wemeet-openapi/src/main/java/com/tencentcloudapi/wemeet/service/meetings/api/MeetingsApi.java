/*
 * 腾讯会议OpenAPI
 * SAAS版RESTFUL风格API
 *
 * The version of the OpenAPI document: v1.0.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.tencentcloudapi.wemeet.service.meetings.api;

import com.tencentcloudapi.wemeet.core.Config;
import com.tencentcloudapi.wemeet.core.Constants;
import com.tencentcloudapi.wemeet.core.authenticator.AuthenticatorBuilder;
import com.tencentcloudapi.wemeet.core.xhttp.*;
import com.tencentcloudapi.wemeet.core.exception.*;
import com.tencentcloudapi.wemeet.service.meetings.model.*;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import java.io.File;


public class MeetingsApi {

    private final Config config;

    public MeetingsApi(Config config) {
        this.config = config;
    }

    public static class ApiV1AsrConfigPutRequest {
            private V1AsrConfigPutRequest body;

        private ApiV1AsrConfigPutRequest() {}

        private ApiV1AsrConfigPutRequest(Builder builder) {
            
            this.body = builder.body;
        }

        public static class Builder {
            
            private V1AsrConfigPutRequest body;

            /**
             */
            public Builder() {
            }
                        public Builder body(V1AsrConfigPutRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1AsrConfigPutRequest build() {
                return new ApiV1AsrConfigPutRequest(this);
            }
        }
        
        public V1AsrConfigPutRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1AsrConfigPutResponse extends ApiResponse {
        private final V1AsrConfigPut200Response data;
        public ApiV1AsrConfigPutResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1AsrConfigPut200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1AsrConfigPut200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1AsrDetailsGetRequest {
    
        /**
         * operatorIdType 操作者 ID 的类型： 1：userid  2：openid (required)
         */
        private String operatorIdType;

        /**
         * operatorId 操作者 ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
         */
        private String operatorId;

        /**
         * meetingId 可以查询某次会议的数据 (required)
         */
        private String meetingId;

        /**
         * startTime 查询起始时间戳，UNIX 时间戳（单位秒）。 (optional)
         */
        private String startTime;

        /**
         * endTime 查询结束时间戳，UNIX 时间戳（单位秒）。 (optional)
         */
        private String endTime;

        /**
         * fileType 导出文件类型,默认导出txt  0：txt  1：word  2：pdf (optional)
         */
        private String fileType;

        /**
         * page 页码，默认1 (optional)
         */
        private String page;

        /**
         * pageSize 分页大小，默认10，最大50 (optional)
         */
        private String pageSize;

        /**
         * showBilingual 是否展示双语，默认不展示双语 (optional)
         */
        private String showBilingual;
        private Object body;

        private ApiV1AsrDetailsGetRequest() {}

        private ApiV1AsrDetailsGetRequest(Builder builder) {
            
            this.operatorIdType = builder.operatorIdType;
            

            this.operatorId = builder.operatorId;
            

            this.meetingId = builder.meetingId;
            

            this.startTime = builder.startTime;
            

            this.endTime = builder.endTime;
            

            this.fileType = builder.fileType;
            

            this.page = builder.page;
            

            this.pageSize = builder.pageSize;
            

            this.showBilingual = builder.showBilingual;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * operatorIdType 操作者 ID 的类型： 1：userid  2：openid (required)
             */
            private String operatorIdType;
            

            /**
             * operatorId 操作者 ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
             */
            private String operatorId;
            

            /**
             * meetingId 可以查询某次会议的数据 (required)
             */
            private String meetingId;
            

            /**
             * startTime 查询起始时间戳，UNIX 时间戳（单位秒）。 (optional)
             */
            private String startTime;
            

            /**
             * endTime 查询结束时间戳，UNIX 时间戳（单位秒）。 (optional)
             */
            private String endTime;
            

            /**
             * fileType 导出文件类型,默认导出txt  0：txt  1：word  2：pdf (optional)
             */
            private String fileType;
            

            /**
             * page 页码，默认1 (optional)
             */
            private String page;
            

            /**
             * pageSize 分页大小，默认10，最大50 (optional)
             */
            private String pageSize;
            

            /**
             * showBilingual 是否展示双语，默认不展示双语 (optional)
             */
            private String showBilingual;
            

            private Object body;

            /**
             */
            public Builder() {
            }
            
            /**
             * @param operatorIdType 操作者 ID 的类型： 1：userid  2：openid (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
            
            /**
             * @param operatorId 操作者 ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param meetingId 可以查询某次会议的数据 (required)
             */
            public Builder meetingId(String meetingId) {
                this.meetingId = meetingId;
                return this;
            }
            
            
            /**
             * @param startTime 查询起始时间戳，UNIX 时间戳（单位秒）。 (optional)
             */
            public Builder startTime(String startTime) {
                this.startTime = startTime;
                return this;
            }
            
            
            /**
             * @param endTime 查询结束时间戳，UNIX 时间戳（单位秒）。 (optional)
             */
            public Builder endTime(String endTime) {
                this.endTime = endTime;
                return this;
            }
            
            
            /**
             * @param fileType 导出文件类型,默认导出txt  0：txt  1：word  2：pdf (optional)
             */
            public Builder fileType(String fileType) {
                this.fileType = fileType;
                return this;
            }
            
            
            /**
             * @param page 页码，默认1 (optional)
             */
            public Builder page(String page) {
                this.page = page;
                return this;
            }
            
            
            /**
             * @param pageSize 分页大小，默认10，最大50 (optional)
             */
            public Builder pageSize(String pageSize) {
                this.pageSize = pageSize;
                return this;
            }
            
            
            /**
             * @param showBilingual 是否展示双语，默认不展示双语 (optional)
             */
            public Builder showBilingual(String showBilingual) {
                this.showBilingual = showBilingual;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1AsrDetailsGetRequest build() {
                return new ApiV1AsrDetailsGetRequest(this);
            }
        }
        
        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getMeetingId() {
            return this.meetingId;
        }
        

        public String getStartTime() {
            return this.startTime;
        }
        

        public String getEndTime() {
            return this.endTime;
        }
        

        public String getFileType() {
            return this.fileType;
        }
        

        public String getPage() {
            return this.page;
        }
        

        public String getPageSize() {
            return this.pageSize;
        }
        

        public String getShowBilingual() {
            return this.showBilingual;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1AsrDetailsGetResponse extends ApiResponse {
        private final V1AsrDetailsGet200Response data;
        public ApiV1AsrDetailsGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1AsrDetailsGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1AsrDetailsGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1AsrPushStatusPostRequest {
            private V1AsrPushStatusPostRequest body;

        private ApiV1AsrPushStatusPostRequest() {}

        private ApiV1AsrPushStatusPostRequest(Builder builder) {
            
            this.body = builder.body;
        }

        public static class Builder {
            
            private V1AsrPushStatusPostRequest body;

            /**
             */
            public Builder() {
            }
                        public Builder body(V1AsrPushStatusPostRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1AsrPushStatusPostRequest build() {
                return new ApiV1AsrPushStatusPostRequest(this);
            }
        }
        
        public V1AsrPushStatusPostRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1AsrPushStatusPostResponse extends ApiResponse {
        private final Object data;
        public ApiV1AsrPushStatusPostResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1HistoryMeetingsUseridGetRequest {
    
        /**
         * userid  (required)
         */
        private String userid;

        /**
         * pageSize 当前页大小，最小值为1，最大值为20。 (required)
         */
        private String pageSize;

        /**
         * page 当前页，从1开始。 (required)
         */
        private String page;

        /**
         * meetingCode 会议号。 (optional)
         */
        private String meetingCode;

        /**
         * startTime 搜索的开始时间（预定会议的开始时间），单位秒。 (optional)
         */
        private String startTime;

        /**
         * endTime 搜索的结束时间（预定会议的开始时间），单位秒。 (optional)
         */
        private String endTime;
        private Object body;

        private ApiV1HistoryMeetingsUseridGetRequest() {}

        private ApiV1HistoryMeetingsUseridGetRequest(Builder builder) {
            
            this.userid = builder.userid;
            

            this.pageSize = builder.pageSize;
            

            this.page = builder.page;
            

            this.meetingCode = builder.meetingCode;
            

            this.startTime = builder.startTime;
            

            this.endTime = builder.endTime;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * userid  (required)
             */
            private final String userid;
            

            /**
             * pageSize 当前页大小，最小值为1，最大值为20。 (required)
             */
            private String pageSize;
            

            /**
             * page 当前页，从1开始。 (required)
             */
            private String page;
            

            /**
             * meetingCode 会议号。 (optional)
             */
            private String meetingCode;
            

            /**
             * startTime 搜索的开始时间（预定会议的开始时间），单位秒。 (optional)
             */
            private String startTime;
            

            /**
             * endTime 搜索的结束时间（预定会议的开始时间），单位秒。 (optional)
             */
            private String endTime;
            

            private Object body;

            /**
             * @param userid 
             */
            public Builder(String userid) {
                this.userid = userid;
            }
            
            
            /**
             * @param pageSize 当前页大小，最小值为1，最大值为20。 (required)
             */
            public Builder pageSize(String pageSize) {
                this.pageSize = pageSize;
                return this;
            }
            
            
            /**
             * @param page 当前页，从1开始。 (required)
             */
            public Builder page(String page) {
                this.page = page;
                return this;
            }
            
            
            /**
             * @param meetingCode 会议号。 (optional)
             */
            public Builder meetingCode(String meetingCode) {
                this.meetingCode = meetingCode;
                return this;
            }
            
            
            /**
             * @param startTime 搜索的开始时间（预定会议的开始时间），单位秒。 (optional)
             */
            public Builder startTime(String startTime) {
                this.startTime = startTime;
                return this;
            }
            
            
            /**
             * @param endTime 搜索的结束时间（预定会议的开始时间），单位秒。 (optional)
             */
            public Builder endTime(String endTime) {
                this.endTime = endTime;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1HistoryMeetingsUseridGetRequest build() {
                return new ApiV1HistoryMeetingsUseridGetRequest(this);
            }
        }
        
        public String getUserid() {
            return this.userid;
        }
        

        public String getPageSize() {
            return this.pageSize;
        }
        

        public String getPage() {
            return this.page;
        }
        

        public String getMeetingCode() {
            return this.meetingCode;
        }
        

        public String getStartTime() {
            return this.startTime;
        }
        

        public String getEndTime() {
            return this.endTime;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1HistoryMeetingsUseridGetResponse extends ApiResponse {
        private final V1HistoryMeetingsUseridGet200Response data;
        public ApiV1HistoryMeetingsUseridGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1HistoryMeetingsUseridGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1HistoryMeetingsUseridGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingJobIdGetRequest {
    
        /**
         * jobId 任务ID (required)
         */
        private String jobId;

        /**
         * operatorIdType 操作者 ID 的类型： 1：userid (required)
         */
        private String operatorIdType;

        /**
         * operatorId 操作者 ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型 (required)
         */
        private String operatorId;
        private Object body;

        private ApiV1MeetingJobIdGetRequest() {}

        private ApiV1MeetingJobIdGetRequest(Builder builder) {
            
            this.jobId = builder.jobId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.operatorId = builder.operatorId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * jobId 任务ID (required)
             */
            private final String jobId;
            

            /**
             * operatorIdType 操作者 ID 的类型： 1：userid (required)
             */
            private String operatorIdType;
            

            /**
             * operatorId 操作者 ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型 (required)
             */
            private String operatorId;
            

            private Object body;

            /**
             * @param jobId 任务ID
             */
            public Builder(String jobId) {
                this.jobId = jobId;
            }
            
            
            /**
             * @param operatorIdType 操作者 ID 的类型： 1：userid (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
            
            /**
             * @param operatorId 操作者 ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型 (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingJobIdGetRequest build() {
                return new ApiV1MeetingJobIdGetRequest(this);
            }
        }
        
        public String getJobId() {
            return this.jobId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public String getOperatorId() {
            return this.operatorId;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingJobIdGetResponse extends ApiResponse {
        private final V1MeetingJobIdGet200Response data;
        public ApiV1MeetingJobIdGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingJobIdGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingJobIdGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingMeetingIdWaitingRoomGetRequest {
    
        /**
         * meetingId 会议的唯一ID (required)
         */
        private String meetingId;

        /**
         * operatorId 操作者 ID。会议创建者、主持人、联席主持人可以调用该接口。 operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
         */
        private String operatorId;

        /**
         * operatorIdType 操作者 ID 的类型： 1：企业内用户 userid。 2：企微或者oauth open_id (required)
         */
        private String operatorIdType;

        /**
         * page 当前页，页码起始值为1。page最大值为2000 (required)
         */
        private String page;

        /**
         * pageSize 每页数据条数。默认20，最大50 (required)
         */
        private String pageSize;
        private Object body;

        private ApiV1MeetingMeetingIdWaitingRoomGetRequest() {}

        private ApiV1MeetingMeetingIdWaitingRoomGetRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.page = builder.page;
            

            this.pageSize = builder.pageSize;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId 会议的唯一ID (required)
             */
            private final String meetingId;
            

            /**
             * operatorId 操作者 ID。会议创建者、主持人、联席主持人可以调用该接口。 operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
             */
            private String operatorId;
            

            /**
             * operatorIdType 操作者 ID 的类型： 1：企业内用户 userid。 2：企微或者oauth open_id (required)
             */
            private String operatorIdType;
            

            /**
             * page 当前页，页码起始值为1。page最大值为2000 (required)
             */
            private String page;
            

            /**
             * pageSize 每页数据条数。默认20，最大50 (required)
             */
            private String pageSize;
            

            private Object body;

            /**
             * @param meetingId 会议的唯一ID
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
            
            /**
             * @param operatorId 操作者 ID。会议创建者、主持人、联席主持人可以调用该接口。 operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 操作者 ID 的类型： 1：企业内用户 userid。 2：企微或者oauth open_id (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
            
            /**
             * @param page 当前页，页码起始值为1。page最大值为2000 (required)
             */
            public Builder page(String page) {
                this.page = page;
                return this;
            }
            
            
            /**
             * @param pageSize 每页数据条数。默认20，最大50 (required)
             */
            public Builder pageSize(String pageSize) {
                this.pageSize = pageSize;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingMeetingIdWaitingRoomGetRequest build() {
                return new ApiV1MeetingMeetingIdWaitingRoomGetRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public String getPage() {
            return this.page;
        }
        

        public String getPageSize() {
            return this.pageSize;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingMeetingIdWaitingRoomGetResponse extends ApiResponse {
        private final V1MeetingMeetingIdWaitingRoomGet200Response data;
        public ApiV1MeetingMeetingIdWaitingRoomGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingMeetingIdWaitingRoomGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingMeetingIdWaitingRoomGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingMeetingIdWaitingRoomWelcomeMessageGetRequest {
    
        /**
         * meetingId  (required)
         */
        private String meetingId;

        /**
         * operatorId  (required)
         */
        private String operatorId;

        /**
         * operatorIdType  (required)
         */
        private String operatorIdType;
        private Object body;

        private ApiV1MeetingMeetingIdWaitingRoomWelcomeMessageGetRequest() {}

        private ApiV1MeetingMeetingIdWaitingRoomWelcomeMessageGetRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId  (required)
             */
            private final String meetingId;
            

            /**
             * operatorId  (required)
             */
            private String operatorId;
            

            /**
             * operatorIdType  (required)
             */
            private String operatorIdType;
            

            private Object body;

            /**
             * @param meetingId 
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
            
            /**
             * @param operatorId  (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType  (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingMeetingIdWaitingRoomWelcomeMessageGetRequest build() {
                return new ApiV1MeetingMeetingIdWaitingRoomWelcomeMessageGetRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingMeetingIdWaitingRoomWelcomeMessageGetResponse extends ApiResponse {
        private final V1MeetingSetWaitingRoomWelcomeMessagePost200Response data;
        public ApiV1MeetingMeetingIdWaitingRoomWelcomeMessageGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingSetWaitingRoomWelcomeMessagePost200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingSetWaitingRoomWelcomeMessagePost200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingSetWaitingRoomWelcomeMessagePostRequest {
            private V1MeetingSetWaitingRoomWelcomeMessagePostRequest body;

        private ApiV1MeetingSetWaitingRoomWelcomeMessagePostRequest() {}

        private ApiV1MeetingSetWaitingRoomWelcomeMessagePostRequest(Builder builder) {
            
            this.body = builder.body;
        }

        public static class Builder {
            
            private V1MeetingSetWaitingRoomWelcomeMessagePostRequest body;

            /**
             */
            public Builder() {
            }
                        public Builder body(V1MeetingSetWaitingRoomWelcomeMessagePostRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingSetWaitingRoomWelcomeMessagePostRequest build() {
                return new ApiV1MeetingSetWaitingRoomWelcomeMessagePostRequest(this);
            }
        }
        
        public V1MeetingSetWaitingRoomWelcomeMessagePostRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingSetWaitingRoomWelcomeMessagePostResponse extends ApiResponse {
        private final V1MeetingSetWaitingRoomWelcomeMessagePost200Response data;
        public ApiV1MeetingSetWaitingRoomWelcomeMessagePostResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingSetWaitingRoomWelcomeMessagePost200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingSetWaitingRoomWelcomeMessagePost200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingsCustomerShortUrlPostRequest {
            private V1MeetingsCustomerShortUrlPostRequest body;

        private ApiV1MeetingsCustomerShortUrlPostRequest() {}

        private ApiV1MeetingsCustomerShortUrlPostRequest(Builder builder) {
            
            this.body = builder.body;
        }

        public static class Builder {
            
            private V1MeetingsCustomerShortUrlPostRequest body;

            /**
             */
            public Builder() {
            }
                        public Builder body(V1MeetingsCustomerShortUrlPostRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingsCustomerShortUrlPostRequest build() {
                return new ApiV1MeetingsCustomerShortUrlPostRequest(this);
            }
        }
        
        public V1MeetingsCustomerShortUrlPostRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingsCustomerShortUrlPostResponse extends ApiResponse {
        private final V1MeetingsCustomerShortUrlPost200Response data;
        public ApiV1MeetingsCustomerShortUrlPostResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingsCustomerShortUrlPost200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingsCustomerShortUrlPost200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingsGetRequest {
    
        /**
         * instanceid 用户的终端设备类型： 0：PSTN 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：Linux 20：Rooms for Touch Windows 21：Rooms for Touch MacOS 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch iOS (required)
         */
        private String instanceid;

        /**
         * operatorId 操作者 ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 说明：userid 字段和 operator_id 字段二者必填一项。若两者都填，以 operator_id 字段为准。 (optional)
         */
        private String operatorId;

        /**
         * operatorIdType 操作者 ID 的类型： 3：rooms_id 说明：当前仅支持 rooms_id。如操作者为企业内 userid 或 openId，请使用 userid 字段。 (optional)
         */
        private String operatorIdType;

        /**
         * userid 调用方用于标示用户的唯一 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 企业唯一用户标识说明： 1：企业对接 SSO 时使用的员工唯一标识 ID。 2：企业调用创建用户接口时传递的 userid 参数。 (optional)
         */
        private String userid;

        /**
         * meetingCode 有效的9位数字会议号码。（通过会议CODE查询会议详情时，必传） (optional)
         */
        private String meetingCode;

        /**
         * cursory 分页游标 (optional)
         */
        private String cursory;

        /**
         * pos 分页获取用户会议列表的查询起始时间值，unix 秒级时间戳 (optional)
         */
        private String pos;

        /**
         * isShowAllSubMeetings 是否显示周期性会议的所有子会议，默认值为0。 0：只显示周期性会议的第一个子会议 1：显示所有周期性会议的子会议 (optional)
         */
        private String isShowAllSubMeetings;
        private Object body;

        private ApiV1MeetingsGetRequest() {}

        private ApiV1MeetingsGetRequest(Builder builder) {
            
            this.instanceid = builder.instanceid;
            

            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.userid = builder.userid;
            

            this.meetingCode = builder.meetingCode;
            

            this.cursory = builder.cursory;
            

            this.pos = builder.pos;
            

            this.isShowAllSubMeetings = builder.isShowAllSubMeetings;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * instanceid 用户的终端设备类型： 0：PSTN 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：Linux 20：Rooms for Touch Windows 21：Rooms for Touch MacOS 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch iOS (required)
             */
            private String instanceid;
            

            /**
             * operatorId 操作者 ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 说明：userid 字段和 operator_id 字段二者必填一项。若两者都填，以 operator_id 字段为准。 (optional)
             */
            private String operatorId;
            

            /**
             * operatorIdType 操作者 ID 的类型： 3：rooms_id 说明：当前仅支持 rooms_id。如操作者为企业内 userid 或 openId，请使用 userid 字段。 (optional)
             */
            private String operatorIdType;
            

            /**
             * userid 调用方用于标示用户的唯一 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 企业唯一用户标识说明： 1：企业对接 SSO 时使用的员工唯一标识 ID。 2：企业调用创建用户接口时传递的 userid 参数。 (optional)
             */
            private String userid;
            

            /**
             * meetingCode 有效的9位数字会议号码。（通过会议CODE查询会议详情时，必传） (optional)
             */
            private String meetingCode;
            

            /**
             * cursory 分页游标 (optional)
             */
            private String cursory;
            

            /**
             * pos 分页获取用户会议列表的查询起始时间值，unix 秒级时间戳 (optional)
             */
            private String pos;
            

            /**
             * isShowAllSubMeetings 是否显示周期性会议的所有子会议，默认值为0。 0：只显示周期性会议的第一个子会议 1：显示所有周期性会议的子会议 (optional)
             */
            private String isShowAllSubMeetings;
            

            private Object body;

            /**
             */
            public Builder() {
            }
            
            /**
             * @param instanceid 用户的终端设备类型： 0：PSTN 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：Linux 20：Rooms for Touch Windows 21：Rooms for Touch MacOS 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch iOS (required)
             */
            public Builder instanceid(String instanceid) {
                this.instanceid = instanceid;
                return this;
            }
            
            
            /**
             * @param operatorId 操作者 ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 说明：userid 字段和 operator_id 字段二者必填一项。若两者都填，以 operator_id 字段为准。 (optional)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 操作者 ID 的类型： 3：rooms_id 说明：当前仅支持 rooms_id。如操作者为企业内 userid 或 openId，请使用 userid 字段。 (optional)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
            
            /**
             * @param userid 调用方用于标示用户的唯一 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 企业唯一用户标识说明： 1：企业对接 SSO 时使用的员工唯一标识 ID。 2：企业调用创建用户接口时传递的 userid 参数。 (optional)
             */
            public Builder userid(String userid) {
                this.userid = userid;
                return this;
            }
            
            
            /**
             * @param meetingCode 有效的9位数字会议号码。（通过会议CODE查询会议详情时，必传） (optional)
             */
            public Builder meetingCode(String meetingCode) {
                this.meetingCode = meetingCode;
                return this;
            }
            
            
            /**
             * @param cursory 分页游标 (optional)
             */
            public Builder cursory(String cursory) {
                this.cursory = cursory;
                return this;
            }
            
            
            /**
             * @param pos 分页获取用户会议列表的查询起始时间值，unix 秒级时间戳 (optional)
             */
            public Builder pos(String pos) {
                this.pos = pos;
                return this;
            }
            
            
            /**
             * @param isShowAllSubMeetings 是否显示周期性会议的所有子会议，默认值为0。 0：只显示周期性会议的第一个子会议 1：显示所有周期性会议的子会议 (optional)
             */
            public Builder isShowAllSubMeetings(String isShowAllSubMeetings) {
                this.isShowAllSubMeetings = isShowAllSubMeetings;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingsGetRequest build() {
                return new ApiV1MeetingsGetRequest(this);
            }
        }
        
        public String getInstanceid() {
            return this.instanceid;
        }
        

        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public String getUserid() {
            return this.userid;
        }
        

        public String getMeetingCode() {
            return this.meetingCode;
        }
        

        public String getCursory() {
            return this.cursory;
        }
        

        public String getPos() {
            return this.pos;
        }
        

        public String getIsShowAllSubMeetings() {
            return this.isShowAllSubMeetings;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingsGetResponse extends ApiResponse {
        private final V1MeetingsGet200Response data;
        public ApiV1MeetingsGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingsGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingsGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingsMeetingIdCancelPostRequest {
    
        /**
         * meetingId  (required)
         */
        private String meetingId;
        private V1MeetingsMeetingIdCancelPostRequest body;

        private ApiV1MeetingsMeetingIdCancelPostRequest() {}

        private ApiV1MeetingsMeetingIdCancelPostRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId  (required)
             */
            private final String meetingId;
            

            private V1MeetingsMeetingIdCancelPostRequest body;

            /**
             * @param meetingId 
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
                        public Builder body(V1MeetingsMeetingIdCancelPostRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingsMeetingIdCancelPostRequest build() {
                return new ApiV1MeetingsMeetingIdCancelPostRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public V1MeetingsMeetingIdCancelPostRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingsMeetingIdCancelPostResponse extends ApiResponse {
        private final Object data;
        public ApiV1MeetingsMeetingIdCancelPostResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingsMeetingIdCustomerShortUrlGetRequest {
    
        /**
         * meetingId  (required)
         */
        private String meetingId;
        private Object body;

        private ApiV1MeetingsMeetingIdCustomerShortUrlGetRequest() {}

        private ApiV1MeetingsMeetingIdCustomerShortUrlGetRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId  (required)
             */
            private final String meetingId;
            

            private Object body;

            /**
             * @param meetingId 
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingsMeetingIdCustomerShortUrlGetRequest build() {
                return new ApiV1MeetingsMeetingIdCustomerShortUrlGetRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingsMeetingIdCustomerShortUrlGetResponse extends ApiResponse {
        private final V1MeetingsMeetingIdCustomerShortUrlGet200Response data;
        public ApiV1MeetingsMeetingIdCustomerShortUrlGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingsMeetingIdCustomerShortUrlGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingsMeetingIdCustomerShortUrlGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingsMeetingIdEnrollApprovalsGetRequest {
    
        /**
         * meetingId 会议ID (required)
         */
        private String meetingId;

        /**
         * operatorId 操作者 ID。会议创建者可以导入报名信息。 operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。  operator_id_type&#x3D;2，operator_id必须和公共参数的openid一致。  operator_id和userid至少填写一个，两个参数如果都传了以operator_id为准。  使用OAuth公参鉴权后不能使用userid为入参。 (required)
         */
        private String operatorId;

        /**
         * operatorIdType 操作者 ID 的类型：  1: userid 2: open_id  如果operator_id和userid具有值，则以operator_id为准； (required)
         */
        private String operatorIdType;

        /**
         * instanceid 用户的终端设备类型： 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 (required)
         */
        private String instanceid;

        /**
         * page 当前页，页码起始值为1 (required)
         */
        private String page;

        /**
         * pageSize 分页大小，最大50条 (required)
         */
        private String pageSize;

        /**
         * status 审批状态筛选字段，审批状态：0 全部，1 待审批，2 已拒绝，3 已批准，默认返回全部 (optional)
         */
        private String status;
        private Object body;

        private ApiV1MeetingsMeetingIdEnrollApprovalsGetRequest() {}

        private ApiV1MeetingsMeetingIdEnrollApprovalsGetRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.instanceid = builder.instanceid;
            

            this.page = builder.page;
            

            this.pageSize = builder.pageSize;
            

            this.status = builder.status;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId 会议ID (required)
             */
            private final String meetingId;
            

            /**
             * operatorId 操作者 ID。会议创建者可以导入报名信息。 operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。  operator_id_type&#x3D;2，operator_id必须和公共参数的openid一致。  operator_id和userid至少填写一个，两个参数如果都传了以operator_id为准。  使用OAuth公参鉴权后不能使用userid为入参。 (required)
             */
            private String operatorId;
            

            /**
             * operatorIdType 操作者 ID 的类型：  1: userid 2: open_id  如果operator_id和userid具有值，则以operator_id为准； (required)
             */
            private String operatorIdType;
            

            /**
             * instanceid 用户的终端设备类型： 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 (required)
             */
            private String instanceid;
            

            /**
             * page 当前页，页码起始值为1 (required)
             */
            private String page;
            

            /**
             * pageSize 分页大小，最大50条 (required)
             */
            private String pageSize;
            

            /**
             * status 审批状态筛选字段，审批状态：0 全部，1 待审批，2 已拒绝，3 已批准，默认返回全部 (optional)
             */
            private String status;
            

            private Object body;

            /**
             * @param meetingId 会议ID
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
            
            /**
             * @param operatorId 操作者 ID。会议创建者可以导入报名信息。 operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。  operator_id_type&#x3D;2，operator_id必须和公共参数的openid一致。  operator_id和userid至少填写一个，两个参数如果都传了以operator_id为准。  使用OAuth公参鉴权后不能使用userid为入参。 (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 操作者 ID 的类型：  1: userid 2: open_id  如果operator_id和userid具有值，则以operator_id为准； (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
            
            /**
             * @param instanceid 用户的终端设备类型： 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 (required)
             */
            public Builder instanceid(String instanceid) {
                this.instanceid = instanceid;
                return this;
            }
            
            
            /**
             * @param page 当前页，页码起始值为1 (required)
             */
            public Builder page(String page) {
                this.page = page;
                return this;
            }
            
            
            /**
             * @param pageSize 分页大小，最大50条 (required)
             */
            public Builder pageSize(String pageSize) {
                this.pageSize = pageSize;
                return this;
            }
            
            
            /**
             * @param status 审批状态筛选字段，审批状态：0 全部，1 待审批，2 已拒绝，3 已批准，默认返回全部 (optional)
             */
            public Builder status(String status) {
                this.status = status;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingsMeetingIdEnrollApprovalsGetRequest build() {
                return new ApiV1MeetingsMeetingIdEnrollApprovalsGetRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public String getInstanceid() {
            return this.instanceid;
        }
        

        public String getPage() {
            return this.page;
        }
        

        public String getPageSize() {
            return this.pageSize;
        }
        

        public String getStatus() {
            return this.status;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingsMeetingIdEnrollApprovalsGetResponse extends ApiResponse {
        private final V1MeetingsMeetingIdEnrollApprovalsGet200Response data;
        public ApiV1MeetingsMeetingIdEnrollApprovalsGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingsMeetingIdEnrollApprovalsGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingsMeetingIdEnrollApprovalsGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingsMeetingIdEnrollApprovalsPutRequest {
    
        /**
         * meetingId 会议ID (required)
         */
        private String meetingId;
        private V1MeetingsMeetingIdEnrollApprovalsPutRequest body;

        private ApiV1MeetingsMeetingIdEnrollApprovalsPutRequest() {}

        private ApiV1MeetingsMeetingIdEnrollApprovalsPutRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId 会议ID (required)
             */
            private final String meetingId;
            

            private V1MeetingsMeetingIdEnrollApprovalsPutRequest body;

            /**
             * @param meetingId 会议ID
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
                        public Builder body(V1MeetingsMeetingIdEnrollApprovalsPutRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingsMeetingIdEnrollApprovalsPutRequest build() {
                return new ApiV1MeetingsMeetingIdEnrollApprovalsPutRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public V1MeetingsMeetingIdEnrollApprovalsPutRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingsMeetingIdEnrollApprovalsPutResponse extends ApiResponse {
        private final V1MeetingsMeetingIdEnrollApprovalsPut200Response data;
        public ApiV1MeetingsMeetingIdEnrollApprovalsPutResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingsMeetingIdEnrollApprovalsPut200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingsMeetingIdEnrollApprovalsPut200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingsMeetingIdEnrollConfigGetRequest {
    
        /**
         * meetingId 会议ID (required)
         */
        private String meetingId;

        /**
         * operatorId 操作者 ID。会议创建者可以导入报名信息。 operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。  operator_id_type&#x3D;2，operator_id必须和公共参数的openid一致。  operator_id和userid至少填写一个，两个参数如果都传了以operator_id为准。  使用OAuth公参鉴权后不能使用userid为入参。 (required)
         */
        private String operatorId;

        /**
         * operatorIdType 操作者 ID 的类型：  1: userid 2: open_id  如果operator_id和userid具有值，则以operator_id为准； (required)
         */
        private String operatorIdType;

        /**
         * instanceid 用户的终端设备类型： 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 (required)
         */
        private String instanceid;
        private Object body;

        private ApiV1MeetingsMeetingIdEnrollConfigGetRequest() {}

        private ApiV1MeetingsMeetingIdEnrollConfigGetRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.instanceid = builder.instanceid;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId 会议ID (required)
             */
            private final String meetingId;
            

            /**
             * operatorId 操作者 ID。会议创建者可以导入报名信息。 operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。  operator_id_type&#x3D;2，operator_id必须和公共参数的openid一致。  operator_id和userid至少填写一个，两个参数如果都传了以operator_id为准。  使用OAuth公参鉴权后不能使用userid为入参。 (required)
             */
            private String operatorId;
            

            /**
             * operatorIdType 操作者 ID 的类型：  1: userid 2: open_id  如果operator_id和userid具有值，则以operator_id为准； (required)
             */
            private String operatorIdType;
            

            /**
             * instanceid 用户的终端设备类型： 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 (required)
             */
            private String instanceid;
            

            private Object body;

            /**
             * @param meetingId 会议ID
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
            
            /**
             * @param operatorId 操作者 ID。会议创建者可以导入报名信息。 operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。  operator_id_type&#x3D;2，operator_id必须和公共参数的openid一致。  operator_id和userid至少填写一个，两个参数如果都传了以operator_id为准。  使用OAuth公参鉴权后不能使用userid为入参。 (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 操作者 ID 的类型：  1: userid 2: open_id  如果operator_id和userid具有值，则以operator_id为准； (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
            
            /**
             * @param instanceid 用户的终端设备类型： 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 (required)
             */
            public Builder instanceid(String instanceid) {
                this.instanceid = instanceid;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingsMeetingIdEnrollConfigGetRequest build() {
                return new ApiV1MeetingsMeetingIdEnrollConfigGetRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public String getInstanceid() {
            return this.instanceid;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingsMeetingIdEnrollConfigGetResponse extends ApiResponse {
        private final V1MeetingsMeetingIdEnrollConfigGet200Response data;
        public ApiV1MeetingsMeetingIdEnrollConfigGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingsMeetingIdEnrollConfigGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingsMeetingIdEnrollConfigGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingsMeetingIdEnrollConfigPutRequest {
    
        /**
         * meetingId 会议ID (required)
         */
        private String meetingId;
        private V1MeetingsMeetingIdEnrollConfigPutRequest body;

        private ApiV1MeetingsMeetingIdEnrollConfigPutRequest() {}

        private ApiV1MeetingsMeetingIdEnrollConfigPutRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId 会议ID (required)
             */
            private final String meetingId;
            

            private V1MeetingsMeetingIdEnrollConfigPutRequest body;

            /**
             * @param meetingId 会议ID
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
                        public Builder body(V1MeetingsMeetingIdEnrollConfigPutRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingsMeetingIdEnrollConfigPutRequest build() {
                return new ApiV1MeetingsMeetingIdEnrollConfigPutRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public V1MeetingsMeetingIdEnrollConfigPutRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingsMeetingIdEnrollConfigPutResponse extends ApiResponse {
        private final V1MeetingsMeetingIdEnrollConfigPut200Response data;
        public ApiV1MeetingsMeetingIdEnrollConfigPutResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingsMeetingIdEnrollConfigPut200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingsMeetingIdEnrollConfigPut200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingsMeetingIdEnrollIdsPostRequest {
    
        /**
         * meetingId 会议ID (required)
         */
        private String meetingId;
        private V1MeetingsMeetingIdEnrollIdsPostRequest body;

        private ApiV1MeetingsMeetingIdEnrollIdsPostRequest() {}

        private ApiV1MeetingsMeetingIdEnrollIdsPostRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId 会议ID (required)
             */
            private final String meetingId;
            

            private V1MeetingsMeetingIdEnrollIdsPostRequest body;

            /**
             * @param meetingId 会议ID
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
                        public Builder body(V1MeetingsMeetingIdEnrollIdsPostRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingsMeetingIdEnrollIdsPostRequest build() {
                return new ApiV1MeetingsMeetingIdEnrollIdsPostRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public V1MeetingsMeetingIdEnrollIdsPostRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingsMeetingIdEnrollIdsPostResponse extends ApiResponse {
        private final V1MeetingsMeetingIdEnrollIdsPost200Response data;
        public ApiV1MeetingsMeetingIdEnrollIdsPostResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingsMeetingIdEnrollIdsPost200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingsMeetingIdEnrollIdsPost200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingsMeetingIdEnrollImportPostRequest {
    
        /**
         * meetingId 会议id (required)
         */
        private String meetingId;
        private V1MeetingsMeetingIdEnrollImportPostRequest body;

        private ApiV1MeetingsMeetingIdEnrollImportPostRequest() {}

        private ApiV1MeetingsMeetingIdEnrollImportPostRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId 会议id (required)
             */
            private final String meetingId;
            

            private V1MeetingsMeetingIdEnrollImportPostRequest body;

            /**
             * @param meetingId 会议id
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
                        public Builder body(V1MeetingsMeetingIdEnrollImportPostRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingsMeetingIdEnrollImportPostRequest build() {
                return new ApiV1MeetingsMeetingIdEnrollImportPostRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public V1MeetingsMeetingIdEnrollImportPostRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingsMeetingIdEnrollImportPostResponse extends ApiResponse {
        private final V1MeetingsMeetingIdEnrollImportPost200Response data;
        public ApiV1MeetingsMeetingIdEnrollImportPostResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingsMeetingIdEnrollImportPost200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingsMeetingIdEnrollImportPost200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingsMeetingIdEnrollUnregistrationDeleteRequest {
    
        /**
         * meetingId  (required)
         */
        private String meetingId;
        private V1MeetingsMeetingIdEnrollUnregistrationDeleteRequest body;

        private ApiV1MeetingsMeetingIdEnrollUnregistrationDeleteRequest() {}

        private ApiV1MeetingsMeetingIdEnrollUnregistrationDeleteRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId  (required)
             */
            private final String meetingId;
            

            private V1MeetingsMeetingIdEnrollUnregistrationDeleteRequest body;

            /**
             * @param meetingId 
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
                        public Builder body(V1MeetingsMeetingIdEnrollUnregistrationDeleteRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingsMeetingIdEnrollUnregistrationDeleteRequest build() {
                return new ApiV1MeetingsMeetingIdEnrollUnregistrationDeleteRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public V1MeetingsMeetingIdEnrollUnregistrationDeleteRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingsMeetingIdEnrollUnregistrationDeleteResponse extends ApiResponse {
        private final V1MeetingsMeetingIdEnrollUnregistrationDelete200Response data;
        public ApiV1MeetingsMeetingIdEnrollUnregistrationDeleteResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingsMeetingIdEnrollUnregistrationDelete200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingsMeetingIdEnrollUnregistrationDelete200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingsMeetingIdGetRequest {
    
        /**
         * meetingId  (required)
         */
        private String meetingId;

        /**
         * instanceid 用户的终端设备类型： 0：PSTN 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：linux 20：Rooms for Touch Windows 21：Rooms for Touch MacOS 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch iOS (required)
         */
        private String instanceid;

        /**
         * operatorId 操作者ID，根据operator_id_type的值，使用不同的类型 (optional)
         */
        private String operatorId;

        /**
         * operatorIdType 操作者ID的类型：1.userid 2.openid 3.rooms_id (optional)
         */
        private String operatorIdType;
        private Object body;

        private ApiV1MeetingsMeetingIdGetRequest() {}

        private ApiV1MeetingsMeetingIdGetRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.instanceid = builder.instanceid;
            

            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId  (required)
             */
            private final String meetingId;
            

            /**
             * instanceid 用户的终端设备类型： 0：PSTN 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：linux 20：Rooms for Touch Windows 21：Rooms for Touch MacOS 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch iOS (required)
             */
            private String instanceid;
            

            /**
             * operatorId 操作者ID，根据operator_id_type的值，使用不同的类型 (optional)
             */
            private String operatorId;
            

            /**
             * operatorIdType 操作者ID的类型：1.userid 2.openid 3.rooms_id (optional)
             */
            private String operatorIdType;
            

            private Object body;

            /**
             * @param meetingId 
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
            
            /**
             * @param instanceid 用户的终端设备类型： 0：PSTN 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：linux 20：Rooms for Touch Windows 21：Rooms for Touch MacOS 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch iOS (required)
             */
            public Builder instanceid(String instanceid) {
                this.instanceid = instanceid;
                return this;
            }
            
            
            /**
             * @param operatorId 操作者ID，根据operator_id_type的值，使用不同的类型 (optional)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 操作者ID的类型：1.userid 2.openid 3.rooms_id (optional)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingsMeetingIdGetRequest build() {
                return new ApiV1MeetingsMeetingIdGetRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public String getInstanceid() {
            return this.instanceid;
        }
        

        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingsMeetingIdGetResponse extends ApiResponse {
        private final V1MeetingsMeetingIdGet200Response data;
        public ApiV1MeetingsMeetingIdGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingsMeetingIdGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingsMeetingIdGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingsMeetingIdInviteesGetRequest {
    
        /**
         * meetingId 会议ID (required)
         */
        private String meetingId;

        /**
         * userid 会议创建者ID.调用方用于标示用户的唯一 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 企业唯一用户标识说明： 1. 企业对接 SSO 时使用的员工唯一标识 ID。 2. 企业调用创建用户接口时传递的 userid 参数。 (required)
         */
        private String userid;

        /**
         * instanceid 用户的终端设备类型：1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：linux 20：Rooms for Touch Windows 21：Rooms for Touch Mac 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch Iphone (required)
         */
        private String instanceid;

        /**
         * pos 分页获取受邀成员列表的查询起始位置值。此参数为非必选参数，默认值为0，从头开始查询。（输出参数has_remaining为 true，表示还存在受邀成员需要继续查询；输出参数next_pos即下一次查询的“pos”值。多次调用该接口直到输出参数“has_remaining”为 false。 (optional)
         */
        private String pos;
        private Object body;

        private ApiV1MeetingsMeetingIdInviteesGetRequest() {}

        private ApiV1MeetingsMeetingIdInviteesGetRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.userid = builder.userid;
            

            this.instanceid = builder.instanceid;
            

            this.pos = builder.pos;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId 会议ID (required)
             */
            private final String meetingId;
            

            /**
             * userid 会议创建者ID.调用方用于标示用户的唯一 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 企业唯一用户标识说明： 1. 企业对接 SSO 时使用的员工唯一标识 ID。 2. 企业调用创建用户接口时传递的 userid 参数。 (required)
             */
            private String userid;
            

            /**
             * instanceid 用户的终端设备类型：1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：linux 20：Rooms for Touch Windows 21：Rooms for Touch Mac 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch Iphone (required)
             */
            private String instanceid;
            

            /**
             * pos 分页获取受邀成员列表的查询起始位置值。此参数为非必选参数，默认值为0，从头开始查询。（输出参数has_remaining为 true，表示还存在受邀成员需要继续查询；输出参数next_pos即下一次查询的“pos”值。多次调用该接口直到输出参数“has_remaining”为 false。 (optional)
             */
            private String pos;
            

            private Object body;

            /**
             * @param meetingId 会议ID
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
            
            /**
             * @param userid 会议创建者ID.调用方用于标示用户的唯一 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 企业唯一用户标识说明： 1. 企业对接 SSO 时使用的员工唯一标识 ID。 2. 企业调用创建用户接口时传递的 userid 参数。 (required)
             */
            public Builder userid(String userid) {
                this.userid = userid;
                return this;
            }
            
            
            /**
             * @param instanceid 用户的终端设备类型：1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：linux 20：Rooms for Touch Windows 21：Rooms for Touch Mac 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch Iphone (required)
             */
            public Builder instanceid(String instanceid) {
                this.instanceid = instanceid;
                return this;
            }
            
            
            /**
             * @param pos 分页获取受邀成员列表的查询起始位置值。此参数为非必选参数，默认值为0，从头开始查询。（输出参数has_remaining为 true，表示还存在受邀成员需要继续查询；输出参数next_pos即下一次查询的“pos”值。多次调用该接口直到输出参数“has_remaining”为 false。 (optional)
             */
            public Builder pos(String pos) {
                this.pos = pos;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingsMeetingIdInviteesGetRequest build() {
                return new ApiV1MeetingsMeetingIdInviteesGetRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public String getUserid() {
            return this.userid;
        }
        

        public String getInstanceid() {
            return this.instanceid;
        }
        

        public String getPos() {
            return this.pos;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingsMeetingIdInviteesGetResponse extends ApiResponse {
        private final V1MeetingsMeetingIdInviteesGet200Response data;
        public ApiV1MeetingsMeetingIdInviteesGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingsMeetingIdInviteesGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingsMeetingIdInviteesGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingsMeetingIdInviteesPutRequest {
    
        /**
         * meetingId 会议ID (required)
         */
        private String meetingId;
        private V1MeetingsMeetingIdInviteesPutRequest body;

        private ApiV1MeetingsMeetingIdInviteesPutRequest() {}

        private ApiV1MeetingsMeetingIdInviteesPutRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId 会议ID (required)
             */
            private final String meetingId;
            

            private V1MeetingsMeetingIdInviteesPutRequest body;

            /**
             * @param meetingId 会议ID
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
                        public Builder body(V1MeetingsMeetingIdInviteesPutRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingsMeetingIdInviteesPutRequest build() {
                return new ApiV1MeetingsMeetingIdInviteesPutRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public V1MeetingsMeetingIdInviteesPutRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingsMeetingIdInviteesPutResponse extends ApiResponse {
        private final Object data;
        public ApiV1MeetingsMeetingIdInviteesPutResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingsMeetingIdParticipantsGetRequest {
    
        /**
         * meetingId  (required)
         */
        private String meetingId;

        /**
         * subMeetingId 周期性会议子会议 ID。说明：可通过查询用户的会议列表、查询会议接口获取返回的子会议 ID，即 current_sub_meeting_id；如果是周期性会议，此参数必传。 (optional)
         */
        private String subMeetingId;

        /**
         * operatorId 操作者ID，根据operator_id_type的值，使用不同的类型 (optional)
         */
        private String operatorId;

        /**
         * operatorIdType 操作者ID的类型：1.userid 2.open_id 3.rooms_id (optional)
         */
        private String operatorIdType;

        /**
         * userid 会议创建者的用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 (optional)
         */
        private String userid;

        /**
         * pos 分页获取参会成员列表的查询起始位置值。当参会成员较多时，建议使用此参数进行分页查询，避免查询超时。此参数为非必选参数，默认值为0，从头开始查询。设置每页返回的数量，请参考参数“size”的说明。查询返回输出参数“has_remaining”为 true，表示该会议人数较多，还有一定数量的参会成员需要继续查询。返回参数“next_pos”的值即为下一次查询的 pos 的值。多次调用该查询接口直到输出参数“has_remaining”值为 false。 (optional)
         */
        private String pos;

        /**
         * size 拉取参会成员条数，目前每页支持最大100条。 (optional)
         */
        private String size;

        /**
         * startTime 参会时间过滤起始时间（单位秒）。说明：时间区间不允许超过31天，如果为空默认当前时间前推31天；start_time 和 end_time 都没传时最大查询时间跨度90天；对于周期性会议查询暂时不生效，请使用分页参数查询。 (optional)
         */
        private String startTime;

        /**
         * endTime  参会时间过滤终止时间（单位秒）。说明：时间区间不允许超过31天，如果为空默认取当前时间；start_time 和 end_time 都没传时最大查询时间跨度90天；对于周期性会议查询暂时不生效，请使用分页参数查询。 (optional)
         */
        private String endTime;
        private Object body;

        private ApiV1MeetingsMeetingIdParticipantsGetRequest() {}

        private ApiV1MeetingsMeetingIdParticipantsGetRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.subMeetingId = builder.subMeetingId;
            

            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.userid = builder.userid;
            

            this.pos = builder.pos;
            

            this.size = builder.size;
            

            this.startTime = builder.startTime;
            

            this.endTime = builder.endTime;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId  (required)
             */
            private final String meetingId;
            

            /**
             * subMeetingId 周期性会议子会议 ID。说明：可通过查询用户的会议列表、查询会议接口获取返回的子会议 ID，即 current_sub_meeting_id；如果是周期性会议，此参数必传。 (optional)
             */
            private String subMeetingId;
            

            /**
             * operatorId 操作者ID，根据operator_id_type的值，使用不同的类型 (optional)
             */
            private String operatorId;
            

            /**
             * operatorIdType 操作者ID的类型：1.userid 2.open_id 3.rooms_id (optional)
             */
            private String operatorIdType;
            

            /**
             * userid 会议创建者的用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 (optional)
             */
            private String userid;
            

            /**
             * pos 分页获取参会成员列表的查询起始位置值。当参会成员较多时，建议使用此参数进行分页查询，避免查询超时。此参数为非必选参数，默认值为0，从头开始查询。设置每页返回的数量，请参考参数“size”的说明。查询返回输出参数“has_remaining”为 true，表示该会议人数较多，还有一定数量的参会成员需要继续查询。返回参数“next_pos”的值即为下一次查询的 pos 的值。多次调用该查询接口直到输出参数“has_remaining”值为 false。 (optional)
             */
            private String pos;
            

            /**
             * size 拉取参会成员条数，目前每页支持最大100条。 (optional)
             */
            private String size;
            

            /**
             * startTime 参会时间过滤起始时间（单位秒）。说明：时间区间不允许超过31天，如果为空默认当前时间前推31天；start_time 和 end_time 都没传时最大查询时间跨度90天；对于周期性会议查询暂时不生效，请使用分页参数查询。 (optional)
             */
            private String startTime;
            

            /**
             * endTime  参会时间过滤终止时间（单位秒）。说明：时间区间不允许超过31天，如果为空默认取当前时间；start_time 和 end_time 都没传时最大查询时间跨度90天；对于周期性会议查询暂时不生效，请使用分页参数查询。 (optional)
             */
            private String endTime;
            

            private Object body;

            /**
             * @param meetingId 
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
            
            /**
             * @param subMeetingId 周期性会议子会议 ID。说明：可通过查询用户的会议列表、查询会议接口获取返回的子会议 ID，即 current_sub_meeting_id；如果是周期性会议，此参数必传。 (optional)
             */
            public Builder subMeetingId(String subMeetingId) {
                this.subMeetingId = subMeetingId;
                return this;
            }
            
            
            /**
             * @param operatorId 操作者ID，根据operator_id_type的值，使用不同的类型 (optional)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 操作者ID的类型：1.userid 2.open_id 3.rooms_id (optional)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
            
            /**
             * @param userid 会议创建者的用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 (optional)
             */
            public Builder userid(String userid) {
                this.userid = userid;
                return this;
            }
            
            
            /**
             * @param pos 分页获取参会成员列表的查询起始位置值。当参会成员较多时，建议使用此参数进行分页查询，避免查询超时。此参数为非必选参数，默认值为0，从头开始查询。设置每页返回的数量，请参考参数“size”的说明。查询返回输出参数“has_remaining”为 true，表示该会议人数较多，还有一定数量的参会成员需要继续查询。返回参数“next_pos”的值即为下一次查询的 pos 的值。多次调用该查询接口直到输出参数“has_remaining”值为 false。 (optional)
             */
            public Builder pos(String pos) {
                this.pos = pos;
                return this;
            }
            
            
            /**
             * @param size 拉取参会成员条数，目前每页支持最大100条。 (optional)
             */
            public Builder size(String size) {
                this.size = size;
                return this;
            }
            
            
            /**
             * @param startTime 参会时间过滤起始时间（单位秒）。说明：时间区间不允许超过31天，如果为空默认当前时间前推31天；start_time 和 end_time 都没传时最大查询时间跨度90天；对于周期性会议查询暂时不生效，请使用分页参数查询。 (optional)
             */
            public Builder startTime(String startTime) {
                this.startTime = startTime;
                return this;
            }
            
            
            /**
             * @param endTime  参会时间过滤终止时间（单位秒）。说明：时间区间不允许超过31天，如果为空默认取当前时间；start_time 和 end_time 都没传时最大查询时间跨度90天；对于周期性会议查询暂时不生效，请使用分页参数查询。 (optional)
             */
            public Builder endTime(String endTime) {
                this.endTime = endTime;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingsMeetingIdParticipantsGetRequest build() {
                return new ApiV1MeetingsMeetingIdParticipantsGetRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public String getSubMeetingId() {
            return this.subMeetingId;
        }
        

        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public String getUserid() {
            return this.userid;
        }
        

        public String getPos() {
            return this.pos;
        }
        

        public String getSize() {
            return this.size;
        }
        

        public String getStartTime() {
            return this.startTime;
        }
        

        public String getEndTime() {
            return this.endTime;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingsMeetingIdParticipantsGetResponse extends ApiResponse {
        private final V1MeetingsMeetingIdParticipantsGet200Response data;
        public ApiV1MeetingsMeetingIdParticipantsGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingsMeetingIdParticipantsGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingsMeetingIdParticipantsGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingsMeetingIdPutRequest {
    
        /**
         * meetingId  (required)
         */
        private String meetingId;
        private V1MeetingsMeetingIdPutRequest body;

        private ApiV1MeetingsMeetingIdPutRequest() {}

        private ApiV1MeetingsMeetingIdPutRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId  (required)
             */
            private final String meetingId;
            

            private V1MeetingsMeetingIdPutRequest body;

            /**
             * @param meetingId 
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
                        public Builder body(V1MeetingsMeetingIdPutRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingsMeetingIdPutRequest build() {
                return new ApiV1MeetingsMeetingIdPutRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public V1MeetingsMeetingIdPutRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingsMeetingIdPutResponse extends ApiResponse {
        private final V1MeetingsMeetingIdPut200Response data;
        public ApiV1MeetingsMeetingIdPutResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingsMeetingIdPut200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingsMeetingIdPut200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingsMeetingIdQosGetRequest {
    
        /**
         * meetingId 会议ID (required)
         */
        private String meetingId;

        /**
         * operatorId 操作者ID (required)
         */
        private String operatorId;

        /**
         * operatorIdType 操作者ID类型 (required)
         */
        private String operatorIdType;

        /**
         * pageSize 分页大小，20-100 (optional, default to 20)
         */
        private String pageSize;

        /**
         * page 页码 (optional, default to 1)
         */
        private String page;

        /**
         * toOperatorId 筛选的用户ID (optional)
         */
        private String toOperatorId;

        /**
         * toOperatorIdType 筛选的用户ID类型 4:ms_open_id (optional)
         */
        private String toOperatorIdType;

        /**
         * key 搜索key(格式：模块_指标) (optional, default to video_upstream_bitrate)
         */
        private String key;

        /**
         * minValue 搜索值,搜索大于等于该值的数据 (optional)
         */
        private String minValue;

        /**
         * maxValue 最大搜索值，搜索小于等于该值的数据 (optional)
         */
        private String maxValue;
        private Object body;

        private ApiV1MeetingsMeetingIdQosGetRequest() {}

        private ApiV1MeetingsMeetingIdQosGetRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.pageSize = builder.pageSize;
            

            this.page = builder.page;
            

            this.toOperatorId = builder.toOperatorId;
            

            this.toOperatorIdType = builder.toOperatorIdType;
            

            this.key = builder.key;
            

            this.minValue = builder.minValue;
            

            this.maxValue = builder.maxValue;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId 会议ID (required)
             */
            private final String meetingId;
            

            /**
             * operatorId 操作者ID (required)
             */
            private String operatorId;
            

            /**
             * operatorIdType 操作者ID类型 (required)
             */
            private String operatorIdType;
            

            /**
             * pageSize 分页大小，20-100 (optional, default to 20)
             */
            private String pageSize;
            

            /**
             * page 页码 (optional, default to 1)
             */
            private String page;
            

            /**
             * toOperatorId 筛选的用户ID (optional)
             */
            private String toOperatorId;
            

            /**
             * toOperatorIdType 筛选的用户ID类型 4:ms_open_id (optional)
             */
            private String toOperatorIdType;
            

            /**
             * key 搜索key(格式：模块_指标) (optional, default to video_upstream_bitrate)
             */
            private String key;
            

            /**
             * minValue 搜索值,搜索大于等于该值的数据 (optional)
             */
            private String minValue;
            

            /**
             * maxValue 最大搜索值，搜索小于等于该值的数据 (optional)
             */
            private String maxValue;
            

            private Object body;

            /**
             * @param meetingId 会议ID
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
            
            /**
             * @param operatorId 操作者ID (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 操作者ID类型 (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
            
            /**
             * @param pageSize 分页大小，20-100 (optional, default to 20)
             */
            public Builder pageSize(String pageSize) {
                this.pageSize = pageSize;
                return this;
            }
            
            
            /**
             * @param page 页码 (optional, default to 1)
             */
            public Builder page(String page) {
                this.page = page;
                return this;
            }
            
            
            /**
             * @param toOperatorId 筛选的用户ID (optional)
             */
            public Builder toOperatorId(String toOperatorId) {
                this.toOperatorId = toOperatorId;
                return this;
            }
            
            
            /**
             * @param toOperatorIdType 筛选的用户ID类型 4:ms_open_id (optional)
             */
            public Builder toOperatorIdType(String toOperatorIdType) {
                this.toOperatorIdType = toOperatorIdType;
                return this;
            }
            
            
            /**
             * @param key 搜索key(格式：模块_指标) (optional, default to video_upstream_bitrate)
             */
            public Builder key(String key) {
                this.key = key;
                return this;
            }
            
            
            /**
             * @param minValue 搜索值,搜索大于等于该值的数据 (optional)
             */
            public Builder minValue(String minValue) {
                this.minValue = minValue;
                return this;
            }
            
            
            /**
             * @param maxValue 最大搜索值，搜索小于等于该值的数据 (optional)
             */
            public Builder maxValue(String maxValue) {
                this.maxValue = maxValue;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingsMeetingIdQosGetRequest build() {
                return new ApiV1MeetingsMeetingIdQosGetRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public String getPageSize() {
            return this.pageSize;
        }
        

        public String getPage() {
            return this.page;
        }
        

        public String getToOperatorId() {
            return this.toOperatorId;
        }
        

        public String getToOperatorIdType() {
            return this.toOperatorIdType;
        }
        

        public String getKey() {
            return this.key;
        }
        

        public String getMinValue() {
            return this.minValue;
        }
        

        public String getMaxValue() {
            return this.maxValue;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingsMeetingIdQosGetResponse extends ApiResponse {
        private final V1MeetingsMeetingIdQosGet200Response data;
        public ApiV1MeetingsMeetingIdQosGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingsMeetingIdQosGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingsMeetingIdQosGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingsMeetingIdQualityGetRequest {
    
        /**
         * meetingId 会议唯一ID (required)
         */
        private String meetingId;

        /**
         * operatorId 操作者 ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。角色校验：付费开通该服务的企业管理员/超管可以查询健康度。 (required)
         */
        private String operatorId;

        /**
         * operatorIdType 操作者 ID 的类型： 1：企业内用户 userid。 2: open_id 4: ms_open_id (required)
         */
        private String operatorIdType;

        /**
         * pageSize 分页大小，最小1，最大50。 (required)
         */
        private String pageSize;

        /**
         * page 当前页，页码起始值，最小1，最大2000。 (required)
         */
        private String page;

        /**
         * startTime 参会时间过滤起始时间，UNIX 时间戳（单位秒），可查询的时间区间为过去7天到现在。 返回meeting_id对应会议房间下，开始时间大于等于start_time且离start_time最近的一个媒体房间数据（从第一个人入会到会中成员全部离开会议形成一个媒体房间，若同一会议号下再次有人入会则形成新的媒体房间） 如果同一会议号下有多个媒体房间，请先使用“获取账户级已结束会议列表”接口查询，获知需查询的媒体房间的start_time。 (required)
         */
        private String startTime;

        /**
         * instanceid 用户的终端设备类型： 0：PSTN 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：linux 20：Rooms for Touch Windows 21：Rooms for Touch MacOS 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch iOS (optional)
         */
        private String instanceid;

        /**
         * subMeetingId 周期性会议子会议 ID。说明：可通过查询用户的会议列表、查询会议接口获取返回的子会议 ID，即 current_sub_meeting_id；如果是周期性会议，此参数必传。 (optional)
         */
        private String subMeetingId;
        private Object body;

        private ApiV1MeetingsMeetingIdQualityGetRequest() {}

        private ApiV1MeetingsMeetingIdQualityGetRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.pageSize = builder.pageSize;
            

            this.page = builder.page;
            

            this.startTime = builder.startTime;
            

            this.instanceid = builder.instanceid;
            

            this.subMeetingId = builder.subMeetingId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId 会议唯一ID (required)
             */
            private final String meetingId;
            

            /**
             * operatorId 操作者 ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。角色校验：付费开通该服务的企业管理员/超管可以查询健康度。 (required)
             */
            private String operatorId;
            

            /**
             * operatorIdType 操作者 ID 的类型： 1：企业内用户 userid。 2: open_id 4: ms_open_id (required)
             */
            private String operatorIdType;
            

            /**
             * pageSize 分页大小，最小1，最大50。 (required)
             */
            private String pageSize;
            

            /**
             * page 当前页，页码起始值，最小1，最大2000。 (required)
             */
            private String page;
            

            /**
             * startTime 参会时间过滤起始时间，UNIX 时间戳（单位秒），可查询的时间区间为过去7天到现在。 返回meeting_id对应会议房间下，开始时间大于等于start_time且离start_time最近的一个媒体房间数据（从第一个人入会到会中成员全部离开会议形成一个媒体房间，若同一会议号下再次有人入会则形成新的媒体房间） 如果同一会议号下有多个媒体房间，请先使用“获取账户级已结束会议列表”接口查询，获知需查询的媒体房间的start_time。 (required)
             */
            private String startTime;
            

            /**
             * instanceid 用户的终端设备类型： 0：PSTN 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：linux 20：Rooms for Touch Windows 21：Rooms for Touch MacOS 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch iOS (optional)
             */
            private String instanceid;
            

            /**
             * subMeetingId 周期性会议子会议 ID。说明：可通过查询用户的会议列表、查询会议接口获取返回的子会议 ID，即 current_sub_meeting_id；如果是周期性会议，此参数必传。 (optional)
             */
            private String subMeetingId;
            

            private Object body;

            /**
             * @param meetingId 会议唯一ID
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
            
            /**
             * @param operatorId 操作者 ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。角色校验：付费开通该服务的企业管理员/超管可以查询健康度。 (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 操作者 ID 的类型： 1：企业内用户 userid。 2: open_id 4: ms_open_id (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
            
            /**
             * @param pageSize 分页大小，最小1，最大50。 (required)
             */
            public Builder pageSize(String pageSize) {
                this.pageSize = pageSize;
                return this;
            }
            
            
            /**
             * @param page 当前页，页码起始值，最小1，最大2000。 (required)
             */
            public Builder page(String page) {
                this.page = page;
                return this;
            }
            
            
            /**
             * @param startTime 参会时间过滤起始时间，UNIX 时间戳（单位秒），可查询的时间区间为过去7天到现在。 返回meeting_id对应会议房间下，开始时间大于等于start_time且离start_time最近的一个媒体房间数据（从第一个人入会到会中成员全部离开会议形成一个媒体房间，若同一会议号下再次有人入会则形成新的媒体房间） 如果同一会议号下有多个媒体房间，请先使用“获取账户级已结束会议列表”接口查询，获知需查询的媒体房间的start_time。 (required)
             */
            public Builder startTime(String startTime) {
                this.startTime = startTime;
                return this;
            }
            
            
            /**
             * @param instanceid 用户的终端设备类型： 0：PSTN 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：linux 20：Rooms for Touch Windows 21：Rooms for Touch MacOS 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch iOS (optional)
             */
            public Builder instanceid(String instanceid) {
                this.instanceid = instanceid;
                return this;
            }
            
            
            /**
             * @param subMeetingId 周期性会议子会议 ID。说明：可通过查询用户的会议列表、查询会议接口获取返回的子会议 ID，即 current_sub_meeting_id；如果是周期性会议，此参数必传。 (optional)
             */
            public Builder subMeetingId(String subMeetingId) {
                this.subMeetingId = subMeetingId;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingsMeetingIdQualityGetRequest build() {
                return new ApiV1MeetingsMeetingIdQualityGetRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public String getPageSize() {
            return this.pageSize;
        }
        

        public String getPage() {
            return this.page;
        }
        

        public String getStartTime() {
            return this.startTime;
        }
        

        public String getInstanceid() {
            return this.instanceid;
        }
        

        public String getSubMeetingId() {
            return this.subMeetingId;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingsMeetingIdQualityGetResponse extends ApiResponse {
        private final V1MeetingsMeetingIdQualityGet200Response data;
        public ApiV1MeetingsMeetingIdQualityGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingsMeetingIdQualityGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingsMeetingIdQualityGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingsMeetingIdRealTimeParticipantsGetRequest {
    
        /**
         * meetingId 会议唯一ID (required)
         */
        private String meetingId;

        /**
         * operatorId 操作者 ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
         */
        private String operatorId;

        /**
         * operatorIdType Integer 操作者 ID 的类型：1：企业内用户 userid。2: open_id3. rooms_id (required)
         */
        private String operatorIdType;

        /**
         * page 当前页，页码起始值为1。 (required)
         */
        private String page;

        /**
         * pageSize 分页大小，最大50条。 (required)
         */
        private String pageSize;

        /**
         * subMeetingId String 周期性会议子会议 ID。说明：可通过查询用户的会议列表、查询会议接口获取返回的子会议 ID，即 current_sub_meeting_id；如果是周期性会议，此参数必传。 (optional)
         */
        private String subMeetingId;
        private Object body;

        private ApiV1MeetingsMeetingIdRealTimeParticipantsGetRequest() {}

        private ApiV1MeetingsMeetingIdRealTimeParticipantsGetRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.page = builder.page;
            

            this.pageSize = builder.pageSize;
            

            this.subMeetingId = builder.subMeetingId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId 会议唯一ID (required)
             */
            private final String meetingId;
            

            /**
             * operatorId 操作者 ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
             */
            private String operatorId;
            

            /**
             * operatorIdType Integer 操作者 ID 的类型：1：企业内用户 userid。2: open_id3. rooms_id (required)
             */
            private String operatorIdType;
            

            /**
             * page 当前页，页码起始值为1。 (required)
             */
            private String page;
            

            /**
             * pageSize 分页大小，最大50条。 (required)
             */
            private String pageSize;
            

            /**
             * subMeetingId String 周期性会议子会议 ID。说明：可通过查询用户的会议列表、查询会议接口获取返回的子会议 ID，即 current_sub_meeting_id；如果是周期性会议，此参数必传。 (optional)
             */
            private String subMeetingId;
            

            private Object body;

            /**
             * @param meetingId 会议唯一ID
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
            
            /**
             * @param operatorId 操作者 ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType Integer 操作者 ID 的类型：1：企业内用户 userid。2: open_id3. rooms_id (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
            
            /**
             * @param page 当前页，页码起始值为1。 (required)
             */
            public Builder page(String page) {
                this.page = page;
                return this;
            }
            
            
            /**
             * @param pageSize 分页大小，最大50条。 (required)
             */
            public Builder pageSize(String pageSize) {
                this.pageSize = pageSize;
                return this;
            }
            
            
            /**
             * @param subMeetingId String 周期性会议子会议 ID。说明：可通过查询用户的会议列表、查询会议接口获取返回的子会议 ID，即 current_sub_meeting_id；如果是周期性会议，此参数必传。 (optional)
             */
            public Builder subMeetingId(String subMeetingId) {
                this.subMeetingId = subMeetingId;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingsMeetingIdRealTimeParticipantsGetRequest build() {
                return new ApiV1MeetingsMeetingIdRealTimeParticipantsGetRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public String getPage() {
            return this.page;
        }
        

        public String getPageSize() {
            return this.pageSize;
        }
        

        public String getSubMeetingId() {
            return this.subMeetingId;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingsMeetingIdRealTimeParticipantsGetResponse extends ApiResponse {
        private final V1MeetingsMeetingIdRealTimeParticipantsGet200Response data;
        public ApiV1MeetingsMeetingIdRealTimeParticipantsGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingsMeetingIdRealTimeParticipantsGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingsMeetingIdRealTimeParticipantsGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingsMeetingIdVirtualBackgroundPostRequest {
    
        /**
         * meetingId 会议ID (required)
         */
        private String meetingId;
        private V1MeetingsMeetingIdVirtualBackgroundPostRequest body;

        private ApiV1MeetingsMeetingIdVirtualBackgroundPostRequest() {}

        private ApiV1MeetingsMeetingIdVirtualBackgroundPostRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId 会议ID (required)
             */
            private final String meetingId;
            

            private V1MeetingsMeetingIdVirtualBackgroundPostRequest body;

            /**
             * @param meetingId 会议ID
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
                        public Builder body(V1MeetingsMeetingIdVirtualBackgroundPostRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingsMeetingIdVirtualBackgroundPostRequest build() {
                return new ApiV1MeetingsMeetingIdVirtualBackgroundPostRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public V1MeetingsMeetingIdVirtualBackgroundPostRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingsMeetingIdVirtualBackgroundPostResponse extends ApiResponse {
        private final V1MeetingsMeetingIdVirtualBackgroundPost200Response data;
        public ApiV1MeetingsMeetingIdVirtualBackgroundPostResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingsMeetingIdVirtualBackgroundPost200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingsMeetingIdVirtualBackgroundPost200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingsMeetingIdWaitingRoomParticipantsGetRequest {
    
        /**
         * meetingId  (required)
         */
        private String meetingId;

        /**
         * userid 会议创建者的用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId） (required)
         */
        private String userid;

        /**
         * pageSize 分页大小，默认10，最大50 (optional)
         */
        private String pageSize;

        /**
         * page 页码，从1开始 (optional)
         */
        private String page;
        private Object body;

        private ApiV1MeetingsMeetingIdWaitingRoomParticipantsGetRequest() {}

        private ApiV1MeetingsMeetingIdWaitingRoomParticipantsGetRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.userid = builder.userid;
            

            this.pageSize = builder.pageSize;
            

            this.page = builder.page;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId  (required)
             */
            private final String meetingId;
            

            /**
             * userid 会议创建者的用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId） (required)
             */
            private String userid;
            

            /**
             * pageSize 分页大小，默认10，最大50 (optional)
             */
            private String pageSize;
            

            /**
             * page 页码，从1开始 (optional)
             */
            private String page;
            

            private Object body;

            /**
             * @param meetingId 
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
            
            /**
             * @param userid 会议创建者的用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId） (required)
             */
            public Builder userid(String userid) {
                this.userid = userid;
                return this;
            }
            
            
            /**
             * @param pageSize 分页大小，默认10，最大50 (optional)
             */
            public Builder pageSize(String pageSize) {
                this.pageSize = pageSize;
                return this;
            }
            
            
            /**
             * @param page 页码，从1开始 (optional)
             */
            public Builder page(String page) {
                this.page = page;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingsMeetingIdWaitingRoomParticipantsGetRequest build() {
                return new ApiV1MeetingsMeetingIdWaitingRoomParticipantsGetRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public String getUserid() {
            return this.userid;
        }
        

        public String getPageSize() {
            return this.pageSize;
        }
        

        public String getPage() {
            return this.page;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingsMeetingIdWaitingRoomParticipantsGetResponse extends ApiResponse {
        private final V1MeetingsMeetingIdWaitingRoomParticipantsGet200Response data;
        public ApiV1MeetingsMeetingIdWaitingRoomParticipantsGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingsMeetingIdWaitingRoomParticipantsGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingsMeetingIdWaitingRoomParticipantsGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingsPostRequest {
            private V1MeetingsPostRequest body;

        private ApiV1MeetingsPostRequest() {}

        private ApiV1MeetingsPostRequest(Builder builder) {
            
            this.body = builder.body;
        }

        public static class Builder {
            
            private V1MeetingsPostRequest body;

            /**
             */
            public Builder() {
            }
                        public Builder body(V1MeetingsPostRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingsPostRequest build() {
                return new ApiV1MeetingsPostRequest(this);
            }
        }
        
        public V1MeetingsPostRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingsPostResponse extends ApiResponse {
        private final V1MeetingsPost200Response data;
        public ApiV1MeetingsPostResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingsPost200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingsPost200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingsQueryMeetingidForDevicePostRequest {
            private V1MeetingsQueryMeetingidForDevicePostRequest body;

        private ApiV1MeetingsQueryMeetingidForDevicePostRequest() {}

        private ApiV1MeetingsQueryMeetingidForDevicePostRequest(Builder builder) {
            
            this.body = builder.body;
        }

        public static class Builder {
            
            private V1MeetingsQueryMeetingidForDevicePostRequest body;

            /**
             */
            public Builder() {
            }
                        public Builder body(V1MeetingsQueryMeetingidForDevicePostRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingsQueryMeetingidForDevicePostRequest build() {
                return new ApiV1MeetingsQueryMeetingidForDevicePostRequest(this);
            }
        }
        
        public V1MeetingsQueryMeetingidForDevicePostRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingsQueryMeetingidForDevicePostResponse extends ApiResponse {
        private final V1MeetingsQueryMeetingidForDevicePost200Response data;
        public ApiV1MeetingsQueryMeetingidForDevicePostResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingsQueryMeetingidForDevicePost200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingsQueryMeetingidForDevicePost200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1PmiMeetingsGetRequest {
    
        /**
         * operatorId 企业下操作者ID，根据operator_id_type的值，使用不同的类型 (required)
         */
        private String operatorId;

        /**
         * operatorIdType 操作者ID类型： 1.企业用户userid 3.rooms设备rooms_id (required)
         */
        private String operatorIdType;

        /**
         * instanceid 用户的终端设备类型： 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：linux 20：Rooms for Touch Windows 21：Rooms for Touch Mac 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch Iphone (required)
         */
        private String instanceid;

        /**
         * startTime 查询起始时间，时间区间不超过90天 (optional)
         */
        private String startTime;

        /**
         * endTime 查询结束时间，时间区间不超过90天 (optional)
         */
        private String endTime;

        /**
         * page 当前页，页码起始值为1，默认为1 (optional)
         */
        private String page;

        /**
         * pageSize 分页大小，默认20条，最大20条 (optional)
         */
        private String pageSize;
        private Object body;

        private ApiV1PmiMeetingsGetRequest() {}

        private ApiV1PmiMeetingsGetRequest(Builder builder) {
            
            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.instanceid = builder.instanceid;
            

            this.startTime = builder.startTime;
            

            this.endTime = builder.endTime;
            

            this.page = builder.page;
            

            this.pageSize = builder.pageSize;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * operatorId 企业下操作者ID，根据operator_id_type的值，使用不同的类型 (required)
             */
            private String operatorId;
            

            /**
             * operatorIdType 操作者ID类型： 1.企业用户userid 3.rooms设备rooms_id (required)
             */
            private String operatorIdType;
            

            /**
             * instanceid 用户的终端设备类型： 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：linux 20：Rooms for Touch Windows 21：Rooms for Touch Mac 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch Iphone (required)
             */
            private String instanceid;
            

            /**
             * startTime 查询起始时间，时间区间不超过90天 (optional)
             */
            private String startTime;
            

            /**
             * endTime 查询结束时间，时间区间不超过90天 (optional)
             */
            private String endTime;
            

            /**
             * page 当前页，页码起始值为1，默认为1 (optional)
             */
            private String page;
            

            /**
             * pageSize 分页大小，默认20条，最大20条 (optional)
             */
            private String pageSize;
            

            private Object body;

            /**
             */
            public Builder() {
            }
            
            /**
             * @param operatorId 企业下操作者ID，根据operator_id_type的值，使用不同的类型 (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 操作者ID类型： 1.企业用户userid 3.rooms设备rooms_id (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
            
            /**
             * @param instanceid 用户的终端设备类型： 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：linux 20：Rooms for Touch Windows 21：Rooms for Touch Mac 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch Iphone (required)
             */
            public Builder instanceid(String instanceid) {
                this.instanceid = instanceid;
                return this;
            }
            
            
            /**
             * @param startTime 查询起始时间，时间区间不超过90天 (optional)
             */
            public Builder startTime(String startTime) {
                this.startTime = startTime;
                return this;
            }
            
            
            /**
             * @param endTime 查询结束时间，时间区间不超过90天 (optional)
             */
            public Builder endTime(String endTime) {
                this.endTime = endTime;
                return this;
            }
            
            
            /**
             * @param page 当前页，页码起始值为1，默认为1 (optional)
             */
            public Builder page(String page) {
                this.page = page;
                return this;
            }
            
            
            /**
             * @param pageSize 分页大小，默认20条，最大20条 (optional)
             */
            public Builder pageSize(String pageSize) {
                this.pageSize = pageSize;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1PmiMeetingsGetRequest build() {
                return new ApiV1PmiMeetingsGetRequest(this);
            }
        }
        
        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public String getInstanceid() {
            return this.instanceid;
        }
        

        public String getStartTime() {
            return this.startTime;
        }
        

        public String getEndTime() {
            return this.endTime;
        }
        

        public String getPage() {
            return this.page;
        }
        

        public String getPageSize() {
            return this.pageSize;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1PmiMeetingsGetResponse extends ApiResponse {
        private final V1PmiMeetingsGet200Response data;
        public ApiV1PmiMeetingsGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1PmiMeetingsGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1PmiMeetingsGet200Response getData() {
            return this.data;
        }
    }

    /**
     * v1AsrConfigPut 设置语音识别热词[/v1/asr/config - PUT]
     * <p>用户可以通过接口进行您创建的会议的语音识别设置。 权限点：查看或管理您的会议<p/>
     * @param req ApiV1AsrConfigPutRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1AsrConfigPutResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1AsrConfigPutResponse v1AsrConfigPut(ApiV1AsrConfigPutRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/asr/config")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            
            // path 参数
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().put(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1AsrConfigPutResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1AsrConfigPut 设置语音识别热词[/v1/asr/config - PUT]
    * <p>用户可以通过接口进行您创建的会议的语音识别设置。 权限点：查看或管理您的会议<p/>
    * @param req ApiV1AsrConfigPutRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1AsrConfigPutResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1AsrConfigPutResponse v1AsrConfigPut(ApiV1AsrConfigPutRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1AsrConfigPut(req, null, builders);
    }
    /**
     * v1AsrDetailsGet 导出实时转写记录[/v1/asr/details - GET]
     * <p>如果会议开启了会议转写，可以导出转写记录。主持人可以设置导出权限，默认主持人可以导出，支持会中和会后导出。<p/>
     * @param req ApiV1AsrDetailsGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1AsrDetailsGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1AsrDetailsGetResponse v1AsrDetailsGet(ApiV1AsrDetailsGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/asr/details")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            

            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            

            

            

            

            

            

            
            // path 参数
            // query 参数
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getMeetingId() != null) {
                apiReq.getQueryParams().set("meeting_id", req.getMeetingId());
            }
            if (req.getStartTime() != null) {
                apiReq.getQueryParams().set("start_time", req.getStartTime());
            }
            if (req.getEndTime() != null) {
                apiReq.getQueryParams().set("end_time", req.getEndTime());
            }
            if (req.getFileType() != null) {
                apiReq.getQueryParams().set("file_type", req.getFileType());
            }
            if (req.getPage() != null) {
                apiReq.getQueryParams().set("page", req.getPage());
            }
            if (req.getPageSize() != null) {
                apiReq.getQueryParams().set("page_size", req.getPageSize());
            }
            if (req.getShowBilingual() != null) {
                apiReq.getQueryParams().set("show_bilingual", req.getShowBilingual());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1AsrDetailsGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1AsrDetailsGet 导出实时转写记录[/v1/asr/details - GET]
    * <p>如果会议开启了会议转写，可以导出转写记录。主持人可以设置导出权限，默认主持人可以导出，支持会中和会后导出。<p/>
    * @param req ApiV1AsrDetailsGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1AsrDetailsGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1AsrDetailsGetResponse v1AsrDetailsGet(ApiV1AsrDetailsGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1AsrDetailsGet(req, null, builders);
    }
    /**
     * v1AsrPushStatusPost 开启/关闭实时转写推送[/v1/asr/push-status - POST]
     * <p> 会议创建者可开启本场会议的实时转写内容推送，待开始的会议或未打开实时转写功能的会议也支持开启推送，开启推送后如果会议打开转写，则可通过webhook 实时转写推送 实时获取到转写内容。 企业 secret 鉴权用户可开启该用户所属企业下的所有会议转写推送，OAuth2.0 鉴权用户只能开启通过 OAuth2.0 鉴权创建的会议转写推送。 企业级自建应用通过 webhook 可以接收到企业下所有开启推送的会议的转写内容，应用级自建应用通过 webhook 可以接收到本应用创建的会议的转写内容。OAuth2.0 应用通过 webhook 可以接收到 OAuth2.0 鉴权创建的会议的转写内容。 <p/>
     * @param req ApiV1AsrPushStatusPostRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1AsrPushStatusPostResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1AsrPushStatusPostResponse v1AsrPushStatusPost(ApiV1AsrPushStatusPostRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/asr/push-status")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            
            // path 参数
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().post(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1AsrPushStatusPostResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1AsrPushStatusPost 开启/关闭实时转写推送[/v1/asr/push-status - POST]
    * <p> 会议创建者可开启本场会议的实时转写内容推送，待开始的会议或未打开实时转写功能的会议也支持开启推送，开启推送后如果会议打开转写，则可通过webhook 实时转写推送 实时获取到转写内容。 企业 secret 鉴权用户可开启该用户所属企业下的所有会议转写推送，OAuth2.0 鉴权用户只能开启通过 OAuth2.0 鉴权创建的会议转写推送。 企业级自建应用通过 webhook 可以接收到企业下所有开启推送的会议的转写内容，应用级自建应用通过 webhook 可以接收到本应用创建的会议的转写内容。OAuth2.0 应用通过 webhook 可以接收到 OAuth2.0 鉴权创建的会议的转写内容。 <p/>
    * @param req ApiV1AsrPushStatusPostRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1AsrPushStatusPostResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1AsrPushStatusPostResponse v1AsrPushStatusPost(ApiV1AsrPushStatusPostRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1AsrPushStatusPost(req, null, builders);
    }
    /**
     * v1HistoryMeetingsUseridGet 查询用户已结束会议列表[/v1/history/meetings/{userid} - GET]
     * <p>获取某指定用户的已结束的会议列表，可返回用户创建与参加过的已结束会议列表，支持 OAuth2.0 鉴权和企微鉴权。 请优先使用operator_id和operator_id_type查询，当使用operator_id和operator_id_type时，userid设置为operator_id的值即可<p/>
     * @param req ApiV1HistoryMeetingsUseridGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1HistoryMeetingsUseridGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1HistoryMeetingsUseridGetResponse v1HistoryMeetingsUseridGet(ApiV1HistoryMeetingsUseridGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/history/meetings/{userid}")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'userid' is set
            if (req.getUserid() == null) {
                throw new IllegalArgumentException("'userid' is required and must be specified");
            }
            

            // verify the required parameter 'pageSize' is set
            if (req.getPageSize() == null) {
                throw new IllegalArgumentException("'pageSize' is required and must be specified");
            }
            

            // verify the required parameter 'page' is set
            if (req.getPage() == null) {
                throw new IllegalArgumentException("'page' is required and must be specified");
            }
            

            

            

            

            
            // path 参数
            apiReq.getPathParams().set("userid", req.getUserid());
            // query 参数
            if (req.getPageSize() != null) {
                apiReq.getQueryParams().set("page_size", req.getPageSize());
            }
            if (req.getPage() != null) {
                apiReq.getQueryParams().set("page", req.getPage());
            }
            if (req.getMeetingCode() != null) {
                apiReq.getQueryParams().set("meeting_code", req.getMeetingCode());
            }
            if (req.getStartTime() != null) {
                apiReq.getQueryParams().set("start_time", req.getStartTime());
            }
            if (req.getEndTime() != null) {
                apiReq.getQueryParams().set("end_time", req.getEndTime());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1HistoryMeetingsUseridGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1HistoryMeetingsUseridGet 查询用户已结束会议列表[/v1/history/meetings/{userid} - GET]
    * <p>获取某指定用户的已结束的会议列表，可返回用户创建与参加过的已结束会议列表，支持 OAuth2.0 鉴权和企微鉴权。 请优先使用operator_id和operator_id_type查询，当使用operator_id和operator_id_type时，userid设置为operator_id的值即可<p/>
    * @param req ApiV1HistoryMeetingsUseridGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1HistoryMeetingsUseridGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1HistoryMeetingsUseridGetResponse v1HistoryMeetingsUseridGet(ApiV1HistoryMeetingsUseridGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1HistoryMeetingsUseridGet(req, null, builders);
    }
    /**
     * v1MeetingJobIdGet 获取导出 PSTN 通话详单任务结果[/v1/meeting/{job_id} - GET]
     * <p>获取异步导出任务的结果。<p/>
     * @param req ApiV1MeetingJobIdGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingJobIdGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingJobIdGetResponse v1MeetingJobIdGet(ApiV1MeetingJobIdGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meeting/{job_id}")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'jobId' is set
            if (req.getJobId() == null) {
                throw new IllegalArgumentException("'jobId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            

            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("job_id", req.getJobId());
            // query 参数
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingJobIdGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingJobIdGet 获取导出 PSTN 通话详单任务结果[/v1/meeting/{job_id} - GET]
    * <p>获取异步导出任务的结果。<p/>
    * @param req ApiV1MeetingJobIdGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingJobIdGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingJobIdGetResponse v1MeetingJobIdGet(ApiV1MeetingJobIdGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingJobIdGet(req, null, builders);
    }
    /**
     * v1MeetingMeetingIdWaitingRoomGet 查询等候室成员记录[/v1/meeting/{meeting_id}/waiting-room - GET]
     * <p>会议创建者、主持人、联席主持人可以查询等候室成员列表，包括等候室内所有用户的进出记录。会前、会中、会后都可以查询。 “查询等候室成员列表”改为“获取实时等候室成员列表”，只有当前等候室的成员。如果是PMI会议，返回的是PMI的meeting_code。 鉴权方式：JWT鉴权、OAuth鉴权、SDK鉴权 OAuth鉴权的权限为：查询会议、查询和管理会议<p/>
     * @param req ApiV1MeetingMeetingIdWaitingRoomGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingMeetingIdWaitingRoomGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingMeetingIdWaitingRoomGetResponse v1MeetingMeetingIdWaitingRoomGet(ApiV1MeetingMeetingIdWaitingRoomGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meeting/{meeting_id}/waiting-room")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            

            // verify the required parameter 'page' is set
            if (req.getPage() == null) {
                throw new IllegalArgumentException("'page' is required and must be specified");
            }
            

            // verify the required parameter 'pageSize' is set
            if (req.getPageSize() == null) {
                throw new IllegalArgumentException("'pageSize' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getPage() != null) {
                apiReq.getQueryParams().set("page", req.getPage());
            }
            if (req.getPageSize() != null) {
                apiReq.getQueryParams().set("page_size", req.getPageSize());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingMeetingIdWaitingRoomGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingMeetingIdWaitingRoomGet 查询等候室成员记录[/v1/meeting/{meeting_id}/waiting-room - GET]
    * <p>会议创建者、主持人、联席主持人可以查询等候室成员列表，包括等候室内所有用户的进出记录。会前、会中、会后都可以查询。 “查询等候室成员列表”改为“获取实时等候室成员列表”，只有当前等候室的成员。如果是PMI会议，返回的是PMI的meeting_code。 鉴权方式：JWT鉴权、OAuth鉴权、SDK鉴权 OAuth鉴权的权限为：查询会议、查询和管理会议<p/>
    * @param req ApiV1MeetingMeetingIdWaitingRoomGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingMeetingIdWaitingRoomGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingMeetingIdWaitingRoomGetResponse v1MeetingMeetingIdWaitingRoomGet(ApiV1MeetingMeetingIdWaitingRoomGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingMeetingIdWaitingRoomGet(req, null, builders);
    }
    /**
     * v1MeetingMeetingIdWaitingRoomWelcomeMessageGet 获取等候室欢迎语[/v1/meeting/{meeting_id}/waiting-room-welcome-message - GET]
     * <p>查询会议的等候室欢迎语。当有用户进入等候室时，会收到来自会议主办方的私聊消息引导。 鉴权方式: JWT鉴权、OAuth鉴权<p/>
     * @param req ApiV1MeetingMeetingIdWaitingRoomWelcomeMessageGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingMeetingIdWaitingRoomWelcomeMessageGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingMeetingIdWaitingRoomWelcomeMessageGetResponse v1MeetingMeetingIdWaitingRoomWelcomeMessageGet(ApiV1MeetingMeetingIdWaitingRoomWelcomeMessageGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meeting/{meeting_id}/waiting-room-welcome-message")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingMeetingIdWaitingRoomWelcomeMessageGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingMeetingIdWaitingRoomWelcomeMessageGet 获取等候室欢迎语[/v1/meeting/{meeting_id}/waiting-room-welcome-message - GET]
    * <p>查询会议的等候室欢迎语。当有用户进入等候室时，会收到来自会议主办方的私聊消息引导。 鉴权方式: JWT鉴权、OAuth鉴权<p/>
    * @param req ApiV1MeetingMeetingIdWaitingRoomWelcomeMessageGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingMeetingIdWaitingRoomWelcomeMessageGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingMeetingIdWaitingRoomWelcomeMessageGetResponse v1MeetingMeetingIdWaitingRoomWelcomeMessageGet(ApiV1MeetingMeetingIdWaitingRoomWelcomeMessageGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingMeetingIdWaitingRoomWelcomeMessageGet(req, null, builders);
    }
    /**
     * v1MeetingSetWaitingRoomWelcomeMessagePost 设置等候室欢迎语[/v1/meeting/set-waiting-room-welcome-message - POST]
     * <p>为已开启等候室的会议配置等候室欢迎语。当有用户进入等候室时，会收到来自会议主办方的私聊消息引导。  鉴权方式: JWT鉴权、OAuth鉴权<p/>
     * @param req ApiV1MeetingSetWaitingRoomWelcomeMessagePostRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingSetWaitingRoomWelcomeMessagePostResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingSetWaitingRoomWelcomeMessagePostResponse v1MeetingSetWaitingRoomWelcomeMessagePost(ApiV1MeetingSetWaitingRoomWelcomeMessagePostRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meeting/set-waiting-room-welcome-message")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            
            // path 参数
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().post(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingSetWaitingRoomWelcomeMessagePostResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingSetWaitingRoomWelcomeMessagePost 设置等候室欢迎语[/v1/meeting/set-waiting-room-welcome-message - POST]
    * <p>为已开启等候室的会议配置等候室欢迎语。当有用户进入等候室时，会收到来自会议主办方的私聊消息引导。  鉴权方式: JWT鉴权、OAuth鉴权<p/>
    * @param req ApiV1MeetingSetWaitingRoomWelcomeMessagePostRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingSetWaitingRoomWelcomeMessagePostResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingSetWaitingRoomWelcomeMessagePostResponse v1MeetingSetWaitingRoomWelcomeMessagePost(ApiV1MeetingSetWaitingRoomWelcomeMessagePostRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingSetWaitingRoomWelcomeMessagePost(req, null, builders);
    }
    /**
     * v1MeetingsCustomerShortUrlPost 创建用户专属参会链接[/v1/meetings/customer-short-url - POST]
     * <p>使用该接口，可用 &#x60;customer_data&#x60; 进行区分，为一场会议生成多个会议链接。通过用户入会、用户进入等候室等事件，或通过获取等候室成员列表的 API 查询到该参数。 该接口不支持个人会议号会议、网络研讨会（Webinar）。支持企业品牌化链接。 参会者腾讯会议客户端版本需大于等于 3.2.0。 暂不支持 OAuth 2.0 鉴权方式访问。<p/>
     * @param req ApiV1MeetingsCustomerShortUrlPostRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingsCustomerShortUrlPostResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingsCustomerShortUrlPostResponse v1MeetingsCustomerShortUrlPost(ApiV1MeetingsCustomerShortUrlPostRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meetings/customer-short-url")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            
            // path 参数
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().post(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingsCustomerShortUrlPostResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingsCustomerShortUrlPost 创建用户专属参会链接[/v1/meetings/customer-short-url - POST]
    * <p>使用该接口，可用 &#x60;customer_data&#x60; 进行区分，为一场会议生成多个会议链接。通过用户入会、用户进入等候室等事件，或通过获取等候室成员列表的 API 查询到该参数。 该接口不支持个人会议号会议、网络研讨会（Webinar）。支持企业品牌化链接。 参会者腾讯会议客户端版本需大于等于 3.2.0。 暂不支持 OAuth 2.0 鉴权方式访问。<p/>
    * @param req ApiV1MeetingsCustomerShortUrlPostRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingsCustomerShortUrlPostResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingsCustomerShortUrlPostResponse v1MeetingsCustomerShortUrlPost(ApiV1MeetingsCustomerShortUrlPostRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingsCustomerShortUrlPost(req, null, builders);
    }
    /**
     * v1MeetingsGet 查询用户的会议列表[/v1/meetings - GET]
     * <p>通过会议CODE查询会议详情/查询用户的会议列表 ① 通过会议CODE查询会议详情 企业 secret 鉴权用户可查询到任何该用户创建的企业下的会议，OAuth2.0 鉴权用户只能查询到通过 OAuth2.0 鉴权创建的会议。 支持企业管理员查询企业下的会议。 本接口的邀请参会成员限制调整至300人。 当会议为周期性会议时，主持人密钥每场会议固定，但单场会议只能获取一次。支持查询周期性会议的主持人密钥。 支持查询 MRA 当前所在会议信息。 若会议号被回收则无法通过 Code 查询，您可以通过会议 ID 查询到该会议。 ② 查询用户的会议列表 获取某指定用户的进行中或待开始的会议列表。企业 secret 鉴权用户可查询任何该企业该用户创建的有效会议，OAuth2.0 鉴权用户只能查询通过 OAuth2.0 鉴权创建的有效会议。<p/>
     * @param req ApiV1MeetingsGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingsGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingsGetResponse v1MeetingsGet(ApiV1MeetingsGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meetings")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'instanceid' is set
            if (req.getInstanceid() == null) {
                throw new IllegalArgumentException("'instanceid' is required and must be specified");
            }
            

            

            

            

            

            

            

            

            
            // path 参数
            // query 参数
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getUserid() != null) {
                apiReq.getQueryParams().set("userid", req.getUserid());
            }
            if (req.getInstanceid() != null) {
                apiReq.getQueryParams().set("instanceid", req.getInstanceid());
            }
            if (req.getMeetingCode() != null) {
                apiReq.getQueryParams().set("meeting_code", req.getMeetingCode());
            }
            if (req.getCursory() != null) {
                apiReq.getQueryParams().set("cursory", req.getCursory());
            }
            if (req.getPos() != null) {
                apiReq.getQueryParams().set("pos", req.getPos());
            }
            if (req.getIsShowAllSubMeetings() != null) {
                apiReq.getQueryParams().set("is_show_all_sub_meetings", req.getIsShowAllSubMeetings());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingsGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingsGet 查询用户的会议列表[/v1/meetings - GET]
    * <p>通过会议CODE查询会议详情/查询用户的会议列表 ① 通过会议CODE查询会议详情 企业 secret 鉴权用户可查询到任何该用户创建的企业下的会议，OAuth2.0 鉴权用户只能查询到通过 OAuth2.0 鉴权创建的会议。 支持企业管理员查询企业下的会议。 本接口的邀请参会成员限制调整至300人。 当会议为周期性会议时，主持人密钥每场会议固定，但单场会议只能获取一次。支持查询周期性会议的主持人密钥。 支持查询 MRA 当前所在会议信息。 若会议号被回收则无法通过 Code 查询，您可以通过会议 ID 查询到该会议。 ② 查询用户的会议列表 获取某指定用户的进行中或待开始的会议列表。企业 secret 鉴权用户可查询任何该企业该用户创建的有效会议，OAuth2.0 鉴权用户只能查询通过 OAuth2.0 鉴权创建的有效会议。<p/>
    * @param req ApiV1MeetingsGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingsGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingsGetResponse v1MeetingsGet(ApiV1MeetingsGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingsGet(req, null, builders);
    }
    /**
     * v1MeetingsMeetingIdCancelPost 取消会议[/v1/meetings/{meeting_id}/cancel - POST]
     * <p>取消用户创建的会议。用户只能取消自己创建的会议，且该会议是一个有效的会议。如果不是会议创建者或者无效会议号将会返回错误。 企业 secret 鉴权用户可取消任何该用户企业下创建的有效会议，OAuth2.0 鉴权用户只能取消通过 OAuth2.0 鉴权创建的有效会议。 当您想实时监测会议取消状况时，您可以通过订阅 [会议取消](https://cloud.tencent.com/document/product/1095/51616) 的事件，接收事件通知。<p/>
     * @param req ApiV1MeetingsMeetingIdCancelPostRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingsMeetingIdCancelPostResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingsMeetingIdCancelPostResponse v1MeetingsMeetingIdCancelPost(ApiV1MeetingsMeetingIdCancelPostRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meetings/{meeting_id}/cancel")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().post(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingsMeetingIdCancelPostResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingsMeetingIdCancelPost 取消会议[/v1/meetings/{meeting_id}/cancel - POST]
    * <p>取消用户创建的会议。用户只能取消自己创建的会议，且该会议是一个有效的会议。如果不是会议创建者或者无效会议号将会返回错误。 企业 secret 鉴权用户可取消任何该用户企业下创建的有效会议，OAuth2.0 鉴权用户只能取消通过 OAuth2.0 鉴权创建的有效会议。 当您想实时监测会议取消状况时，您可以通过订阅 [会议取消](https://cloud.tencent.com/document/product/1095/51616) 的事件，接收事件通知。<p/>
    * @param req ApiV1MeetingsMeetingIdCancelPostRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingsMeetingIdCancelPostResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingsMeetingIdCancelPostResponse v1MeetingsMeetingIdCancelPost(ApiV1MeetingsMeetingIdCancelPostRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingsMeetingIdCancelPost(req, null, builders);
    }
    /**
     * v1MeetingsMeetingIdCustomerShortUrlGet 获取用户专属参会链接[/v1/meetings/{meeting_id}/customer-short-url - GET]
     * <p>**描述**：  * 可以获取指定会议的所有专属参会链接及 &#x60;customer_data&#x60;。 * 该接口不支持个人会议号会议、网络研讨会（Webinar）。支持企业品牌化链接。 * 参会者腾讯会议客户端版本需大于等于 3.2.0。 * 暂不支持 OAuth 2.0 鉴权方式访问。<p/>
     * @param req ApiV1MeetingsMeetingIdCustomerShortUrlGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingsMeetingIdCustomerShortUrlGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingsMeetingIdCustomerShortUrlGetResponse v1MeetingsMeetingIdCustomerShortUrlGet(ApiV1MeetingsMeetingIdCustomerShortUrlGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meetings/{meeting_id}/customer-short-url")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingsMeetingIdCustomerShortUrlGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingsMeetingIdCustomerShortUrlGet 获取用户专属参会链接[/v1/meetings/{meeting_id}/customer-short-url - GET]
    * <p>**描述**：  * 可以获取指定会议的所有专属参会链接及 &#x60;customer_data&#x60;。 * 该接口不支持个人会议号会议、网络研讨会（Webinar）。支持企业品牌化链接。 * 参会者腾讯会议客户端版本需大于等于 3.2.0。 * 暂不支持 OAuth 2.0 鉴权方式访问。<p/>
    * @param req ApiV1MeetingsMeetingIdCustomerShortUrlGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingsMeetingIdCustomerShortUrlGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingsMeetingIdCustomerShortUrlGetResponse v1MeetingsMeetingIdCustomerShortUrlGet(ApiV1MeetingsMeetingIdCustomerShortUrlGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingsMeetingIdCustomerShortUrlGet(req, null, builders);
    }
    /**
     * v1MeetingsMeetingIdEnrollApprovalsGet 查询会议报名信息[/v1/meetings/{meeting_id}/enroll/approvals - GET]
     * <p>查询已报名观众数量和报名观众答题详情，仅会议创建者可查询。 企业 secret 鉴权用户可修改任何该企业该用户创建的有效会议，OAuth2.0 鉴权用户只能修改通过 OAuth2.0 鉴权创建的有效会议。 用户必须是注册用户，请求头部 X-TC-Registered 字段必须传入为1。<p/>
     * @param req ApiV1MeetingsMeetingIdEnrollApprovalsGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingsMeetingIdEnrollApprovalsGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingsMeetingIdEnrollApprovalsGetResponse v1MeetingsMeetingIdEnrollApprovalsGet(ApiV1MeetingsMeetingIdEnrollApprovalsGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meetings/{meeting_id}/enroll/approvals")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            

            // verify the required parameter 'instanceid' is set
            if (req.getInstanceid() == null) {
                throw new IllegalArgumentException("'instanceid' is required and must be specified");
            }
            

            // verify the required parameter 'page' is set
            if (req.getPage() == null) {
                throw new IllegalArgumentException("'page' is required and must be specified");
            }
            

            // verify the required parameter 'pageSize' is set
            if (req.getPageSize() == null) {
                throw new IllegalArgumentException("'pageSize' is required and must be specified");
            }
            

            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getInstanceid() != null) {
                apiReq.getQueryParams().set("instanceid", req.getInstanceid());
            }
            if (req.getPage() != null) {
                apiReq.getQueryParams().set("page", req.getPage());
            }
            if (req.getPageSize() != null) {
                apiReq.getQueryParams().set("page_size", req.getPageSize());
            }
            if (req.getStatus() != null) {
                apiReq.getQueryParams().set("status", req.getStatus());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingsMeetingIdEnrollApprovalsGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingsMeetingIdEnrollApprovalsGet 查询会议报名信息[/v1/meetings/{meeting_id}/enroll/approvals - GET]
    * <p>查询已报名观众数量和报名观众答题详情，仅会议创建者可查询。 企业 secret 鉴权用户可修改任何该企业该用户创建的有效会议，OAuth2.0 鉴权用户只能修改通过 OAuth2.0 鉴权创建的有效会议。 用户必须是注册用户，请求头部 X-TC-Registered 字段必须传入为1。<p/>
    * @param req ApiV1MeetingsMeetingIdEnrollApprovalsGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingsMeetingIdEnrollApprovalsGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingsMeetingIdEnrollApprovalsGetResponse v1MeetingsMeetingIdEnrollApprovalsGet(ApiV1MeetingsMeetingIdEnrollApprovalsGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingsMeetingIdEnrollApprovalsGet(req, null, builders);
    }
    /**
     * v1MeetingsMeetingIdEnrollApprovalsPut 审批会议报名信息[/v1/meetings/{meeting_id}/enroll/approvals - PUT]
     * <p>批量云会议的报名信息，仅会议创建者可审批。 企业 secret 鉴权用户可审批任何该企业该用户创建的有效会议，OAuth2.0 鉴权用户只能审批通过 OAuth2.0 鉴权创建的有效会议。 用户必须是注册用户，请求头部 X-TC-Registered 字段必须传入为1。<p/>
     * @param req ApiV1MeetingsMeetingIdEnrollApprovalsPutRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingsMeetingIdEnrollApprovalsPutResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingsMeetingIdEnrollApprovalsPutResponse v1MeetingsMeetingIdEnrollApprovalsPut(ApiV1MeetingsMeetingIdEnrollApprovalsPutRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meetings/{meeting_id}/enroll/approvals")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().put(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingsMeetingIdEnrollApprovalsPutResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingsMeetingIdEnrollApprovalsPut 审批会议报名信息[/v1/meetings/{meeting_id}/enroll/approvals - PUT]
    * <p>批量云会议的报名信息，仅会议创建者可审批。 企业 secret 鉴权用户可审批任何该企业该用户创建的有效会议，OAuth2.0 鉴权用户只能审批通过 OAuth2.0 鉴权创建的有效会议。 用户必须是注册用户，请求头部 X-TC-Registered 字段必须传入为1。<p/>
    * @param req ApiV1MeetingsMeetingIdEnrollApprovalsPutRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingsMeetingIdEnrollApprovalsPutResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingsMeetingIdEnrollApprovalsPutResponse v1MeetingsMeetingIdEnrollApprovalsPut(ApiV1MeetingsMeetingIdEnrollApprovalsPutRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingsMeetingIdEnrollApprovalsPut(req, null, builders);
    }
    /**
     * v1MeetingsMeetingIdEnrollConfigGet 查询会议报名配置[/v1/meetings/{meeting_id}/enroll/config - GET]
     * <p>查询云会议的报名配置和报名问题，仅会议创建者可查询。会议未开启报名时会返回未开启报名错误。 企业 secret 鉴权用户可查询任何该企业该用户创建的有效会议，OAuth2.0 鉴权用户只能查询通过 OAuth2.0 鉴权创建的有效会议。 用户必须是注册用户，请求头部 X-TC-Registered 字段必须传入为1。<p/>
     * @param req ApiV1MeetingsMeetingIdEnrollConfigGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingsMeetingIdEnrollConfigGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingsMeetingIdEnrollConfigGetResponse v1MeetingsMeetingIdEnrollConfigGet(ApiV1MeetingsMeetingIdEnrollConfigGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meetings/{meeting_id}/enroll/config")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            

            // verify the required parameter 'instanceid' is set
            if (req.getInstanceid() == null) {
                throw new IllegalArgumentException("'instanceid' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getInstanceid() != null) {
                apiReq.getQueryParams().set("instanceid", req.getInstanceid());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingsMeetingIdEnrollConfigGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingsMeetingIdEnrollConfigGet 查询会议报名配置[/v1/meetings/{meeting_id}/enroll/config - GET]
    * <p>查询云会议的报名配置和报名问题，仅会议创建者可查询。会议未开启报名时会返回未开启报名错误。 企业 secret 鉴权用户可查询任何该企业该用户创建的有效会议，OAuth2.0 鉴权用户只能查询通过 OAuth2.0 鉴权创建的有效会议。 用户必须是注册用户，请求头部 X-TC-Registered 字段必须传入为1。<p/>
    * @param req ApiV1MeetingsMeetingIdEnrollConfigGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingsMeetingIdEnrollConfigGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingsMeetingIdEnrollConfigGetResponse v1MeetingsMeetingIdEnrollConfigGet(ApiV1MeetingsMeetingIdEnrollConfigGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingsMeetingIdEnrollConfigGet(req, null, builders);
    }
    /**
     * v1MeetingsMeetingIdEnrollConfigPut 修改会议报名配置[/v1/meetings/{meeting_id}/enroll/config - PUT]
     * <p>修改云会议的报名配置和报名问题，仅会议创建者可修改，且需要会议已开启报名。 企业 secret 鉴权用户可修改任何该企业该用户创建的有效会议，OAuth2.0 鉴权用户只能修改通过 OAuth2.0 鉴权创建的有效会议。 用户必须是注册用户，请求头部 X-TC-Registered 字段必须传入为1。<p/>
     * @param req ApiV1MeetingsMeetingIdEnrollConfigPutRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingsMeetingIdEnrollConfigPutResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingsMeetingIdEnrollConfigPutResponse v1MeetingsMeetingIdEnrollConfigPut(ApiV1MeetingsMeetingIdEnrollConfigPutRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meetings/{meeting_id}/enroll/config")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().put(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingsMeetingIdEnrollConfigPutResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingsMeetingIdEnrollConfigPut 修改会议报名配置[/v1/meetings/{meeting_id}/enroll/config - PUT]
    * <p>修改云会议的报名配置和报名问题，仅会议创建者可修改，且需要会议已开启报名。 企业 secret 鉴权用户可修改任何该企业该用户创建的有效会议，OAuth2.0 鉴权用户只能修改通过 OAuth2.0 鉴权创建的有效会议。 用户必须是注册用户，请求头部 X-TC-Registered 字段必须传入为1。<p/>
    * @param req ApiV1MeetingsMeetingIdEnrollConfigPutRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingsMeetingIdEnrollConfigPutResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingsMeetingIdEnrollConfigPutResponse v1MeetingsMeetingIdEnrollConfigPut(ApiV1MeetingsMeetingIdEnrollConfigPutRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingsMeetingIdEnrollConfigPut(req, null, builders);
    }
    /**
     * v1MeetingsMeetingIdEnrollIdsPost 查询会议成员报名 ID[/v1/meetings/{meeting_id}/enroll/ids - POST]
     * <p>描述： 支持查询会议中已报名成员的报名 ID，仅会议创建者可查询。<p/>
     * @param req ApiV1MeetingsMeetingIdEnrollIdsPostRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingsMeetingIdEnrollIdsPostResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingsMeetingIdEnrollIdsPostResponse v1MeetingsMeetingIdEnrollIdsPost(ApiV1MeetingsMeetingIdEnrollIdsPostRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meetings/{meeting_id}/enroll/ids")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().post(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingsMeetingIdEnrollIdsPostResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingsMeetingIdEnrollIdsPost 查询会议成员报名 ID[/v1/meetings/{meeting_id}/enroll/ids - POST]
    * <p>描述： 支持查询会议中已报名成员的报名 ID，仅会议创建者可查询。<p/>
    * @param req ApiV1MeetingsMeetingIdEnrollIdsPostRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingsMeetingIdEnrollIdsPostResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingsMeetingIdEnrollIdsPostResponse v1MeetingsMeetingIdEnrollIdsPost(ApiV1MeetingsMeetingIdEnrollIdsPostRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingsMeetingIdEnrollIdsPost(req, null, builders);
    }
    /**
     * v1MeetingsMeetingIdEnrollImportPost 导入会议报名信息[/v1/meetings/{meeting_id}/enroll/import - POST]
     * <p>指定会议中导入报名信息。  企业 secret 鉴权用户可通过同企业下用户 userid 和手机号导入报名信息，OAuth2.0 鉴权用户能通过用户 open_id，与应用同企业下的 userid 以及手机号导入报名信息。 用户必须是注册用户，请求头部 X-TC-Registered 字段必须传入为1。 商业版单场会议导入上限1000条，企业版单场会议导入上限4000条。如需提升，请联系我们。<p/>
     * @param req ApiV1MeetingsMeetingIdEnrollImportPostRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingsMeetingIdEnrollImportPostResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingsMeetingIdEnrollImportPostResponse v1MeetingsMeetingIdEnrollImportPost(ApiV1MeetingsMeetingIdEnrollImportPostRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meetings/{meeting_id}/enroll/import")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().post(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingsMeetingIdEnrollImportPostResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingsMeetingIdEnrollImportPost 导入会议报名信息[/v1/meetings/{meeting_id}/enroll/import - POST]
    * <p>指定会议中导入报名信息。  企业 secret 鉴权用户可通过同企业下用户 userid 和手机号导入报名信息，OAuth2.0 鉴权用户能通过用户 open_id，与应用同企业下的 userid 以及手机号导入报名信息。 用户必须是注册用户，请求头部 X-TC-Registered 字段必须传入为1。 商业版单场会议导入上限1000条，企业版单场会议导入上限4000条。如需提升，请联系我们。<p/>
    * @param req ApiV1MeetingsMeetingIdEnrollImportPostRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingsMeetingIdEnrollImportPostResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingsMeetingIdEnrollImportPostResponse v1MeetingsMeetingIdEnrollImportPost(ApiV1MeetingsMeetingIdEnrollImportPostRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingsMeetingIdEnrollImportPost(req, null, builders);
    }
    /**
     * v1MeetingsMeetingIdEnrollUnregistrationDelete 删除会议报名信息[/v1/meetings/{meeting_id}/enroll/unregistration - DELETE]
     * <p>描述： 删除指定会议的报名信息，支持删除用户手动报名的信息和导入的报名信息。 企业 secret 鉴权用户可删除该用户企业会议下的报名信息，OAuth2.0 鉴权用户只能删除通过 OAuth2.0 鉴权创建的有效会议的报名信息。 用户必须是注册用户，请求头部 X-TC-Registered 字段必须传入为1。<p/>
     * @param req ApiV1MeetingsMeetingIdEnrollUnregistrationDeleteRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingsMeetingIdEnrollUnregistrationDeleteResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingsMeetingIdEnrollUnregistrationDeleteResponse v1MeetingsMeetingIdEnrollUnregistrationDelete(ApiV1MeetingsMeetingIdEnrollUnregistrationDeleteRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meetings/{meeting_id}/enroll/unregistration")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().delete(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingsMeetingIdEnrollUnregistrationDeleteResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingsMeetingIdEnrollUnregistrationDelete 删除会议报名信息[/v1/meetings/{meeting_id}/enroll/unregistration - DELETE]
    * <p>描述： 删除指定会议的报名信息，支持删除用户手动报名的信息和导入的报名信息。 企业 secret 鉴权用户可删除该用户企业会议下的报名信息，OAuth2.0 鉴权用户只能删除通过 OAuth2.0 鉴权创建的有效会议的报名信息。 用户必须是注册用户，请求头部 X-TC-Registered 字段必须传入为1。<p/>
    * @param req ApiV1MeetingsMeetingIdEnrollUnregistrationDeleteRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingsMeetingIdEnrollUnregistrationDeleteResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingsMeetingIdEnrollUnregistrationDeleteResponse v1MeetingsMeetingIdEnrollUnregistrationDelete(ApiV1MeetingsMeetingIdEnrollUnregistrationDeleteRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingsMeetingIdEnrollUnregistrationDelete(req, null, builders);
    }
    /**
     * v1MeetingsMeetingIdGet 查询会议[/v1/meetings/{meeting_id} - GET]
     * <p>通过会议 ID 查询会议详情。 企业 secret 鉴权用户可查询到任何该用户创建的企业下的会议，OAuth2.0 鉴权用户只能查询到通过 OAuth2.0 鉴权创建的会议。 本接口的邀请参会成员限制调整至300人。 当会议为周期性会议时，主持人密钥每场会议固定，但单场会议只能获取一次。支持查询周期性会议的主持人密钥。 支持查询 MRA 当前所在会议信息。<p/>
     * @param req ApiV1MeetingsMeetingIdGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingsMeetingIdGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingsMeetingIdGetResponse v1MeetingsMeetingIdGet(ApiV1MeetingsMeetingIdGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meetings/{meeting_id}")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            // verify the required parameter 'instanceid' is set
            if (req.getInstanceid() == null) {
                throw new IllegalArgumentException("'instanceid' is required and must be specified");
            }
            

            

            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getInstanceid() != null) {
                apiReq.getQueryParams().set("instanceid", req.getInstanceid());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingsMeetingIdGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingsMeetingIdGet 查询会议[/v1/meetings/{meeting_id} - GET]
    * <p>通过会议 ID 查询会议详情。 企业 secret 鉴权用户可查询到任何该用户创建的企业下的会议，OAuth2.0 鉴权用户只能查询到通过 OAuth2.0 鉴权创建的会议。 本接口的邀请参会成员限制调整至300人。 当会议为周期性会议时，主持人密钥每场会议固定，但单场会议只能获取一次。支持查询周期性会议的主持人密钥。 支持查询 MRA 当前所在会议信息。<p/>
    * @param req ApiV1MeetingsMeetingIdGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingsMeetingIdGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingsMeetingIdGetResponse v1MeetingsMeetingIdGet(ApiV1MeetingsMeetingIdGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingsMeetingIdGet(req, null, builders);
    }
    /**
     * v1MeetingsMeetingIdInviteesGet 获取会议受邀成员列表[/v1/meetings/{meeting_id}/invitees - GET]
     * <p>根据会议ID获取受邀成员列表，支持分页获取，只有会议的创建者才有权限获取。<p/>
     * @param req ApiV1MeetingsMeetingIdInviteesGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingsMeetingIdInviteesGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingsMeetingIdInviteesGetResponse v1MeetingsMeetingIdInviteesGet(ApiV1MeetingsMeetingIdInviteesGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meetings/{meeting_id}/invitees")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            // verify the required parameter 'userid' is set
            if (req.getUserid() == null) {
                throw new IllegalArgumentException("'userid' is required and must be specified");
            }
            

            // verify the required parameter 'instanceid' is set
            if (req.getInstanceid() == null) {
                throw new IllegalArgumentException("'instanceid' is required and must be specified");
            }
            

            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            if (req.getUserid() != null) {
                apiReq.getQueryParams().set("userid", req.getUserid());
            }
            if (req.getInstanceid() != null) {
                apiReq.getQueryParams().set("instanceid", req.getInstanceid());
            }
            if (req.getPos() != null) {
                apiReq.getQueryParams().set("pos", req.getPos());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingsMeetingIdInviteesGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingsMeetingIdInviteesGet 获取会议受邀成员列表[/v1/meetings/{meeting_id}/invitees - GET]
    * <p>根据会议ID获取受邀成员列表，支持分页获取，只有会议的创建者才有权限获取。<p/>
    * @param req ApiV1MeetingsMeetingIdInviteesGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingsMeetingIdInviteesGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingsMeetingIdInviteesGetResponse v1MeetingsMeetingIdInviteesGet(ApiV1MeetingsMeetingIdInviteesGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingsMeetingIdInviteesGet(req, null, builders);
    }
    /**
     * v1MeetingsMeetingIdInviteesPut 设置会议邀请成员[/v1/meetings/{meeting_id}/invitees - PUT]
     * <p>根据会议ID设置邀请成员，只有会议的创建者才有权限设置。 最多可以设置2000名邀请者。 注：本接口为覆盖式设置。<p/>
     * @param req ApiV1MeetingsMeetingIdInviteesPutRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingsMeetingIdInviteesPutResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingsMeetingIdInviteesPutResponse v1MeetingsMeetingIdInviteesPut(ApiV1MeetingsMeetingIdInviteesPutRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meetings/{meeting_id}/invitees")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().put(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingsMeetingIdInviteesPutResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingsMeetingIdInviteesPut 设置会议邀请成员[/v1/meetings/{meeting_id}/invitees - PUT]
    * <p>根据会议ID设置邀请成员，只有会议的创建者才有权限设置。 最多可以设置2000名邀请者。 注：本接口为覆盖式设置。<p/>
    * @param req ApiV1MeetingsMeetingIdInviteesPutRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingsMeetingIdInviteesPutResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingsMeetingIdInviteesPutResponse v1MeetingsMeetingIdInviteesPut(ApiV1MeetingsMeetingIdInviteesPutRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingsMeetingIdInviteesPut(req, null, builders);
    }
    /**
     * v1MeetingsMeetingIdParticipantsGet 获取参会成员列表[/v1/meetings/{meetingId}/participants - GET]
     * <p>会议创建者和企业管理员可以查询参会成员的列表，其他用户的调用会被拒绝。  支持查询网络研讨会参会成员列表。 如果会议还未开始，调用此接口查询会返回空列表。 企业 secret 鉴权用户（会议创建者）可获取任何该企业该用户创建的有效会议中的参会成员，企业 secret 鉴权用户（企业超级管理员）可获取任何该企业下创建的有效会议中的参会成员，OAuth2.0 鉴权用户（会议创建者）只能获取用户通过 OAuth2.0 鉴权创建的有效会议中的参会成员。 当您需要实时监测参会成员入会状态或退会状态时，您可以通过订阅 [用户入会](https://cloud.tencent.com/document/product/1095/51620)和 [用户离会](https://cloud.tencent.com/document/product/1095/51622) 的事件，接收事件通知。<p/>
     * @param req ApiV1MeetingsMeetingIdParticipantsGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingsMeetingIdParticipantsGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingsMeetingIdParticipantsGetResponse v1MeetingsMeetingIdParticipantsGet(ApiV1MeetingsMeetingIdParticipantsGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meetings/{meetingId}/participants")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            

            

            

            

            

            

            

            

            
            // path 参数
            apiReq.getPathParams().set("meetingId", req.getMeetingId());
            // query 参数
            if (req.getSubMeetingId() != null) {
                apiReq.getQueryParams().set("sub_meeting_id", req.getSubMeetingId());
            }
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getUserid() != null) {
                apiReq.getQueryParams().set("userid", req.getUserid());
            }
            if (req.getPos() != null) {
                apiReq.getQueryParams().set("pos", req.getPos());
            }
            if (req.getSize() != null) {
                apiReq.getQueryParams().set("size", req.getSize());
            }
            if (req.getStartTime() != null) {
                apiReq.getQueryParams().set("start_time", req.getStartTime());
            }
            if (req.getEndTime() != null) {
                apiReq.getQueryParams().set("end_time", req.getEndTime());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingsMeetingIdParticipantsGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingsMeetingIdParticipantsGet 获取参会成员列表[/v1/meetings/{meetingId}/participants - GET]
    * <p>会议创建者和企业管理员可以查询参会成员的列表，其他用户的调用会被拒绝。  支持查询网络研讨会参会成员列表。 如果会议还未开始，调用此接口查询会返回空列表。 企业 secret 鉴权用户（会议创建者）可获取任何该企业该用户创建的有效会议中的参会成员，企业 secret 鉴权用户（企业超级管理员）可获取任何该企业下创建的有效会议中的参会成员，OAuth2.0 鉴权用户（会议创建者）只能获取用户通过 OAuth2.0 鉴权创建的有效会议中的参会成员。 当您需要实时监测参会成员入会状态或退会状态时，您可以通过订阅 [用户入会](https://cloud.tencent.com/document/product/1095/51620)和 [用户离会](https://cloud.tencent.com/document/product/1095/51622) 的事件，接收事件通知。<p/>
    * @param req ApiV1MeetingsMeetingIdParticipantsGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingsMeetingIdParticipantsGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingsMeetingIdParticipantsGetResponse v1MeetingsMeetingIdParticipantsGet(ApiV1MeetingsMeetingIdParticipantsGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingsMeetingIdParticipantsGet(req, null, builders);
    }
    /**
     * v1MeetingsMeetingIdPut 修改会议[/v1/meetings/{meeting_id} - PUT]
     * <p>修改某指定会议的会议信息。  企业 secret 鉴权用户可修改任何该企业该用户创建的有效会议，OAuth2.0 鉴权用户只能修改通过 OAuth2.0 鉴权创建的有效会议。 当您想实时监测会议修改状况时，您可以通过订阅 [会议更新](https://cloud.tencent.com/document/product/1095/51615) 的事件，接收事件通知。 本接口的邀请参会成员限制调整至300人。 当会议为周期性会议时，主持人密钥每场会议固定，但单场会议只能获取一次。支持修改周期性会议的主持人密钥。<p/>
     * @param req ApiV1MeetingsMeetingIdPutRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingsMeetingIdPutResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingsMeetingIdPutResponse v1MeetingsMeetingIdPut(ApiV1MeetingsMeetingIdPutRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meetings/{meeting_id}")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().put(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingsMeetingIdPutResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingsMeetingIdPut 修改会议[/v1/meetings/{meeting_id} - PUT]
    * <p>修改某指定会议的会议信息。  企业 secret 鉴权用户可修改任何该企业该用户创建的有效会议，OAuth2.0 鉴权用户只能修改通过 OAuth2.0 鉴权创建的有效会议。 当您想实时监测会议修改状况时，您可以通过订阅 [会议更新](https://cloud.tencent.com/document/product/1095/51615) 的事件，接收事件通知。 本接口的邀请参会成员限制调整至300人。 当会议为周期性会议时，主持人密钥每场会议固定，但单场会议只能获取一次。支持修改周期性会议的主持人密钥。<p/>
    * @param req ApiV1MeetingsMeetingIdPutRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingsMeetingIdPutResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingsMeetingIdPutResponse v1MeetingsMeetingIdPut(ApiV1MeetingsMeetingIdPutRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingsMeetingIdPut(req, null, builders);
    }
    /**
     * v1MeetingsMeetingIdQosGet 获取会议实时质量检测数据[/v1/meetings/{meeting_id}/qos - GET]
     * <p>拥有企业“会议列表--会控”权限的成员，能够获取实时会议质量检测数据。 支持云会议和Webinar会议的数据。会议状态为进行中。<p/>
     * @param req ApiV1MeetingsMeetingIdQosGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingsMeetingIdQosGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingsMeetingIdQosGetResponse v1MeetingsMeetingIdQosGet(ApiV1MeetingsMeetingIdQosGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meetings/{meeting_id}/qos")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            

            

            

            

            

            

            

            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getPageSize() != null) {
                apiReq.getQueryParams().set("page_size", req.getPageSize());
            }
            if (req.getPage() != null) {
                apiReq.getQueryParams().set("page", req.getPage());
            }
            if (req.getToOperatorId() != null) {
                apiReq.getQueryParams().set("to_operator_id", req.getToOperatorId());
            }
            if (req.getToOperatorIdType() != null) {
                apiReq.getQueryParams().set("to_operator_id_type", req.getToOperatorIdType());
            }
            if (req.getKey() != null) {
                apiReq.getQueryParams().set("key", req.getKey());
            }
            if (req.getMinValue() != null) {
                apiReq.getQueryParams().set("min_value", req.getMinValue());
            }
            if (req.getMaxValue() != null) {
                apiReq.getQueryParams().set("max_value", req.getMaxValue());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingsMeetingIdQosGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingsMeetingIdQosGet 获取会议实时质量检测数据[/v1/meetings/{meeting_id}/qos - GET]
    * <p>拥有企业“会议列表--会控”权限的成员，能够获取实时会议质量检测数据。 支持云会议和Webinar会议的数据。会议状态为进行中。<p/>
    * @param req ApiV1MeetingsMeetingIdQosGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingsMeetingIdQosGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingsMeetingIdQosGetResponse v1MeetingsMeetingIdQosGet(ApiV1MeetingsMeetingIdQosGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingsMeetingIdQosGet(req, null, builders);
    }
    /**
     * v1MeetingsMeetingIdQualityGet 查询会议健康度[/v1/meetings/{meeting_id}/quality - GET]
     * <p>查询会议及参会成员的健康度，付费开通该服务的企业管理员、超管可以查询，与是否为会议创建者/主持人/联席主持人无关。 鉴权方式：支持 JWT 鉴权 和 Oauth 鉴权<p/>
     * @param req ApiV1MeetingsMeetingIdQualityGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingsMeetingIdQualityGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingsMeetingIdQualityGetResponse v1MeetingsMeetingIdQualityGet(ApiV1MeetingsMeetingIdQualityGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meetings/{meeting_id}/quality")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            

            // verify the required parameter 'pageSize' is set
            if (req.getPageSize() == null) {
                throw new IllegalArgumentException("'pageSize' is required and must be specified");
            }
            

            // verify the required parameter 'page' is set
            if (req.getPage() == null) {
                throw new IllegalArgumentException("'page' is required and must be specified");
            }
            

            // verify the required parameter 'startTime' is set
            if (req.getStartTime() == null) {
                throw new IllegalArgumentException("'startTime' is required and must be specified");
            }
            

            

            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getInstanceid() != null) {
                apiReq.getQueryParams().set("instanceid", req.getInstanceid());
            }
            if (req.getSubMeetingId() != null) {
                apiReq.getQueryParams().set("sub_meeting_id", req.getSubMeetingId());
            }
            if (req.getPageSize() != null) {
                apiReq.getQueryParams().set("page_size", req.getPageSize());
            }
            if (req.getPage() != null) {
                apiReq.getQueryParams().set("page", req.getPage());
            }
            if (req.getStartTime() != null) {
                apiReq.getQueryParams().set("start_time", req.getStartTime());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingsMeetingIdQualityGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingsMeetingIdQualityGet 查询会议健康度[/v1/meetings/{meeting_id}/quality - GET]
    * <p>查询会议及参会成员的健康度，付费开通该服务的企业管理员、超管可以查询，与是否为会议创建者/主持人/联席主持人无关。 鉴权方式：支持 JWT 鉴权 和 Oauth 鉴权<p/>
    * @param req ApiV1MeetingsMeetingIdQualityGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingsMeetingIdQualityGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingsMeetingIdQualityGetResponse v1MeetingsMeetingIdQualityGet(ApiV1MeetingsMeetingIdQualityGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingsMeetingIdQualityGet(req, null, builders);
    }
    /**
     * v1MeetingsMeetingIdRealTimeParticipantsGet 查询实时会中成员列表[/v1/meetings/{meeting_id}/real-time-participants - GET]
     * <p>查询当前会中成员列表，仅包括会中的成员，如果已离会，则不展示 企业超级管理员、会议创建者、会议主持人、会议联席主持人可以查询该数据。<p/>
     * @param req ApiV1MeetingsMeetingIdRealTimeParticipantsGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingsMeetingIdRealTimeParticipantsGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingsMeetingIdRealTimeParticipantsGetResponse v1MeetingsMeetingIdRealTimeParticipantsGet(ApiV1MeetingsMeetingIdRealTimeParticipantsGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meetings/{meeting_id}/real-time-participants")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            

            // verify the required parameter 'page' is set
            if (req.getPage() == null) {
                throw new IllegalArgumentException("'page' is required and must be specified");
            }
            

            // verify the required parameter 'pageSize' is set
            if (req.getPageSize() == null) {
                throw new IllegalArgumentException("'pageSize' is required and must be specified");
            }
            

            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            if (req.getSubMeetingId() != null) {
                apiReq.getQueryParams().set("sub_meeting_id", req.getSubMeetingId());
            }
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getPage() != null) {
                apiReq.getQueryParams().set("page", req.getPage());
            }
            if (req.getPageSize() != null) {
                apiReq.getQueryParams().set("page_size", req.getPageSize());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingsMeetingIdRealTimeParticipantsGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingsMeetingIdRealTimeParticipantsGet 查询实时会中成员列表[/v1/meetings/{meeting_id}/real-time-participants - GET]
    * <p>查询当前会中成员列表，仅包括会中的成员，如果已离会，则不展示 企业超级管理员、会议创建者、会议主持人、会议联席主持人可以查询该数据。<p/>
    * @param req ApiV1MeetingsMeetingIdRealTimeParticipantsGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingsMeetingIdRealTimeParticipantsGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingsMeetingIdRealTimeParticipantsGetResponse v1MeetingsMeetingIdRealTimeParticipantsGet(ApiV1MeetingsMeetingIdRealTimeParticipantsGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingsMeetingIdRealTimeParticipantsGet(req, null, builders);
    }
    /**
     * v1MeetingsMeetingIdVirtualBackgroundPost 设置会议统一虚拟背景[/v1/meetings/{meeting_id}/virtual-background - POST]
     * <p>非进行中非已结束的会议，会议创建者可以设置统一虚拟背景，并设置生效范围。如果企业未开启虚拟背景开关，则该企业下会议不可进行该设置。异步方式上传。支持云会议和Webinar会议，其中Webinar会议设置为对嘉宾生效，且不能指定成员<p/>
     * @param req ApiV1MeetingsMeetingIdVirtualBackgroundPostRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingsMeetingIdVirtualBackgroundPostResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingsMeetingIdVirtualBackgroundPostResponse v1MeetingsMeetingIdVirtualBackgroundPost(ApiV1MeetingsMeetingIdVirtualBackgroundPostRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meetings/{meeting_id}/virtual-background")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().post(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingsMeetingIdVirtualBackgroundPostResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingsMeetingIdVirtualBackgroundPost 设置会议统一虚拟背景[/v1/meetings/{meeting_id}/virtual-background - POST]
    * <p>非进行中非已结束的会议，会议创建者可以设置统一虚拟背景，并设置生效范围。如果企业未开启虚拟背景开关，则该企业下会议不可进行该设置。异步方式上传。支持云会议和Webinar会议，其中Webinar会议设置为对嘉宾生效，且不能指定成员<p/>
    * @param req ApiV1MeetingsMeetingIdVirtualBackgroundPostRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingsMeetingIdVirtualBackgroundPostResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingsMeetingIdVirtualBackgroundPostResponse v1MeetingsMeetingIdVirtualBackgroundPost(ApiV1MeetingsMeetingIdVirtualBackgroundPostRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingsMeetingIdVirtualBackgroundPost(req, null, builders);
    }
    /**
     * v1MeetingsMeetingIdWaitingRoomParticipantsGet 获取实时等候室成员列表[/v1/meetings/{meeting_id}/waiting-room-participants - GET]
     * <p>**描述**：  * 会议拥有者获取某指定会议的等候室成员列表，需开启等候室且为“会议进行中”状态。 * 只有会议的拥有者即创建者可以查询等候室成员列表，其他用户的调用会被拒绝。如果会议非进行中，调用此接口查询会返回空列表。 * 企业 secret 鉴权用户（会议创建者）可获取任何该企业该用户创建的会议中的等候室成员列表，OAuth2.0 鉴权用户（会议创建者）只能获取用户通过 OAuth2.0 鉴权创建的会议中的等候室成员列表。 * 此接口暂不支持 MRA 设备作为被操作者的情况。<p/>
     * @param req ApiV1MeetingsMeetingIdWaitingRoomParticipantsGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingsMeetingIdWaitingRoomParticipantsGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingsMeetingIdWaitingRoomParticipantsGetResponse v1MeetingsMeetingIdWaitingRoomParticipantsGet(ApiV1MeetingsMeetingIdWaitingRoomParticipantsGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meetings/{meeting_id}/waiting-room-participants")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            // verify the required parameter 'userid' is set
            if (req.getUserid() == null) {
                throw new IllegalArgumentException("'userid' is required and must be specified");
            }
            

            

            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            if (req.getUserid() != null) {
                apiReq.getQueryParams().set("userid", req.getUserid());
            }
            if (req.getPageSize() != null) {
                apiReq.getQueryParams().set("page_size", req.getPageSize());
            }
            if (req.getPage() != null) {
                apiReq.getQueryParams().set("page", req.getPage());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingsMeetingIdWaitingRoomParticipantsGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingsMeetingIdWaitingRoomParticipantsGet 获取实时等候室成员列表[/v1/meetings/{meeting_id}/waiting-room-participants - GET]
    * <p>**描述**：  * 会议拥有者获取某指定会议的等候室成员列表，需开启等候室且为“会议进行中”状态。 * 只有会议的拥有者即创建者可以查询等候室成员列表，其他用户的调用会被拒绝。如果会议非进行中，调用此接口查询会返回空列表。 * 企业 secret 鉴权用户（会议创建者）可获取任何该企业该用户创建的会议中的等候室成员列表，OAuth2.0 鉴权用户（会议创建者）只能获取用户通过 OAuth2.0 鉴权创建的会议中的等候室成员列表。 * 此接口暂不支持 MRA 设备作为被操作者的情况。<p/>
    * @param req ApiV1MeetingsMeetingIdWaitingRoomParticipantsGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingsMeetingIdWaitingRoomParticipantsGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingsMeetingIdWaitingRoomParticipantsGetResponse v1MeetingsMeetingIdWaitingRoomParticipantsGet(ApiV1MeetingsMeetingIdWaitingRoomParticipantsGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingsMeetingIdWaitingRoomParticipantsGet(req, null, builders);
    }
    /**
     * v1MeetingsPost 创建会议[/v1/meetings - POST]
     * <p>快速创建或预定一个会议。  企业 secret 鉴权用户可创建该用户所属企业下的会议，OAuth2.0 鉴权用户只能创建该企业下 OAuth2.0 应用的会议。 用户必须是注册用户，请求头部 X-TC-Registered 字段必须传入为1。 当您想实时监测会议创建状况时，您可以通过订阅 [会议创建](https://cloud.tencent.com/document/product/1095/51614) 的事件，接收事件通知。 本接口的邀请参会成员限制调整至300人。 当会议为周期性会议时，主持人密钥每场会议固定，但单场会议只能获取一次。支持创建周期性会议的主持人密钥。<p/>
     * @param req ApiV1MeetingsPostRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingsPostResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingsPostResponse v1MeetingsPost(ApiV1MeetingsPostRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meetings")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            
            // path 参数
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().post(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingsPostResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingsPost 创建会议[/v1/meetings - POST]
    * <p>快速创建或预定一个会议。  企业 secret 鉴权用户可创建该用户所属企业下的会议，OAuth2.0 鉴权用户只能创建该企业下 OAuth2.0 应用的会议。 用户必须是注册用户，请求头部 X-TC-Registered 字段必须传入为1。 当您想实时监测会议创建状况时，您可以通过订阅 [会议创建](https://cloud.tencent.com/document/product/1095/51614) 的事件，接收事件通知。 本接口的邀请参会成员限制调整至300人。 当会议为周期性会议时，主持人密钥每场会议固定，但单场会议只能获取一次。支持创建周期性会议的主持人密钥。<p/>
    * @param req ApiV1MeetingsPostRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingsPostResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingsPostResponse v1MeetingsPost(ApiV1MeetingsPostRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingsPost(req, null, builders);
    }
    /**
     * v1MeetingsQueryMeetingidForDevicePost 查询用户设备是否入会[/v1/meetings/query/meetingid-for-device - POST]
     * <p>查询用户设备是否入会接口，用来查询本企业用户在当前时间是否有设备进入指定的会议中。 不支持OAuth2.0鉴权方式访问。<p/>
     * @param req ApiV1MeetingsQueryMeetingidForDevicePostRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingsQueryMeetingidForDevicePostResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingsQueryMeetingidForDevicePostResponse v1MeetingsQueryMeetingidForDevicePost(ApiV1MeetingsQueryMeetingidForDevicePostRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meetings/query/meetingid-for-device")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            
            // path 参数
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().post(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingsQueryMeetingidForDevicePostResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingsQueryMeetingidForDevicePost 查询用户设备是否入会[/v1/meetings/query/meetingid-for-device - POST]
    * <p>查询用户设备是否入会接口，用来查询本企业用户在当前时间是否有设备进入指定的会议中。 不支持OAuth2.0鉴权方式访问。<p/>
    * @param req ApiV1MeetingsQueryMeetingidForDevicePostRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingsQueryMeetingidForDevicePostResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingsQueryMeetingidForDevicePostResponse v1MeetingsQueryMeetingidForDevicePost(ApiV1MeetingsQueryMeetingidForDevicePostRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingsQueryMeetingidForDevicePost(req, null, builders);
    }
    /**
     * v1PmiMeetingsGet 查询个人会议号会议列表[/v1/pmi-meetings - GET]
     * <p>查询个人会议号（PMI）会议的会议列表（待开始、进行中、已结束），目前暂不支持 OAuth2.0 鉴权访问。<p/>
     * @param req ApiV1PmiMeetingsGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1PmiMeetingsGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1PmiMeetingsGetResponse v1PmiMeetingsGet(ApiV1PmiMeetingsGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/pmi-meetings")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            

            // verify the required parameter 'instanceid' is set
            if (req.getInstanceid() == null) {
                throw new IllegalArgumentException("'instanceid' is required and must be specified");
            }
            

            

            

            

            

            
            // path 参数
            // query 参数
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getInstanceid() != null) {
                apiReq.getQueryParams().set("instanceid", req.getInstanceid());
            }
            if (req.getStartTime() != null) {
                apiReq.getQueryParams().set("start_time", req.getStartTime());
            }
            if (req.getEndTime() != null) {
                apiReq.getQueryParams().set("end_time", req.getEndTime());
            }
            if (req.getPage() != null) {
                apiReq.getQueryParams().set("page", req.getPage());
            }
            if (req.getPageSize() != null) {
                apiReq.getQueryParams().set("page_size", req.getPageSize());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1PmiMeetingsGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1PmiMeetingsGet 查询个人会议号会议列表[/v1/pmi-meetings - GET]
    * <p>查询个人会议号（PMI）会议的会议列表（待开始、进行中、已结束），目前暂不支持 OAuth2.0 鉴权访问。<p/>
    * @param req ApiV1PmiMeetingsGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1PmiMeetingsGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1PmiMeetingsGetResponse v1PmiMeetingsGet(ApiV1PmiMeetingsGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1PmiMeetingsGet(req, null, builders);
    }
}

