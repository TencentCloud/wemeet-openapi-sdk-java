/*
 * 腾讯会议OpenAPI
 * SAAS版RESTFUL风格API
 *
 * The version of the OpenAPI document: v1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.tencentcloudapi.wemeet.service.meeting_room.model;

import java.util.*;

import com.fasterxml.jackson.annotation.*;

/**
 * V1MeetingsMeetingIdBookRoomsPostRequest
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
public class V1MeetingsMeetingIdBookRoomsPostRequest {
    @JsonProperty(value = "subject_visible")
    private Boolean subjectVisible;

    /**
     */
    public V1MeetingsMeetingIdBookRoomsPostRequest() {
    }

    /**
     * @param subjectVisible true：在会议开始前的一小时内，在 Room 上显示会议主题。默认值为 true。 false：在会议开始前的一小时内，在 Room 上不显示会议主题。 说明：该参数并不影响预定时间晚过当前时间一个小时以上的会议。超过一小时的会议默认不显示会议主题。
     */
    public V1MeetingsMeetingIdBookRoomsPostRequest subjectVisible(Boolean subjectVisible) {
        this.subjectVisible = subjectVisible;
        return this;
    }
    /**
     * @return subjectVisible true：在会议开始前的一小时内，在 Room 上显示会议主题。默认值为 true。 false：在会议开始前的一小时内，在 Room 上不显示会议主题。 说明：该参数并不影响预定时间晚过当前时间一个小时以上的会议。超过一小时的会议默认不显示会议主题。
     **/
    public Boolean getSubjectVisible() {
        return subjectVisible;
    }

    /**
     * @param subjectVisible true：在会议开始前的一小时内，在 Room 上显示会议主题。默认值为 true。 false：在会议开始前的一小时内，在 Room 上不显示会议主题。 说明：该参数并不影响预定时间晚过当前时间一个小时以上的会议。超过一小时的会议默认不显示会议主题。
     */
    public void setSubjectVisible(Boolean subjectVisible) {
        this.subjectVisible = subjectVisible;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V1MeetingsMeetingIdBookRoomsPostRequest v1MeetingsMeetingIdBookRoomsPostRequest = (V1MeetingsMeetingIdBookRoomsPostRequest) o;
        return Objects.equals(this.subjectVisible, v1MeetingsMeetingIdBookRoomsPostRequest.subjectVisible);
    }

    @Override
    public int hashCode() {
        return Objects.hash(subjectVisible);
    }

    /**
    * Convert the given object to string with each line indented by 4 spaces
    * (except the first line).
    */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class V1MeetingsMeetingIdBookRoomsPostRequest {\n");
        sb.append("    subjectVisible: ").append(toIndentedString(subjectVisible)).append("\n");
        sb.append("}");
        return sb.toString();
    }
}

