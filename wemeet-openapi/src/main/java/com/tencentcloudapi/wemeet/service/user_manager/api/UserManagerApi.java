/*
 * 腾讯会议OpenAPI
 * SAAS版RESTFUL风格API
 *
 * The version of the OpenAPI document: v1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.tencentcloudapi.wemeet.service.user_manager.api;

import com.tencentcloudapi.wemeet.core.Config;
import com.tencentcloudapi.wemeet.core.Constants;
import com.tencentcloudapi.wemeet.core.authenticator.AuthenticatorBuilder;
import com.tencentcloudapi.wemeet.core.xhttp.*;
import com.tencentcloudapi.wemeet.core.exception.*;
import com.tencentcloudapi.wemeet.service.user_manager.model.*;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import java.io.File;


public class UserManagerApi {

    private final Config config;

    public UserManagerApi(Config config) {
        this.config = config;
    }

    public static class ApiV1AuthUsersCancelAuthPutRequest {
    
        /**
         * operatorId 操作者ID (required)
         */
        private String operatorId;

        /**
         * operatorIdType 操作者ID类型 (required)
         */
        private String operatorIdType;
        private Object body;

        private ApiV1AuthUsersCancelAuthPutRequest() {}

        private ApiV1AuthUsersCancelAuthPutRequest(Builder builder) {
            
            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            





            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * operatorId 操作者ID (required)
             */
            private String operatorId;
            

            /**
             * operatorIdType 操作者ID类型 (required)
             */
            private String operatorIdType;
            





            private Object body;

            /**
             */
            public Builder() {
            }
            
            /**
             * @param operatorId 操作者ID (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 操作者ID类型 (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
            
            
            
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1AuthUsersCancelAuthPutRequest build() {
                return new ApiV1AuthUsersCancelAuthPutRequest(this);
            }
        }
        
        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        





        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1AuthUsersCancelAuthPutResponse extends ApiResponse {
        private final Object data;
        public ApiV1AuthUsersCancelAuthPutResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingsMeetingIdMsOpenIdGetRequest {
    
        /**
         * meetingId  (required)
         */
        private String meetingId;

        /**
         * operatorId 操作者 ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
         */
        private String operatorId;

        /**
         * operatorIdType 操作者 ID 的类型： 1: userid 2: open_id 3. rooms_id (required)
         */
        private String operatorIdType;
        private Object body;

        private ApiV1MeetingsMeetingIdMsOpenIdGetRequest() {}

        private ApiV1MeetingsMeetingIdMsOpenIdGetRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId  (required)
             */
            private final String meetingId;
            

            /**
             * operatorId 操作者 ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
             */
            private String operatorId;
            

            /**
             * operatorIdType 操作者 ID 的类型： 1: userid 2: open_id 3. rooms_id (required)
             */
            private String operatorIdType;
            

            private Object body;

            /**
             * @param meetingId 
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
            
            /**
             * @param operatorId 操作者 ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 操作者 ID 的类型： 1: userid 2: open_id 3. rooms_id (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingsMeetingIdMsOpenIdGetRequest build() {
                return new ApiV1MeetingsMeetingIdMsOpenIdGetRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingsMeetingIdMsOpenIdGetResponse extends ApiResponse {
        private final V1MeetingsMeetingIdMsOpenIdGet200Response data;
        public ApiV1MeetingsMeetingIdMsOpenIdGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingsMeetingIdMsOpenIdGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingsMeetingIdMsOpenIdGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1PmiMeetingsPmiConfigGetRequest {
    
        /**
         * userid  (required)
         */
        private String userid;

        /**
         * instanceid 用户的终端设备类型： 0：PSTN 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：Linux 20：Rooms for Touch Windows 21：Rooms for Touch MacOS 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch iOS (optional)
         */
        private String instanceid;
        private Object body;

        private ApiV1PmiMeetingsPmiConfigGetRequest() {}

        private ApiV1PmiMeetingsPmiConfigGetRequest(Builder builder) {
            
            this.userid = builder.userid;
            

            this.instanceid = builder.instanceid;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * userid  (required)
             */
            private String userid;
            

            /**
             * instanceid 用户的终端设备类型： 0：PSTN 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：Linux 20：Rooms for Touch Windows 21：Rooms for Touch MacOS 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch iOS (optional)
             */
            private String instanceid;
            

            private Object body;

            /**
             */
            public Builder() {
            }
            
            /**
             * @param userid  (required)
             */
            public Builder userid(String userid) {
                this.userid = userid;
                return this;
            }
            
            
            /**
             * @param instanceid 用户的终端设备类型： 0：PSTN 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：Linux 20：Rooms for Touch Windows 21：Rooms for Touch MacOS 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch iOS (optional)
             */
            public Builder instanceid(String instanceid) {
                this.instanceid = instanceid;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1PmiMeetingsPmiConfigGetRequest build() {
                return new ApiV1PmiMeetingsPmiConfigGetRequest(this);
            }
        }
        
        public String getUserid() {
            return this.userid;
        }
        

        public String getInstanceid() {
            return this.instanceid;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1PmiMeetingsPmiConfigGetResponse extends ApiResponse {
        private final V1PmiMeetingsPmiConfigGet200Response data;
        public ApiV1PmiMeetingsPmiConfigGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1PmiMeetingsPmiConfigGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1PmiMeetingsPmiConfigGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1PmiMeetingsPmiConfigPutRequest {
            private V1PmiMeetingsPmiConfigPutRequest body;

        private ApiV1PmiMeetingsPmiConfigPutRequest() {}

        private ApiV1PmiMeetingsPmiConfigPutRequest(Builder builder) {
            
            this.body = builder.body;
        }

        public static class Builder {
            
            private V1PmiMeetingsPmiConfigPutRequest body;

            /**
             */
            public Builder() {
            }
                        public Builder body(V1PmiMeetingsPmiConfigPutRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1PmiMeetingsPmiConfigPutRequest build() {
                return new ApiV1PmiMeetingsPmiConfigPutRequest(this);
            }
        }
        
        public V1PmiMeetingsPmiConfigPutRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1PmiMeetingsPmiConfigPutResponse extends ApiResponse {
        private final Object data;
        public ApiV1PmiMeetingsPmiConfigPutResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1UsersAccountAiAccountDeleteRequest {
            private V1UsersAccountAiAccountDeleteRequest body;

        private ApiV1UsersAccountAiAccountDeleteRequest() {}

        private ApiV1UsersAccountAiAccountDeleteRequest(Builder builder) {
            
            this.body = builder.body;
        }

        public static class Builder {
            
            private V1UsersAccountAiAccountDeleteRequest body;

            /**
             */
            public Builder() {
            }
                        public Builder body(V1UsersAccountAiAccountDeleteRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1UsersAccountAiAccountDeleteRequest build() {
                return new ApiV1UsersAccountAiAccountDeleteRequest(this);
            }
        }
        
        public V1UsersAccountAiAccountDeleteRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1UsersAccountAiAccountDeleteResponse extends ApiResponse {
        private final Object data;
        public ApiV1UsersAccountAiAccountDeleteResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1UsersAccountAiAccountPostRequest {
            private V1UsersAccountAiAccountPostRequest body;

        private ApiV1UsersAccountAiAccountPostRequest() {}

        private ApiV1UsersAccountAiAccountPostRequest(Builder builder) {
            
            this.body = builder.body;
        }

        public static class Builder {
            
            private V1UsersAccountAiAccountPostRequest body;

            /**
             */
            public Builder() {
            }
                        public Builder body(V1UsersAccountAiAccountPostRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1UsersAccountAiAccountPostRequest build() {
                return new ApiV1UsersAccountAiAccountPostRequest(this);
            }
        }
        
        public V1UsersAccountAiAccountPostRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1UsersAccountAiAccountPostResponse extends ApiResponse {
        private final Object data;
        public ApiV1UsersAccountAiAccountPostResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1UsersAccountStatisticsGetRequest {
    
        /**
         * operatorId 操作人ID，用户拥有企管用户查看权限 (required)
         */
        private String operatorId;

        /**
         * operatorIdType 操作人ID类型 1:userid (required)
         */
        private String operatorIdType;
        private Object body;

        private ApiV1UsersAccountStatisticsGetRequest() {}

        private ApiV1UsersAccountStatisticsGetRequest(Builder builder) {
            
            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * operatorId 操作人ID，用户拥有企管用户查看权限 (required)
             */
            private String operatorId;
            

            /**
             * operatorIdType 操作人ID类型 1:userid (required)
             */
            private String operatorIdType;
            

            private Object body;

            /**
             */
            public Builder() {
            }
            
            /**
             * @param operatorId 操作人ID，用户拥有企管用户查看权限 (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 操作人ID类型 1:userid (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1UsersAccountStatisticsGetRequest build() {
                return new ApiV1UsersAccountStatisticsGetRequest(this);
            }
        }
        
        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1UsersAccountStatisticsGetResponse extends ApiResponse {
        private final V1UsersAccountStatisticsGet200Response data;
        public ApiV1UsersAccountStatisticsGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1UsersAccountStatisticsGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1UsersAccountStatisticsGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1UsersAdvanceListGetRequest {
    
        /**
         * operatorId  (required)
         */
        private String operatorId;

        /**
         * operatorIdType  (required)
         */
        private String operatorIdType;

        /**
         * pos 分页获取用户列表的查询起始位置值。当企业用户较多时，建议使用此参数进行分页查询，避免查询超时。此参数为非必选参数，默认值为空，从头开始查询。 设置每页返回的数量，请参考参数“size”的说明。查询返回输出参数“has_remaining”为 true，表示人数较多，需要继续查询。返回参数“next_pos”的值即为下一次查询的 pos 的值。多次调用该查询接口直到输出参数“has_remaining”值为 false。 (optional)
         */
        private String pos;

        /**
         * size 目前每页支持最大100条。 (optional)
         */
        private String size;

        /**
         * status 账号状态。1：正常  3：未激活 4：禁用  (optional)
         */
        private String status;

        /**
         * userAccountType 账号类型。 1：高级 2：免费 (optional)
         */
        private String userAccountType;

        /**
         * enableAiAccount 是否有 AI 账号能力。 true：有  false：无  (optional)
         */
        private String enableAiAccount;

        /**
         * departmentId 指定拉取的部门信息，不传则拉取全企业，需有指定范围的管理权限 (optional)
         */
        private String departmentId;
        private Object body;

        private ApiV1UsersAdvanceListGetRequest() {}

        private ApiV1UsersAdvanceListGetRequest(Builder builder) {
            
            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.pos = builder.pos;
            

            this.size = builder.size;
            

            this.status = builder.status;
            

            this.userAccountType = builder.userAccountType;
            

            this.enableAiAccount = builder.enableAiAccount;
            

            this.departmentId = builder.departmentId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * operatorId  (required)
             */
            private String operatorId;
            

            /**
             * operatorIdType  (required)
             */
            private String operatorIdType;
            

            /**
             * pos 分页获取用户列表的查询起始位置值。当企业用户较多时，建议使用此参数进行分页查询，避免查询超时。此参数为非必选参数，默认值为空，从头开始查询。 设置每页返回的数量，请参考参数“size”的说明。查询返回输出参数“has_remaining”为 true，表示人数较多，需要继续查询。返回参数“next_pos”的值即为下一次查询的 pos 的值。多次调用该查询接口直到输出参数“has_remaining”值为 false。 (optional)
             */
            private String pos;
            

            /**
             * size 目前每页支持最大100条。 (optional)
             */
            private String size;
            

            /**
             * status 账号状态。1：正常  3：未激活 4：禁用  (optional)
             */
            private String status;
            

            /**
             * userAccountType 账号类型。 1：高级 2：免费 (optional)
             */
            private String userAccountType;
            

            /**
             * enableAiAccount 是否有 AI 账号能力。 true：有  false：无  (optional)
             */
            private String enableAiAccount;
            

            /**
             * departmentId 指定拉取的部门信息，不传则拉取全企业，需有指定范围的管理权限 (optional)
             */
            private String departmentId;
            

            private Object body;

            /**
             */
            public Builder() {
            }
            
            /**
             * @param operatorId  (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType  (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
            
            /**
             * @param pos 分页获取用户列表的查询起始位置值。当企业用户较多时，建议使用此参数进行分页查询，避免查询超时。此参数为非必选参数，默认值为空，从头开始查询。 设置每页返回的数量，请参考参数“size”的说明。查询返回输出参数“has_remaining”为 true，表示人数较多，需要继续查询。返回参数“next_pos”的值即为下一次查询的 pos 的值。多次调用该查询接口直到输出参数“has_remaining”值为 false。 (optional)
             */
            public Builder pos(String pos) {
                this.pos = pos;
                return this;
            }
            
            
            /**
             * @param size 目前每页支持最大100条。 (optional)
             */
            public Builder size(String size) {
                this.size = size;
                return this;
            }
            
            
            /**
             * @param status 账号状态。1：正常  3：未激活 4：禁用  (optional)
             */
            public Builder status(String status) {
                this.status = status;
                return this;
            }
            
            
            /**
             * @param userAccountType 账号类型。 1：高级 2：免费 (optional)
             */
            public Builder userAccountType(String userAccountType) {
                this.userAccountType = userAccountType;
                return this;
            }
            
            
            /**
             * @param enableAiAccount 是否有 AI 账号能力。 true：有  false：无  (optional)
             */
            public Builder enableAiAccount(String enableAiAccount) {
                this.enableAiAccount = enableAiAccount;
                return this;
            }
            
            
            /**
             * @param departmentId 指定拉取的部门信息，不传则拉取全企业，需有指定范围的管理权限 (optional)
             */
            public Builder departmentId(String departmentId) {
                this.departmentId = departmentId;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1UsersAdvanceListGetRequest build() {
                return new ApiV1UsersAdvanceListGetRequest(this);
            }
        }
        
        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public String getPos() {
            return this.pos;
        }
        

        public String getSize() {
            return this.size;
        }
        

        public String getStatus() {
            return this.status;
        }
        

        public String getUserAccountType() {
            return this.userAccountType;
        }
        

        public String getEnableAiAccount() {
            return this.enableAiAccount;
        }
        

        public String getDepartmentId() {
            return this.departmentId;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1UsersAdvanceListGetResponse extends ApiResponse {
        private final V1UsersAdvanceListGet200Response data;
        public ApiV1UsersAdvanceListGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1UsersAdvanceListGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1UsersAdvanceListGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1UsersDeleteRequest {
    
        /**
         * uuid  (required)
         */
        private String uuid;

        /**
         * operatorId 操作者ID (required)
         */
        private String operatorId;

        /**
         * operatorIdType 操作者ID类型 (required)
         */
        private String operatorIdType;
        private Object body;

        private ApiV1UsersDeleteRequest() {}

        private ApiV1UsersDeleteRequest(Builder builder) {
            
            this.uuid = builder.uuid;
            

            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * uuid  (required)
             */
            private String uuid;
            

            /**
             * operatorId 操作者ID (required)
             */
            private String operatorId;
            

            /**
             * operatorIdType 操作者ID类型 (required)
             */
            private String operatorIdType;
            

            private Object body;

            /**
             */
            public Builder() {
            }
            
            /**
             * @param uuid  (required)
             */
            public Builder uuid(String uuid) {
                this.uuid = uuid;
                return this;
            }
            
            
            /**
             * @param operatorId 操作者ID (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 操作者ID类型 (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1UsersDeleteRequest build() {
                return new ApiV1UsersDeleteRequest(this);
            }
        }
        
        public String getUuid() {
            return this.uuid;
        }
        

        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1UsersDeleteResponse extends ApiResponse {
        private final Object data;
        public ApiV1UsersDeleteResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1UsersDeleteTransferPostRequest {
            private V1UsersDeleteTransferPostRequest body;

        private ApiV1UsersDeleteTransferPostRequest() {}

        private ApiV1UsersDeleteTransferPostRequest(Builder builder) {
            
            this.body = builder.body;
        }

        public static class Builder {
            
            private V1UsersDeleteTransferPostRequest body;

            /**
             */
            public Builder() {
            }
                        public Builder body(V1UsersDeleteTransferPostRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1UsersDeleteTransferPostRequest build() {
                return new ApiV1UsersDeleteTransferPostRequest(this);
            }
        }
        
        public V1UsersDeleteTransferPostRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1UsersDeleteTransferPostResponse extends ApiResponse {
        private final Object data;
        public ApiV1UsersDeleteTransferPostResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1UsersGetRequest {
    
        /**
         * uuid  (required)
         */
        private String uuid;

        /**
         * operatorId 操作者ID (required)
         */
        private String operatorId;

        /**
         * operatorIdType 操作者ID类型，1:userid，2:open_id (required)
         */
        private String operatorIdType;
        private Object body;

        private ApiV1UsersGetRequest() {}

        private ApiV1UsersGetRequest(Builder builder) {
            
            this.uuid = builder.uuid;
            

            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * uuid  (required)
             */
            private String uuid;
            

            /**
             * operatorId 操作者ID (required)
             */
            private String operatorId;
            

            /**
             * operatorIdType 操作者ID类型，1:userid，2:open_id (required)
             */
            private String operatorIdType;
            

            private Object body;

            /**
             */
            public Builder() {
            }
            
            /**
             * @param uuid  (required)
             */
            public Builder uuid(String uuid) {
                this.uuid = uuid;
                return this;
            }
            
            
            /**
             * @param operatorId 操作者ID (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 操作者ID类型，1:userid，2:open_id (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1UsersGetRequest build() {
                return new ApiV1UsersGetRequest(this);
            }
        }
        
        public String getUuid() {
            return this.uuid;
        }
        

        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1UsersGetResponse extends ApiResponse {
        private final V1UsersGet200Response data;
        public ApiV1UsersGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1UsersGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1UsersGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1UsersInfoBasicGetRequest {
    
        /**
         * operatorId 操作者 ID，该接口不支持获取 MRA、Rooms、小程序的账号。 operator_id 必须与operator_id_type 配合使用。 根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
         */
        private String operatorId;

        /**
         * operatorIdType 操作者 ID 的类型，2：openid。 (required)
         */
        private String operatorIdType;
        private Object body;

        private ApiV1UsersInfoBasicGetRequest() {}

        private ApiV1UsersInfoBasicGetRequest(Builder builder) {
            
            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * operatorId 操作者 ID，该接口不支持获取 MRA、Rooms、小程序的账号。 operator_id 必须与operator_id_type 配合使用。 根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
             */
            private String operatorId;
            

            /**
             * operatorIdType 操作者 ID 的类型，2：openid。 (required)
             */
            private String operatorIdType;
            

            private Object body;

            /**
             */
            public Builder() {
            }
            
            /**
             * @param operatorId 操作者 ID，该接口不支持获取 MRA、Rooms、小程序的账号。 operator_id 必须与operator_id_type 配合使用。 根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 操作者 ID 的类型，2：openid。 (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1UsersInfoBasicGetRequest build() {
                return new ApiV1UsersInfoBasicGetRequest(this);
            }
        }
        
        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1UsersInfoBasicGetResponse extends ApiResponse {
        private final V1UsersInfoBasicGet200Response data;
        public ApiV1UsersInfoBasicGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1UsersInfoBasicGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1UsersInfoBasicGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1UsersInviteActivatePostRequest {
            private V1UsersInviteActivatePostRequest body;

        private ApiV1UsersInviteActivatePostRequest() {}

        private ApiV1UsersInviteActivatePostRequest(Builder builder) {
            
            this.body = builder.body;
        }

        public static class Builder {
            
            private V1UsersInviteActivatePostRequest body;

            /**
             */
            public Builder() {
            }
                        public Builder body(V1UsersInviteActivatePostRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1UsersInviteActivatePostRequest build() {
                return new ApiV1UsersInviteActivatePostRequest(this);
            }
        }
        
        public V1UsersInviteActivatePostRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1UsersInviteActivatePostResponse extends ApiResponse {
        private final V1UsersInviteActivatePost200Response data;
        public ApiV1UsersInviteActivatePostResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1UsersInviteActivatePost200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1UsersInviteActivatePost200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1UsersInviteAuthPostRequest {
            private V1UsersInviteAuthPostRequest body;

        private ApiV1UsersInviteAuthPostRequest() {}

        private ApiV1UsersInviteAuthPostRequest(Builder builder) {
            
            this.body = builder.body;
        }

        public static class Builder {
            
            private V1UsersInviteAuthPostRequest body;

            /**
             */
            public Builder() {
            }
                        public Builder body(V1UsersInviteAuthPostRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1UsersInviteAuthPostRequest build() {
                return new ApiV1UsersInviteAuthPostRequest(this);
            }
        }
        
        public V1UsersInviteAuthPostRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1UsersInviteAuthPostResponse extends ApiResponse {
        private final V1UsersInviteAuthPost200Response data;
        public ApiV1UsersInviteAuthPostResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1UsersInviteAuthPost200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1UsersInviteAuthPost200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1UsersListGetRequest {
    
        /**
         * page 当前页，大于等于1。 (required)
         */
        private String page;

        /**
         * pageSize 分页大小，最大为20。 (required)
         */
        private String pageSize;

        /**
         * operatorId 操作者ID (required)
         */
        private String operatorId;

        /**
         * operatorIdType 操作者ID类型，1:userid,2:open_id (required)
         */
        private String operatorIdType;
        private Object body;

        private ApiV1UsersListGetRequest() {}

        private ApiV1UsersListGetRequest(Builder builder) {
            
            this.page = builder.page;
            

            this.pageSize = builder.pageSize;
            

            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * page 当前页，大于等于1。 (required)
             */
            private String page;
            

            /**
             * pageSize 分页大小，最大为20。 (required)
             */
            private String pageSize;
            

            /**
             * operatorId 操作者ID (required)
             */
            private String operatorId;
            

            /**
             * operatorIdType 操作者ID类型，1:userid,2:open_id (required)
             */
            private String operatorIdType;
            

            private Object body;

            /**
             */
            public Builder() {
            }
            
            /**
             * @param page 当前页，大于等于1。 (required)
             */
            public Builder page(String page) {
                this.page = page;
                return this;
            }
            
            
            /**
             * @param pageSize 分页大小，最大为20。 (required)
             */
            public Builder pageSize(String pageSize) {
                this.pageSize = pageSize;
                return this;
            }
            
            
            /**
             * @param operatorId 操作者ID (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 操作者ID类型，1:userid,2:open_id (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1UsersListGetRequest build() {
                return new ApiV1UsersListGetRequest(this);
            }
        }
        
        public String getPage() {
            return this.page;
        }
        

        public String getPageSize() {
            return this.pageSize;
        }
        

        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1UsersListGetResponse extends ApiResponse {
        private final V1UsersListGet200Response data;
        public ApiV1UsersListGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1UsersListGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1UsersListGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1UsersOpenIdToUseridPostRequest {
            private V1UsersOpenIdToUseridPostRequest body;

        private ApiV1UsersOpenIdToUseridPostRequest() {}

        private ApiV1UsersOpenIdToUseridPostRequest(Builder builder) {
            
            this.body = builder.body;
        }

        public static class Builder {
            
            private V1UsersOpenIdToUseridPostRequest body;

            /**
             */
            public Builder() {
            }
                        public Builder body(V1UsersOpenIdToUseridPostRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1UsersOpenIdToUseridPostRequest build() {
                return new ApiV1UsersOpenIdToUseridPostRequest(this);
            }
        }
        
        public V1UsersOpenIdToUseridPostRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1UsersOpenIdToUseridPostResponse extends ApiResponse {
        private final V1UsersOpenIdToUseridPost200Response data;
        public ApiV1UsersOpenIdToUseridPostResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1UsersOpenIdToUseridPost200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1UsersOpenIdToUseridPost200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1UsersPostRequest {
            private V1UsersPostRequest body;

        private ApiV1UsersPostRequest() {}

        private ApiV1UsersPostRequest(Builder builder) {
            
            this.body = builder.body;
        }

        public static class Builder {
            
            private V1UsersPostRequest body;

            /**
             */
            public Builder() {
            }
                        public Builder body(V1UsersPostRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1UsersPostRequest build() {
                return new ApiV1UsersPostRequest(this);
            }
        }
        
        public V1UsersPostRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1UsersPostResponse extends ApiResponse {
        private final V1UsersPost200Response data;
        public ApiV1UsersPostResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1UsersPost200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1UsersPost200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1UsersPutRequest {
    
        /**
         * uuid  (required)
         */
        private String uuid;
        private V1UsersPutRequest body;

        private ApiV1UsersPutRequest() {}

        private ApiV1UsersPutRequest(Builder builder) {
            
            this.uuid = builder.uuid;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * uuid  (required)
             */
            private String uuid;
            

            private V1UsersPutRequest body;

            /**
             */
            public Builder() {
            }
            
            /**
             * @param uuid  (required)
             */
            public Builder uuid(String uuid) {
                this.uuid = uuid;
                return this;
            }
            
                        public Builder body(V1UsersPutRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1UsersPutRequest build() {
                return new ApiV1UsersPutRequest(this);
            }
        }
        
        public String getUuid() {
            return this.uuid;
        }
        

        public V1UsersPutRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1UsersPutResponse extends ApiResponse {
        private final Object data;
        public ApiV1UsersPutResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1UsersUseridDeleteRequest {
    
        /**
         * userid 被删除用户的userid (required)
         */
        private String userid;

        /**
         * operatorId 操作者ID (required)
         */
        private String operatorId;

        /**
         * operatorIdType 操作者ID类型，1:userid (required)
         */
        private String operatorIdType;
        private Object body;

        private ApiV1UsersUseridDeleteRequest() {}

        private ApiV1UsersUseridDeleteRequest(Builder builder) {
            
            this.userid = builder.userid;
            

            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * userid 被删除用户的userid (required)
             */
            private final String userid;
            

            /**
             * operatorId 操作者ID (required)
             */
            private String operatorId;
            

            /**
             * operatorIdType 操作者ID类型，1:userid (required)
             */
            private String operatorIdType;
            

            private Object body;

            /**
             * @param userid 被删除用户的userid
             */
            public Builder(String userid) {
                this.userid = userid;
            }
            
            
            /**
             * @param operatorId 操作者ID (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 操作者ID类型，1:userid (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1UsersUseridDeleteRequest build() {
                return new ApiV1UsersUseridDeleteRequest(this);
            }
        }
        
        public String getUserid() {
            return this.userid;
        }
        

        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1UsersUseridDeleteResponse extends ApiResponse {
        private final Object data;
        public ApiV1UsersUseridDeleteResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1UsersUseridEnablePutRequest {
    
        /**
         * userid 调用方用于标示用户的唯一 ID（例如：企业用户可以为企业账户英文名、个人用户可以为手机号等，暂不支持中文）。 (required)
         */
        private String userid;
        private V1UsersUseridEnablePutRequest body;

        private ApiV1UsersUseridEnablePutRequest() {}

        private ApiV1UsersUseridEnablePutRequest(Builder builder) {
            
            this.userid = builder.userid;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * userid 调用方用于标示用户的唯一 ID（例如：企业用户可以为企业账户英文名、个人用户可以为手机号等，暂不支持中文）。 (required)
             */
            private final String userid;
            

            private V1UsersUseridEnablePutRequest body;

            /**
             * @param userid 调用方用于标示用户的唯一 ID（例如：企业用户可以为企业账户英文名、个人用户可以为手机号等，暂不支持中文）。
             */
            public Builder(String userid) {
                this.userid = userid;
            }
            
                        public Builder body(V1UsersUseridEnablePutRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1UsersUseridEnablePutRequest build() {
                return new ApiV1UsersUseridEnablePutRequest(this);
            }
        }
        
        public String getUserid() {
            return this.userid;
        }
        

        public V1UsersUseridEnablePutRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1UsersUseridEnablePutResponse extends ApiResponse {
        private final Object data;
        public ApiV1UsersUseridEnablePutResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1UsersUseridGetRequest {
    
        /**
         * userid 调用方用于标示用户的唯一 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 企业唯一用户标识说明： 1. 企业对接 SSO 时使用的员工唯一标识 ID； 2. 企业调用创建用户接口时传递的 userid 参数。  (required)
         */
        private String userid;

        /**
         * operatorId 操作者ID (required)
         */
        private String operatorId;

        /**
         * operatorIdType 操作者ID类型，1:userid,2:open_id (required)
         */
        private String operatorIdType;
        private Object body;

        private ApiV1UsersUseridGetRequest() {}

        private ApiV1UsersUseridGetRequest(Builder builder) {
            
            this.userid = builder.userid;
            

            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * userid 调用方用于标示用户的唯一 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 企业唯一用户标识说明： 1. 企业对接 SSO 时使用的员工唯一标识 ID； 2. 企业调用创建用户接口时传递的 userid 参数。  (required)
             */
            private final String userid;
            

            /**
             * operatorId 操作者ID (required)
             */
            private String operatorId;
            

            /**
             * operatorIdType 操作者ID类型，1:userid,2:open_id (required)
             */
            private String operatorIdType;
            

            private Object body;

            /**
             * @param userid 调用方用于标示用户的唯一 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 企业唯一用户标识说明： 1. 企业对接 SSO 时使用的员工唯一标识 ID； 2. 企业调用创建用户接口时传递的 userid 参数。 
             */
            public Builder(String userid) {
                this.userid = userid;
            }
            
            
            /**
             * @param operatorId 操作者ID (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 操作者ID类型，1:userid,2:open_id (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1UsersUseridGetRequest build() {
                return new ApiV1UsersUseridGetRequest(this);
            }
        }
        
        public String getUserid() {
            return this.userid;
        }
        

        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1UsersUseridGetResponse extends ApiResponse {
        private final V1UsersUseridGet200Response data;
        public ApiV1UsersUseridGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1UsersUseridGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1UsersUseridGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1UsersUseridInviteActivatePutRequest {
    
        /**
         * userid 调用方用于标示用户的唯一 ID（例如：企业用户可以为企业账户英文名、个人用户可以为手机号等，暂不支持中文）。 (required)
         */
        private String userid;

        /**
         * operatorId 操作者ID (required)
         */
        private String operatorId;

        /**
         * operatorIdType 操作者ID类型，1:userid (required)
         */
        private String operatorIdType;
        private Object body;

        private ApiV1UsersUseridInviteActivatePutRequest() {}

        private ApiV1UsersUseridInviteActivatePutRequest(Builder builder) {
            
            this.userid = builder.userid;
            

            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * userid 调用方用于标示用户的唯一 ID（例如：企业用户可以为企业账户英文名、个人用户可以为手机号等，暂不支持中文）。 (required)
             */
            private final String userid;
            

            /**
             * operatorId 操作者ID (required)
             */
            private String operatorId;
            

            /**
             * operatorIdType 操作者ID类型，1:userid (required)
             */
            private String operatorIdType;
            

            private Object body;

            /**
             * @param userid 调用方用于标示用户的唯一 ID（例如：企业用户可以为企业账户英文名、个人用户可以为手机号等，暂不支持中文）。
             */
            public Builder(String userid) {
                this.userid = userid;
            }
            
            
            /**
             * @param operatorId 操作者ID (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 操作者ID类型，1:userid (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1UsersUseridInviteActivatePutRequest build() {
                return new ApiV1UsersUseridInviteActivatePutRequest(this);
            }
        }
        
        public String getUserid() {
            return this.userid;
        }
        

        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1UsersUseridInviteActivatePutResponse extends ApiResponse {
        private final Object data;
        public ApiV1UsersUseridInviteActivatePutResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1UsersUseridInviteAuthPutRequest {
    
        /**
         * userid  (required)
         */
        private String userid;
        private V1UsersUseridInviteAuthPutRequest body;

        private ApiV1UsersUseridInviteAuthPutRequest() {}

        private ApiV1UsersUseridInviteAuthPutRequest(Builder builder) {
            
            this.userid = builder.userid;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * userid  (required)
             */
            private final String userid;
            

            private V1UsersUseridInviteAuthPutRequest body;

            /**
             * @param userid 
             */
            public Builder(String userid) {
                this.userid = userid;
            }
            
                        public Builder body(V1UsersUseridInviteAuthPutRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1UsersUseridInviteAuthPutRequest build() {
                return new ApiV1UsersUseridInviteAuthPutRequest(this);
            }
        }
        
        public String getUserid() {
            return this.userid;
        }
        

        public V1UsersUseridInviteAuthPutRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1UsersUseridInviteAuthPutResponse extends ApiResponse {
        private final Object data;
        public ApiV1UsersUseridInviteAuthPutResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1UsersUseridPutRequest {
    
        /**
         * userid  (required)
         */
        private String userid;
        private V1UsersUseridPutRequest body;

        private ApiV1UsersUseridPutRequest() {}

        private ApiV1UsersUseridPutRequest(Builder builder) {
            
            this.userid = builder.userid;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * userid  (required)
             */
            private final String userid;
            

            private V1UsersUseridPutRequest body;

            /**
             * @param userid 
             */
            public Builder(String userid) {
                this.userid = userid;
            }
            
                        public Builder body(V1UsersUseridPutRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1UsersUseridPutRequest build() {
                return new ApiV1UsersUseridPutRequest(this);
            }
        }
        
        public String getUserid() {
            return this.userid;
        }
        

        public V1UsersUseridPutRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1UsersUseridPutResponse extends ApiResponse {
        private final Object data;
        public ApiV1UsersUseridPutResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    /**
     * v1AuthUsersCancelAuthPut 取消用户授权[/v1/auth-users/cancel-auth - PUT]
     * <p>第三方应用可以调用该接口来取消用户的授权，针对商业版和企业版用户仅支持在授权用户所属企业开启允许企业成员自主授权应用模式时取消，且由企业管理员开通的应用无法通过接口进行取消。如果企业开启了仅管理员可授权应用，用户只能在 腾讯会议应用管理页取消授权，无法在第三方平台取消。仅支持 OAuth2.0 鉴权方式调用。<p/>
     * @param req ApiV1AuthUsersCancelAuthPutRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1AuthUsersCancelAuthPutResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1AuthUsersCancelAuthPutResponse v1AuthUsersCancelAuthPut(ApiV1AuthUsersCancelAuthPutRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/auth-users/cancel-auth")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            





            
            // path 参数
            // query 参数
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().put(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1AuthUsersCancelAuthPutResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1AuthUsersCancelAuthPut 取消用户授权[/v1/auth-users/cancel-auth - PUT]
    * <p>第三方应用可以调用该接口来取消用户的授权，针对商业版和企业版用户仅支持在授权用户所属企业开启允许企业成员自主授权应用模式时取消，且由企业管理员开通的应用无法通过接口进行取消。如果企业开启了仅管理员可授权应用，用户只能在 腾讯会议应用管理页取消授权，无法在第三方平台取消。仅支持 OAuth2.0 鉴权方式调用。<p/>
    * @param req ApiV1AuthUsersCancelAuthPutRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1AuthUsersCancelAuthPutResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1AuthUsersCancelAuthPutResponse v1AuthUsersCancelAuthPut(ApiV1AuthUsersCancelAuthPutRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1AuthUsersCancelAuthPut(req, null, builders);
    }
    /**
     * v1MeetingsMeetingIdMsOpenIdGet 查询 ms_open_id[/v1/meetings/{meeting_id}/ms-open-id - GET]
     * <p>**查询指定会议的用户的 ms\\_open\\_id，支持在会议开始前查询。** 支持企业自建应用（JWT 鉴权），仅支持查询本企业创建的会议。 &lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(44, 51, 60)\&quot;&gt;支持OAuth2.0鉴权，仅支持查询该应用所创建的会议。&lt;/span&gt;<p/>
     * @param req ApiV1MeetingsMeetingIdMsOpenIdGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingsMeetingIdMsOpenIdGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingsMeetingIdMsOpenIdGetResponse v1MeetingsMeetingIdMsOpenIdGet(ApiV1MeetingsMeetingIdMsOpenIdGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meetings/{meeting_id}/ms-open-id")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingsMeetingIdMsOpenIdGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingsMeetingIdMsOpenIdGet 查询 ms_open_id[/v1/meetings/{meeting_id}/ms-open-id - GET]
    * <p>**查询指定会议的用户的 ms\\_open\\_id，支持在会议开始前查询。** 支持企业自建应用（JWT 鉴权），仅支持查询本企业创建的会议。 &lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(44, 51, 60)\&quot;&gt;支持OAuth2.0鉴权，仅支持查询该应用所创建的会议。&lt;/span&gt;<p/>
    * @param req ApiV1MeetingsMeetingIdMsOpenIdGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingsMeetingIdMsOpenIdGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingsMeetingIdMsOpenIdGetResponse v1MeetingsMeetingIdMsOpenIdGet(ApiV1MeetingsMeetingIdMsOpenIdGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingsMeetingIdMsOpenIdGet(req, null, builders);
    }
    /**
     * v1PmiMeetingsPmiConfigGet 查询个人会议号配置信息[/v1/pmi-meetings/pmi-config - GET]
     * <p>获取用户个人会议号配置信息。仅企业下 secret 鉴权用户可获取该用户的 pmi 配置。目前暂不支持 OAuth 2.0鉴权访问。<p/>
     * @param req ApiV1PmiMeetingsPmiConfigGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1PmiMeetingsPmiConfigGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1PmiMeetingsPmiConfigGetResponse v1PmiMeetingsPmiConfigGet(ApiV1PmiMeetingsPmiConfigGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/pmi-meetings/pmi-config")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'userid' is set
            if (req.getUserid() == null) {
                throw new IllegalArgumentException("'userid' is required and must be specified");
            }
            

            

            
            // path 参数
            // query 参数
            if (req.getInstanceid() != null) {
                apiReq.getQueryParams().set("instanceid", req.getInstanceid());
            }
            if (req.getUserid() != null) {
                apiReq.getQueryParams().set("userid", req.getUserid());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1PmiMeetingsPmiConfigGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1PmiMeetingsPmiConfigGet 查询个人会议号配置信息[/v1/pmi-meetings/pmi-config - GET]
    * <p>获取用户个人会议号配置信息。仅企业下 secret 鉴权用户可获取该用户的 pmi 配置。目前暂不支持 OAuth 2.0鉴权访问。<p/>
    * @param req ApiV1PmiMeetingsPmiConfigGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1PmiMeetingsPmiConfigGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1PmiMeetingsPmiConfigGetResponse v1PmiMeetingsPmiConfigGet(ApiV1PmiMeetingsPmiConfigGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1PmiMeetingsPmiConfigGet(req, null, builders);
    }
    /**
     * v1PmiMeetingsPmiConfigPut 修改个人会议号配置信息[/v1/pmi-meetings/pmi-config - PUT]
     * <p>修改个人会议号的基本配置信息<p/>
     * @param req ApiV1PmiMeetingsPmiConfigPutRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1PmiMeetingsPmiConfigPutResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1PmiMeetingsPmiConfigPutResponse v1PmiMeetingsPmiConfigPut(ApiV1PmiMeetingsPmiConfigPutRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/pmi-meetings/pmi-config")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            
            // path 参数
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().put(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1PmiMeetingsPmiConfigPutResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1PmiMeetingsPmiConfigPut 修改个人会议号配置信息[/v1/pmi-meetings/pmi-config - PUT]
    * <p>修改个人会议号的基本配置信息<p/>
    * @param req ApiV1PmiMeetingsPmiConfigPutRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1PmiMeetingsPmiConfigPutResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1PmiMeetingsPmiConfigPutResponse v1PmiMeetingsPmiConfigPut(ApiV1PmiMeetingsPmiConfigPutRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1PmiMeetingsPmiConfigPut(req, null, builders);
    }
    /**
     * v1UsersAccountAiAccountDelete 移除AI账号能力[/v1/users/account/ai-account - DELETE]
     * <p>移除企业账号的AI账号能力 权限点：企业用户管理，待自建应用支持权限点需求上线后生效<p/>
     * @param req ApiV1UsersAccountAiAccountDeleteRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1UsersAccountAiAccountDeleteResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1UsersAccountAiAccountDeleteResponse v1UsersAccountAiAccountDelete(ApiV1UsersAccountAiAccountDeleteRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/users/account/ai-account")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            
            // path 参数
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().delete(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1UsersAccountAiAccountDeleteResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1UsersAccountAiAccountDelete 移除AI账号能力[/v1/users/account/ai-account - DELETE]
    * <p>移除企业账号的AI账号能力 权限点：企业用户管理，待自建应用支持权限点需求上线后生效<p/>
    * @param req ApiV1UsersAccountAiAccountDeleteRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1UsersAccountAiAccountDeleteResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1UsersAccountAiAccountDeleteResponse v1UsersAccountAiAccountDelete(ApiV1UsersAccountAiAccountDeleteRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1UsersAccountAiAccountDelete(req, null, builders);
    }
    /**
     * v1UsersAccountAiAccountPost 添加AI账号能力[/v1/users/account/ai-account - POST]
     * <p>设置企业账号AI账号能力 权限点：企业用户管理。<p/>
     * @param req ApiV1UsersAccountAiAccountPostRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1UsersAccountAiAccountPostResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1UsersAccountAiAccountPostResponse v1UsersAccountAiAccountPost(ApiV1UsersAccountAiAccountPostRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/users/account/ai-account")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            
            // path 参数
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().post(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1UsersAccountAiAccountPostResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1UsersAccountAiAccountPost 添加AI账号能力[/v1/users/account/ai-account - POST]
    * <p>设置企业账号AI账号能力 权限点：企业用户管理。<p/>
    * @param req ApiV1UsersAccountAiAccountPostRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1UsersAccountAiAccountPostResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1UsersAccountAiAccountPostResponse v1UsersAccountAiAccountPost(ApiV1UsersAccountAiAccountPostRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1UsersAccountAiAccountPost(req, null, builders);
    }
    /**
     * v1UsersAccountStatisticsGet 获取账号资源统计[/v1/users/account/statistics - GET]
     * <p>查询企业下账号资源使用情况。 自建应用权限点：企业用户查看<p/>
     * @param req ApiV1UsersAccountStatisticsGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1UsersAccountStatisticsGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1UsersAccountStatisticsGetResponse v1UsersAccountStatisticsGet(ApiV1UsersAccountStatisticsGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/users/account/statistics")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            

            
            // path 参数
            // query 参数
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1UsersAccountStatisticsGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1UsersAccountStatisticsGet 获取账号资源统计[/v1/users/account/statistics - GET]
    * <p>查询企业下账号资源使用情况。 自建应用权限点：企业用户查看<p/>
    * @param req ApiV1UsersAccountStatisticsGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1UsersAccountStatisticsGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1UsersAccountStatisticsGetResponse v1UsersAccountStatisticsGet(ApiV1UsersAccountStatisticsGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1UsersAccountStatisticsGet(req, null, builders);
    }
    /**
     * v1UsersAdvanceListGet 获取用户列表（新）[/v1/users/advance/list - GET]
     * <p>获取企业用户列表，支持高级搜索。企微企业暂不支持使用该接口。 自建应用权限点：查看企业用户，管理企业用户<p/>
     * @param req ApiV1UsersAdvanceListGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1UsersAdvanceListGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1UsersAdvanceListGetResponse v1UsersAdvanceListGet(ApiV1UsersAdvanceListGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/users/advance/list")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            

            

            

            

            

            

            

            
            // path 参数
            // query 参数
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getPos() != null) {
                apiReq.getQueryParams().set("pos", req.getPos());
            }
            if (req.getSize() != null) {
                apiReq.getQueryParams().set("size", req.getSize());
            }
            if (req.getStatus() != null) {
                apiReq.getQueryParams().set("status", req.getStatus());
            }
            if (req.getUserAccountType() != null) {
                apiReq.getQueryParams().set("user_account_type", req.getUserAccountType());
            }
            if (req.getEnableAiAccount() != null) {
                apiReq.getQueryParams().set("enable_ai_account", req.getEnableAiAccount());
            }
            if (req.getDepartmentId() != null) {
                apiReq.getQueryParams().set("department_id", req.getDepartmentId());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1UsersAdvanceListGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1UsersAdvanceListGet 获取用户列表（新）[/v1/users/advance/list - GET]
    * <p>获取企业用户列表，支持高级搜索。企微企业暂不支持使用该接口。 自建应用权限点：查看企业用户，管理企业用户<p/>
    * @param req ApiV1UsersAdvanceListGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1UsersAdvanceListGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1UsersAdvanceListGetResponse v1UsersAdvanceListGet(ApiV1UsersAdvanceListGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1UsersAdvanceListGet(req, null, builders);
    }
    /**
     * v1UsersDelete 删除用户（通过 uuid 删除用户）[/v1/users - DELETE]
     * <p><p/>
     * @param req ApiV1UsersDeleteRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1UsersDeleteResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1UsersDeleteResponse v1UsersDelete(ApiV1UsersDeleteRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/users")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'uuid' is set
            if (req.getUuid() == null) {
                throw new IllegalArgumentException("'uuid' is required and must be specified");
            }
            

            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            

            
            // path 参数
            // query 参数
            if (req.getUuid() != null) {
                apiReq.getQueryParams().set("uuid", req.getUuid());
            }
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().delete(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1UsersDeleteResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1UsersDelete 删除用户（通过 uuid 删除用户）[/v1/users - DELETE]
    * <p><p/>
    * @param req ApiV1UsersDeleteRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1UsersDeleteResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1UsersDeleteResponse v1UsersDelete(ApiV1UsersDeleteRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1UsersDelete(req, null, builders);
    }
    /**
     * v1UsersDeleteTransferPost 用户资产转移[/v1/users/delete-transfer - POST]
     * <p><p/>
     * @param req ApiV1UsersDeleteTransferPostRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1UsersDeleteTransferPostResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1UsersDeleteTransferPostResponse v1UsersDeleteTransferPost(ApiV1UsersDeleteTransferPostRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/users/delete-transfer")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            
            // path 参数
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().post(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1UsersDeleteTransferPostResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1UsersDeleteTransferPost 用户资产转移[/v1/users/delete-transfer - POST]
    * <p><p/>
    * @param req ApiV1UsersDeleteTransferPostRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1UsersDeleteTransferPostResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1UsersDeleteTransferPostResponse v1UsersDeleteTransferPost(ApiV1UsersDeleteTransferPostRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1UsersDeleteTransferPost(req, null, builders);
    }
    /**
     * v1UsersGet 获取用户详情（通过 uuid 获取用户详情）[/v1/users - GET]
     * <p>使用 uuid 获取企业用户详情。企业 secret 鉴权用户可获取该用户所属企业下的用户详情，暂不支持 OAuth2.0 鉴权访问。<p/>
     * @param req ApiV1UsersGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1UsersGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1UsersGetResponse v1UsersGet(ApiV1UsersGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/users")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'uuid' is set
            if (req.getUuid() == null) {
                throw new IllegalArgumentException("'uuid' is required and must be specified");
            }
            

            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            

            
            // path 参数
            // query 参数
            if (req.getUuid() != null) {
                apiReq.getQueryParams().set("uuid", req.getUuid());
            }
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1UsersGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1UsersGet 获取用户详情（通过 uuid 获取用户详情）[/v1/users - GET]
    * <p>使用 uuid 获取企业用户详情。企业 secret 鉴权用户可获取该用户所属企业下的用户详情，暂不支持 OAuth2.0 鉴权访问。<p/>
    * @param req ApiV1UsersGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1UsersGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1UsersGetResponse v1UsersGet(ApiV1UsersGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1UsersGet(req, null, builders);
    }
    /**
     * v1UsersInfoBasicGet 获取用户基本信息[/v1/users/info/basic - GET]
     * <p><p/>
     * @param req ApiV1UsersInfoBasicGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1UsersInfoBasicGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1UsersInfoBasicGetResponse v1UsersInfoBasicGet(ApiV1UsersInfoBasicGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/users/info/basic")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            

            
            // path 参数
            // query 参数
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1UsersInfoBasicGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1UsersInfoBasicGet 获取用户基本信息[/v1/users/info/basic - GET]
    * <p><p/>
    * @param req ApiV1UsersInfoBasicGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1UsersInfoBasicGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1UsersInfoBasicGetResponse v1UsersInfoBasicGet(ApiV1UsersInfoBasicGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1UsersInfoBasicGet(req, null, builders);
    }
    /**
     * v1UsersInviteActivatePost 获取账号激活链接[/v1/users/invite-activate - POST]
     * <p>未激活的账号，可以获取激活链接，激活链接有效期是48h。 每次获取链接为一个新链接，账号信息不变，旧链接仍然48h有效。<p/>
     * @param req ApiV1UsersInviteActivatePostRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1UsersInviteActivatePostResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1UsersInviteActivatePostResponse v1UsersInviteActivatePost(ApiV1UsersInviteActivatePostRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/users/invite-activate")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            
            // path 参数
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().post(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1UsersInviteActivatePostResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1UsersInviteActivatePost 获取账号激活链接[/v1/users/invite-activate - POST]
    * <p>未激活的账号，可以获取激活链接，激活链接有效期是48h。 每次获取链接为一个新链接，账号信息不变，旧链接仍然48h有效。<p/>
    * @param req ApiV1UsersInviteActivatePostRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1UsersInviteActivatePostResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1UsersInviteActivatePostResponse v1UsersInviteActivatePost(ApiV1UsersInviteActivatePostRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1UsersInviteActivatePost(req, null, builders);
    }
    /**
     * v1UsersInviteAuthPost 获取安全验证链接[/v1/users/invite-auth - POST]
     * <p>●未验证的账号，可以获取验证链接，验证链接有效期是 48h，每次获取链接为一个新链接，账号信息不变，旧链接仍然48h有效。 ●如果没有绑定手机号，不支持调用。 ●每个 userid每天可获取10次验证链接。 <p/>
     * @param req ApiV1UsersInviteAuthPostRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1UsersInviteAuthPostResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1UsersInviteAuthPostResponse v1UsersInviteAuthPost(ApiV1UsersInviteAuthPostRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/users/invite-auth")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            
            // path 参数
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().post(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1UsersInviteAuthPostResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1UsersInviteAuthPost 获取安全验证链接[/v1/users/invite-auth - POST]
    * <p>●未验证的账号，可以获取验证链接，验证链接有效期是 48h，每次获取链接为一个新链接，账号信息不变，旧链接仍然48h有效。 ●如果没有绑定手机号，不支持调用。 ●每个 userid每天可获取10次验证链接。 <p/>
    * @param req ApiV1UsersInviteAuthPostRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1UsersInviteAuthPostResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1UsersInviteAuthPostResponse v1UsersInviteAuthPost(ApiV1UsersInviteAuthPostRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1UsersInviteAuthPost(req, null, builders);
    }
    /**
     * v1UsersListGet 获取用户列表[/v1/users/list - GET]
     * <p>获取企业用户列表，目前暂不支持 OAuth2.0 鉴权访问。<p/>
     * @param req ApiV1UsersListGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1UsersListGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1UsersListGetResponse v1UsersListGet(ApiV1UsersListGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/users/list")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'page' is set
            if (req.getPage() == null) {
                throw new IllegalArgumentException("'page' is required and must be specified");
            }
            

            // verify the required parameter 'pageSize' is set
            if (req.getPageSize() == null) {
                throw new IllegalArgumentException("'pageSize' is required and must be specified");
            }
            

            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            

            
            // path 参数
            // query 参数
            if (req.getPage() != null) {
                apiReq.getQueryParams().set("page", req.getPage());
            }
            if (req.getPageSize() != null) {
                apiReq.getQueryParams().set("page_size", req.getPageSize());
            }
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1UsersListGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1UsersListGet 获取用户列表[/v1/users/list - GET]
    * <p>获取企业用户列表，目前暂不支持 OAuth2.0 鉴权访问。<p/>
    * @param req ApiV1UsersListGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1UsersListGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1UsersListGetResponse v1UsersListGet(ApiV1UsersListGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1UsersListGet(req, null, builders);
    }
    /**
     * v1UsersOpenIdToUseridPost 自建应用与三方应用 ID 转换接口[/v1/users/open-id-to-userid - POST]
     * <p>**接口描述：** &lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(24, 43, 80)\&quot;&gt;将三方应用获取到open_id转换为本企业用户的userid。&lt;/span&gt; **鉴权方式：** JWT鉴权~~~~<p/>
     * @param req ApiV1UsersOpenIdToUseridPostRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1UsersOpenIdToUseridPostResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1UsersOpenIdToUseridPostResponse v1UsersOpenIdToUseridPost(ApiV1UsersOpenIdToUseridPostRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/users/open-id-to-userid")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            
            // path 参数
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().post(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1UsersOpenIdToUseridPostResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1UsersOpenIdToUseridPost 自建应用与三方应用 ID 转换接口[/v1/users/open-id-to-userid - POST]
    * <p>**接口描述：** &lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(24, 43, 80)\&quot;&gt;将三方应用获取到open_id转换为本企业用户的userid。&lt;/span&gt; **鉴权方式：** JWT鉴权~~~~<p/>
    * @param req ApiV1UsersOpenIdToUseridPostRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1UsersOpenIdToUseridPostResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1UsersOpenIdToUseridPostResponse v1UsersOpenIdToUseridPost(ApiV1UsersOpenIdToUseridPostRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1UsersOpenIdToUseridPost(req, null, builders);
    }
    /**
     * v1UsersPost 创建用户[/v1/users - POST]
     * <p><p/>
     * @param req ApiV1UsersPostRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1UsersPostResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1UsersPostResponse v1UsersPost(ApiV1UsersPostRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/users")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            
            // path 参数
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().post(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1UsersPostResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1UsersPost 创建用户[/v1/users - POST]
    * <p><p/>
    * @param req ApiV1UsersPostRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1UsersPostResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1UsersPostResponse v1UsersPost(ApiV1UsersPostRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1UsersPost(req, null, builders);
    }
    /**
     * v1UsersPut 更新用户（通过 uuid 更新用户）[/v1/users - PUT]
     * <p>通过 uuid 更新用户<p/>
     * @param req ApiV1UsersPutRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1UsersPutResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1UsersPutResponse v1UsersPut(ApiV1UsersPutRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/users")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'uuid' is set
            if (req.getUuid() == null) {
                throw new IllegalArgumentException("'uuid' is required and must be specified");
            }
            

            
            // path 参数
            // query 参数
            if (req.getUuid() != null) {
                apiReq.getQueryParams().set("uuid", req.getUuid());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().put(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1UsersPutResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1UsersPut 更新用户（通过 uuid 更新用户）[/v1/users - PUT]
    * <p>通过 uuid 更新用户<p/>
    * @param req ApiV1UsersPutRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1UsersPutResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1UsersPutResponse v1UsersPut(ApiV1UsersPutRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1UsersPut(req, null, builders);
    }
    /**
     * v1UsersUseridDelete 删除用户（通过 userid 删除用户）[/v1/users/{userid} - DELETE]
     * <p><p/>
     * @param req ApiV1UsersUseridDeleteRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1UsersUseridDeleteResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1UsersUseridDeleteResponse v1UsersUseridDelete(ApiV1UsersUseridDeleteRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/users/{userid}")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'userid' is set
            if (req.getUserid() == null) {
                throw new IllegalArgumentException("'userid' is required and must be specified");
            }
            

            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("userid", req.getUserid());
            // query 参数
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().delete(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1UsersUseridDeleteResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1UsersUseridDelete 删除用户（通过 userid 删除用户）[/v1/users/{userid} - DELETE]
    * <p><p/>
    * @param req ApiV1UsersUseridDeleteRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1UsersUseridDeleteResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1UsersUseridDeleteResponse v1UsersUseridDelete(ApiV1UsersUseridDeleteRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1UsersUseridDelete(req, null, builders);
    }
    /**
     * v1UsersUseridEnablePut 启用与禁用用户[/v1/users/{userid}/enable - PUT]
     * <p>**接口描述：** 使用userid启用/禁用本企业下的用户。~~~~ **鉴权方式：** jwt鉴权 **输出参数：** &lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(51, 51, 51)\&quot;&gt;无输出参数，成功返回空消息体，失败返回 [错误码](https://cloud.tencent.com/document/product/1095/43704) 和错误信息。&lt;/span&gt;<p/>
     * @param req ApiV1UsersUseridEnablePutRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1UsersUseridEnablePutResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1UsersUseridEnablePutResponse v1UsersUseridEnablePut(ApiV1UsersUseridEnablePutRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/users/{userid}/enable")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'userid' is set
            if (req.getUserid() == null) {
                throw new IllegalArgumentException("'userid' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("userid", req.getUserid());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().put(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1UsersUseridEnablePutResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1UsersUseridEnablePut 启用与禁用用户[/v1/users/{userid}/enable - PUT]
    * <p>**接口描述：** 使用userid启用/禁用本企业下的用户。~~~~ **鉴权方式：** jwt鉴权 **输出参数：** &lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(51, 51, 51)\&quot;&gt;无输出参数，成功返回空消息体，失败返回 [错误码](https://cloud.tencent.com/document/product/1095/43704) 和错误信息。&lt;/span&gt;<p/>
    * @param req ApiV1UsersUseridEnablePutRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1UsersUseridEnablePutResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1UsersUseridEnablePutResponse v1UsersUseridEnablePut(ApiV1UsersUseridEnablePutRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1UsersUseridEnablePut(req, null, builders);
    }
    /**
     * v1UsersUseridGet 获取用户详情（通过 userid 获取用户详情）[/v1/users/{userid} - GET]
     * <p><p/>
     * @param req ApiV1UsersUseridGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1UsersUseridGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1UsersUseridGetResponse v1UsersUseridGet(ApiV1UsersUseridGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/users/{userid}")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'userid' is set
            if (req.getUserid() == null) {
                throw new IllegalArgumentException("'userid' is required and must be specified");
            }
            

            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("userid", req.getUserid());
            // query 参数
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1UsersUseridGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1UsersUseridGet 获取用户详情（通过 userid 获取用户详情）[/v1/users/{userid} - GET]
    * <p><p/>
    * @param req ApiV1UsersUseridGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1UsersUseridGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1UsersUseridGetResponse v1UsersUseridGet(ApiV1UsersUseridGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1UsersUseridGet(req, null, builders);
    }
    /**
     * v1UsersUseridInviteActivatePut 发送用户激活邀请[/v1/users/{userid}/invite-activate - PUT]
     * <p>通过 userid 发送认证短信或邮件，邀请用户认证账号，用户确认后账号变为激活态。若使用手机号创建发送短信，使用邮箱创建发送邮件。 仅未激活的用户能够成功发送激活邀请。 每个手机号或邮箱一天只能发送一次邀请 <p/>
     * @param req ApiV1UsersUseridInviteActivatePutRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1UsersUseridInviteActivatePutResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1UsersUseridInviteActivatePutResponse v1UsersUseridInviteActivatePut(ApiV1UsersUseridInviteActivatePutRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/users/{userid}/invite-activate")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'userid' is set
            if (req.getUserid() == null) {
                throw new IllegalArgumentException("'userid' is required and must be specified");
            }
            

            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("userid", req.getUserid());
            // query 参数
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().put(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1UsersUseridInviteActivatePutResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1UsersUseridInviteActivatePut 发送用户激活邀请[/v1/users/{userid}/invite-activate - PUT]
    * <p>通过 userid 发送认证短信或邮件，邀请用户认证账号，用户确认后账号变为激活态。若使用手机号创建发送短信，使用邮箱创建发送邮件。 仅未激活的用户能够成功发送激活邀请。 每个手机号或邮箱一天只能发送一次邀请 <p/>
    * @param req ApiV1UsersUseridInviteActivatePutRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1UsersUseridInviteActivatePutResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1UsersUseridInviteActivatePutResponse v1UsersUseridInviteActivatePut(ApiV1UsersUseridInviteActivatePutRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1UsersUseridInviteActivatePut(req, null, builders);
    }
    /**
     * v1UsersUseridInviteAuthPut 用户安全验证[/v1/users/{userid}/invite-auth - PUT]
     * <p>●通过 userid 发送验证短信，邀请成员验证账号，成员确认后账号变为已认证状态。 ●仅已激活的用户能够成功发送验证短信。 ●每个手机号一天只能发送一次邀请验证。 <p/>
     * @param req ApiV1UsersUseridInviteAuthPutRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1UsersUseridInviteAuthPutResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1UsersUseridInviteAuthPutResponse v1UsersUseridInviteAuthPut(ApiV1UsersUseridInviteAuthPutRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/users/{userid}/invite-auth")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'userid' is set
            if (req.getUserid() == null) {
                throw new IllegalArgumentException("'userid' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("userid", req.getUserid());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().put(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1UsersUseridInviteAuthPutResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1UsersUseridInviteAuthPut 用户安全验证[/v1/users/{userid}/invite-auth - PUT]
    * <p>●通过 userid 发送验证短信，邀请成员验证账号，成员确认后账号变为已认证状态。 ●仅已激活的用户能够成功发送验证短信。 ●每个手机号一天只能发送一次邀请验证。 <p/>
    * @param req ApiV1UsersUseridInviteAuthPutRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1UsersUseridInviteAuthPutResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1UsersUseridInviteAuthPutResponse v1UsersUseridInviteAuthPut(ApiV1UsersUseridInviteAuthPutRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1UsersUseridInviteAuthPut(req, null, builders);
    }
    /**
     * v1UsersUseridPut 更新用户（通过 userid 更新用户）[/v1/users/{userid} - PUT]
     * <p><p/>
     * @param req ApiV1UsersUseridPutRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1UsersUseridPutResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1UsersUseridPutResponse v1UsersUseridPut(ApiV1UsersUseridPutRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/users/{userid}")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'userid' is set
            if (req.getUserid() == null) {
                throw new IllegalArgumentException("'userid' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("userid", req.getUserid());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().put(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1UsersUseridPutResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1UsersUseridPut 更新用户（通过 userid 更新用户）[/v1/users/{userid} - PUT]
    * <p><p/>
    * @param req ApiV1UsersUseridPutRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1UsersUseridPutResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1UsersUseridPutResponse v1UsersUseridPut(ApiV1UsersUseridPutRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1UsersUseridPut(req, null, builders);
    }
}

