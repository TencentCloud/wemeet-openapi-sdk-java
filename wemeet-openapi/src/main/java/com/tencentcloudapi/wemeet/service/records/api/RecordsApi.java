/*
 * 腾讯会议OpenAPI
 * SAAS版RESTFUL风格API
 *
 * The version of the OpenAPI document: v1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.tencentcloudapi.wemeet.service.records.api;

import com.tencentcloudapi.wemeet.core.Config;
import com.tencentcloudapi.wemeet.core.Constants;
import com.tencentcloudapi.wemeet.core.authenticator.AuthenticatorBuilder;
import com.tencentcloudapi.wemeet.core.xhttp.*;
import com.tencentcloudapi.wemeet.core.exception.*;
import com.tencentcloudapi.wemeet.service.records.model.*;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import java.io.File;


public class RecordsApi {

    private final Config config;

    public RecordsApi(Config config) {
        this.config = config;
    }

    public static class ApiV1AddressesGetRequest {
    
        /**
         * meetingRecordId 会议录制 ID。 (required)
         */
        private String meetingRecordId;

        /**
         * operatorId 操作者ID 必须与operator_id_type 同时提供 (optional)
         */
        private String operatorId;

        /**
         * operatorIdType 操作者ID的类型 3为rooms_id 必须与operator_id_type 同时提供 (optional)
         */
        private String operatorIdType;

        /**
         * userid 用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 (optional)
         */
        private String userid;

        /**
         * pageSize 分页size (optional)
         */
        private String pageSize;

        /**
         * page 分页page (optional)
         */
        private String page;

        /**
         * addressType  (optional, default to 0:公网地址 1:内网地址)
         */
        private String addressType;
        private Object body;

        private ApiV1AddressesGetRequest() {}

        private ApiV1AddressesGetRequest(Builder builder) {
            
            this.meetingRecordId = builder.meetingRecordId;
            

            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.userid = builder.userid;
            

            this.pageSize = builder.pageSize;
            

            this.page = builder.page;
            

            this.addressType = builder.addressType;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingRecordId 会议录制 ID。 (required)
             */
            private String meetingRecordId;
            

            /**
             * operatorId 操作者ID 必须与operator_id_type 同时提供 (optional)
             */
            private String operatorId;
            

            /**
             * operatorIdType 操作者ID的类型 3为rooms_id 必须与operator_id_type 同时提供 (optional)
             */
            private String operatorIdType;
            

            /**
             * userid 用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 (optional)
             */
            private String userid;
            

            /**
             * pageSize 分页size (optional)
             */
            private String pageSize;
            

            /**
             * page 分页page (optional)
             */
            private String page;
            

            /**
             * addressType  (optional, default to 0:公网地址 1:内网地址)
             */
            private String addressType;
            

            private Object body;

            /**
             */
            public Builder() {
            }
            
            /**
             * @param meetingRecordId 会议录制 ID。 (required)
             */
            public Builder meetingRecordId(String meetingRecordId) {
                this.meetingRecordId = meetingRecordId;
                return this;
            }
            
            
            /**
             * @param operatorId 操作者ID 必须与operator_id_type 同时提供 (optional)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 操作者ID的类型 3为rooms_id 必须与operator_id_type 同时提供 (optional)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
            
            /**
             * @param userid 用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 (optional)
             */
            public Builder userid(String userid) {
                this.userid = userid;
                return this;
            }
            
            
            /**
             * @param pageSize 分页size (optional)
             */
            public Builder pageSize(String pageSize) {
                this.pageSize = pageSize;
                return this;
            }
            
            
            /**
             * @param page 分页page (optional)
             */
            public Builder page(String page) {
                this.page = page;
                return this;
            }
            
            
            /**
             * @param addressType  (optional, default to 0:公网地址 1:内网地址)
             */
            public Builder addressType(String addressType) {
                this.addressType = addressType;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1AddressesGetRequest build() {
                return new ApiV1AddressesGetRequest(this);
            }
        }
        
        public String getMeetingRecordId() {
            return this.meetingRecordId;
        }
        

        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public String getUserid() {
            return this.userid;
        }
        

        public String getPageSize() {
            return this.pageSize;
        }
        

        public String getPage() {
            return this.page;
        }
        

        public String getAddressType() {
            return this.addressType;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1AddressesGetResponse extends ApiResponse {
        private final V1AddressesGet200Response data;
        public ApiV1AddressesGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1AddressesGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1AddressesGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1AddressesRecordFileIdGetRequest {
    
        /**
         * recordFileId  (required)
         */
        private String recordFileId;

        /**
         * operatorId 操作者ID，必须与operator_id_type同时出现。 (optional)
         */
        private String operatorId;

        /**
         * operatorIdType 操作者ID的类型 rooms_Id是3，必须与operator_id同时出现。 (optional)
         */
        private String operatorIdType;

        /**
         * userid 用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 (optional)
         */
        private String userid;

        /**
         * addressType  (optional, default to 0:公网地址，1:内网地址)
         */
        private String addressType;
        private Object body;

        private ApiV1AddressesRecordFileIdGetRequest() {}

        private ApiV1AddressesRecordFileIdGetRequest(Builder builder) {
            
            this.recordFileId = builder.recordFileId;
            

            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.userid = builder.userid;
            

            this.addressType = builder.addressType;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * recordFileId  (required)
             */
            private final String recordFileId;
            

            /**
             * operatorId 操作者ID，必须与operator_id_type同时出现。 (optional)
             */
            private String operatorId;
            

            /**
             * operatorIdType 操作者ID的类型 rooms_Id是3，必须与operator_id同时出现。 (optional)
             */
            private String operatorIdType;
            

            /**
             * userid 用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 (optional)
             */
            private String userid;
            

            /**
             * addressType  (optional, default to 0:公网地址，1:内网地址)
             */
            private String addressType;
            

            private Object body;

            /**
             * @param recordFileId 
             */
            public Builder(String recordFileId) {
                this.recordFileId = recordFileId;
            }
            
            
            /**
             * @param operatorId 操作者ID，必须与operator_id_type同时出现。 (optional)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 操作者ID的类型 rooms_Id是3，必须与operator_id同时出现。 (optional)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
            
            /**
             * @param userid 用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 (optional)
             */
            public Builder userid(String userid) {
                this.userid = userid;
                return this;
            }
            
            
            /**
             * @param addressType  (optional, default to 0:公网地址，1:内网地址)
             */
            public Builder addressType(String addressType) {
                this.addressType = addressType;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1AddressesRecordFileIdGetRequest build() {
                return new ApiV1AddressesRecordFileIdGetRequest(this);
            }
        }
        
        public String getRecordFileId() {
            return this.recordFileId;
        }
        

        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public String getUserid() {
            return this.userid;
        }
        

        public String getAddressType() {
            return this.addressType;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1AddressesRecordFileIdGetResponse extends ApiResponse {
        private final V1AddressesRecordFileIdGet200Response data;
        public ApiV1AddressesRecordFileIdGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1AddressesRecordFileIdGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1AddressesRecordFileIdGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1FilesRecordsUploadAllPostRequest {
    
        /**
         * operatorId  (required)
         */
        private String operatorId;

        /**
         * operatorIdType  (required)
         */
        private Integer operatorIdType;

        /**
         * fileName  (required)
         */
        private String fileName;

        /**
         * fileType  (required)
         */
        private String fileType;

        /**
         * fileSize  (required)
         */
        private Integer fileSize;

        /**
         * fileChecksum  (required)
         */
        private String fileChecksum;

        /**
         * fileContent  (required)
         */
        private File fileContent;

        /**
         * speakNumber  (required)
         */
        private Integer speakNumber;

        /**
         * aiRecord  (optional)
         */
        private Boolean aiRecord;

        private ApiV1FilesRecordsUploadAllPostRequest() {}

        private ApiV1FilesRecordsUploadAllPostRequest(Builder builder) {
            

            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.fileName = builder.fileName;
            

            this.fileType = builder.fileType;
            

            this.fileSize = builder.fileSize;
            

            this.fileChecksum = builder.fileChecksum;
            

            this.fileContent = builder.fileContent;
            

            this.speakNumber = builder.speakNumber;
            

            this.aiRecord = builder.aiRecord;
            
        }

        public static class Builder {
            

            /**
             * operatorId  (required)
             */
            private String operatorId;
            

            /**
             * operatorIdType  (required)
             */
            private Integer operatorIdType;
            

            /**
             * fileName  (required)
             */
            private String fileName;
            

            /**
             * fileType  (required)
             */
            private String fileType;
            

            /**
             * fileSize  (required)
             */
            private Integer fileSize;
            

            /**
             * fileChecksum  (required)
             */
            private String fileChecksum;
            

            /**
             * fileContent  (required)
             */
            private File fileContent;
            

            /**
             * speakNumber  (required)
             */
            private Integer speakNumber;
            

            /**
             * aiRecord  (optional)
             */
            private Boolean aiRecord;
            

            /**
             */
            public Builder() {
            }
            
            
            /**
             * @param operatorId  (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType  (required)
             */
            public Builder operatorIdType(Integer operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
            
            /**
             * @param fileName  (required)
             */
            public Builder fileName(String fileName) {
                this.fileName = fileName;
                return this;
            }
            
            
            /**
             * @param fileType  (required)
             */
            public Builder fileType(String fileType) {
                this.fileType = fileType;
                return this;
            }
            
            
            /**
             * @param fileSize  (required)
             */
            public Builder fileSize(Integer fileSize) {
                this.fileSize = fileSize;
                return this;
            }
            
            
            /**
             * @param fileChecksum  (required)
             */
            public Builder fileChecksum(String fileChecksum) {
                this.fileChecksum = fileChecksum;
                return this;
            }
            
            
            /**
             * @param fileContent  (required)
             */
            public Builder fileContent(File fileContent) {
                this.fileContent = fileContent;
                return this;
            }
            
            
            /**
             * @param speakNumber  (required)
             */
            public Builder speakNumber(Integer speakNumber) {
                this.speakNumber = speakNumber;
                return this;
            }
            
            
            /**
             * @param aiRecord  (optional)
             */
            public Builder aiRecord(Boolean aiRecord) {
                this.aiRecord = aiRecord;
                return this;
            }
            

            public ApiV1FilesRecordsUploadAllPostRequest build() {
                return new ApiV1FilesRecordsUploadAllPostRequest(this);
            }
        }
        

        public String getOperatorId() {
            return this.operatorId;
        }
        

        public Integer getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public String getFileName() {
            return this.fileName;
        }
        

        public String getFileType() {
            return this.fileType;
        }
        

        public Integer getFileSize() {
            return this.fileSize;
        }
        

        public String getFileChecksum() {
            return this.fileChecksum;
        }
        

        public File getFileContent() {
            return this.fileContent;
        }
        

        public Integer getSpeakNumber() {
            return this.speakNumber;
        }
        

        public Boolean getAiRecord() {
            return this.aiRecord;
        }
        
    }

    public static class ApiV1FilesRecordsUploadAllPostResponse extends ApiResponse {
        private final V1FilesRecordsUploadAllPost200Response data;
        public ApiV1FilesRecordsUploadAllPostResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1FilesRecordsUploadAllPost200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1FilesRecordsUploadAllPost200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1FilesRecordsUploadFinishPostRequest {
            private V1FilesRecordsUploadFinishPostRequest body;

        private ApiV1FilesRecordsUploadFinishPostRequest() {}

        private ApiV1FilesRecordsUploadFinishPostRequest(Builder builder) {
            
            this.body = builder.body;
        }

        public static class Builder {
            
            private V1FilesRecordsUploadFinishPostRequest body;

            /**
             */
            public Builder() {
            }
                        public Builder body(V1FilesRecordsUploadFinishPostRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1FilesRecordsUploadFinishPostRequest build() {
                return new ApiV1FilesRecordsUploadFinishPostRequest(this);
            }
        }
        
        public V1FilesRecordsUploadFinishPostRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1FilesRecordsUploadFinishPostResponse extends ApiResponse {
        private final V1FilesRecordsUploadAllPost200Response data;
        public ApiV1FilesRecordsUploadFinishPostResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1FilesRecordsUploadAllPost200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1FilesRecordsUploadAllPost200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1FilesRecordsUploadPartPostRequest {
    
        /**
         * operatorId String 操作者 ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
         */
        private String operatorId;

        /**
         * operatorIdType 操作人 ID 类型： 1：userid (required)
         */
        private Integer operatorIdType;

        /**
         * uploadId 上传事务 ID。 (required)
         */
        private String uploadId;

        /**
         * fileSize 文件大小（以字节为单位），需按预上传返回的 block_size 填写（最后一个文件块按照实际大小填写）。 (required)
         */
        private Integer fileSize;

        /**
         * fileSeq 文件块号，从1开始计数。最后一个文件块允许小于 block_size 的值。 (required)
         */
        private Integer fileSeq;

        /**
         * fileChecksum 文件校验和，文件内容 MD5 结果的十六进制表示。 (required)
         */
        private String fileChecksum;

        /**
         * fileContent 文件二进制内容。 (required)
         */
        private File fileContent;

        private ApiV1FilesRecordsUploadPartPostRequest() {}

        private ApiV1FilesRecordsUploadPartPostRequest(Builder builder) {
            

            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.uploadId = builder.uploadId;
            

            this.fileSize = builder.fileSize;
            

            this.fileSeq = builder.fileSeq;
            

            this.fileChecksum = builder.fileChecksum;
            

            this.fileContent = builder.fileContent;
            
        }

        public static class Builder {
            

            /**
             * operatorId String 操作者 ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
             */
            private String operatorId;
            

            /**
             * operatorIdType 操作人 ID 类型： 1：userid (required)
             */
            private Integer operatorIdType;
            

            /**
             * uploadId 上传事务 ID。 (required)
             */
            private String uploadId;
            

            /**
             * fileSize 文件大小（以字节为单位），需按预上传返回的 block_size 填写（最后一个文件块按照实际大小填写）。 (required)
             */
            private Integer fileSize;
            

            /**
             * fileSeq 文件块号，从1开始计数。最后一个文件块允许小于 block_size 的值。 (required)
             */
            private Integer fileSeq;
            

            /**
             * fileChecksum 文件校验和，文件内容 MD5 结果的十六进制表示。 (required)
             */
            private String fileChecksum;
            

            /**
             * fileContent 文件二进制内容。 (required)
             */
            private File fileContent;
            

            /**
             */
            public Builder() {
            }
            
            
            /**
             * @param operatorId String 操作者 ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 操作人 ID 类型： 1：userid (required)
             */
            public Builder operatorIdType(Integer operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
            
            /**
             * @param uploadId 上传事务 ID。 (required)
             */
            public Builder uploadId(String uploadId) {
                this.uploadId = uploadId;
                return this;
            }
            
            
            /**
             * @param fileSize 文件大小（以字节为单位），需按预上传返回的 block_size 填写（最后一个文件块按照实际大小填写）。 (required)
             */
            public Builder fileSize(Integer fileSize) {
                this.fileSize = fileSize;
                return this;
            }
            
            
            /**
             * @param fileSeq 文件块号，从1开始计数。最后一个文件块允许小于 block_size 的值。 (required)
             */
            public Builder fileSeq(Integer fileSeq) {
                this.fileSeq = fileSeq;
                return this;
            }
            
            
            /**
             * @param fileChecksum 文件校验和，文件内容 MD5 结果的十六进制表示。 (required)
             */
            public Builder fileChecksum(String fileChecksum) {
                this.fileChecksum = fileChecksum;
                return this;
            }
            
            
            /**
             * @param fileContent 文件二进制内容。 (required)
             */
            public Builder fileContent(File fileContent) {
                this.fileContent = fileContent;
                return this;
            }
            

            public ApiV1FilesRecordsUploadPartPostRequest build() {
                return new ApiV1FilesRecordsUploadPartPostRequest(this);
            }
        }
        

        public String getOperatorId() {
            return this.operatorId;
        }
        

        public Integer getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public String getUploadId() {
            return this.uploadId;
        }
        

        public Integer getFileSize() {
            return this.fileSize;
        }
        

        public Integer getFileSeq() {
            return this.fileSeq;
        }
        

        public String getFileChecksum() {
            return this.fileChecksum;
        }
        

        public File getFileContent() {
            return this.fileContent;
        }
        
    }

    public static class ApiV1FilesRecordsUploadPartPostResponse extends ApiResponse {
        private final Object data;
        public ApiV1FilesRecordsUploadPartPostResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1FilesRecordsUploadPreparePostRequest {
            private V1FilesRecordsUploadPreparePostRequest body;

        private ApiV1FilesRecordsUploadPreparePostRequest() {}

        private ApiV1FilesRecordsUploadPreparePostRequest(Builder builder) {
            
            this.body = builder.body;
        }

        public static class Builder {
            
            private V1FilesRecordsUploadPreparePostRequest body;

            /**
             */
            public Builder() {
            }
                        public Builder body(V1FilesRecordsUploadPreparePostRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1FilesRecordsUploadPreparePostRequest build() {
                return new ApiV1FilesRecordsUploadPreparePostRequest(this);
            }
        }
        
        public V1FilesRecordsUploadPreparePostRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1FilesRecordsUploadPreparePostResponse extends ApiResponse {
        private final V1FilesRecordsUploadPreparePost200Response data;
        public ApiV1FilesRecordsUploadPreparePostResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1FilesRecordsUploadPreparePost200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1FilesRecordsUploadPreparePost200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MetricsRecordsGetRequest {
    
        /**
         * meetingRecordId 会议录制 ID。 (required)
         */
        private String meetingRecordId;

        /**
         * startTime 查询起始时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (optional)
         */
        private String startTime;

        /**
         * endTime 查询结束时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (optional)
         */
        private String endTime;

        private ApiV1MetricsRecordsGetRequest() {}

        private ApiV1MetricsRecordsGetRequest(Builder builder) {
            
            this.meetingRecordId = builder.meetingRecordId;
            

            this.startTime = builder.startTime;
            

            this.endTime = builder.endTime;
            
        }

        public static class Builder {
            
            /**
             * meetingRecordId 会议录制 ID。 (required)
             */
            private String meetingRecordId;
            

            /**
             * startTime 查询起始时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (optional)
             */
            private String startTime;
            

            /**
             * endTime 查询结束时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (optional)
             */
            private String endTime;
            

            /**
             */
            public Builder() {
            }
            
            /**
             * @param meetingRecordId 会议录制 ID。 (required)
             */
            public Builder meetingRecordId(String meetingRecordId) {
                this.meetingRecordId = meetingRecordId;
                return this;
            }
            
            
            /**
             * @param startTime 查询起始时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (optional)
             */
            public Builder startTime(String startTime) {
                this.startTime = startTime;
                return this;
            }
            
            
            /**
             * @param endTime 查询结束时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (optional)
             */
            public Builder endTime(String endTime) {
                this.endTime = endTime;
                return this;
            }
            

            public ApiV1MetricsRecordsGetRequest build() {
                return new ApiV1MetricsRecordsGetRequest(this);
            }
        }
        
        public String getMeetingRecordId() {
            return this.meetingRecordId;
        }
        

        public String getStartTime() {
            return this.startTime;
        }
        

        public String getEndTime() {
            return this.endTime;
        }
        
    }

    public static class ApiV1MetricsRecordsGetResponse extends ApiResponse {
        private final V1MetricsRecordsGet200Response data;
        public ApiV1MetricsRecordsGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MetricsRecordsGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MetricsRecordsGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1RecordsAccessMeetingRecordIdDeleteRequest {
    
        /**
         * meetingRecordId 会议录制ID (required)
         */
        private String meetingRecordId;
        private V1RecordsAccessMeetingRecordIdDeleteRequest body;

        private ApiV1RecordsAccessMeetingRecordIdDeleteRequest() {}

        private ApiV1RecordsAccessMeetingRecordIdDeleteRequest(Builder builder) {
            
            this.meetingRecordId = builder.meetingRecordId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingRecordId 会议录制ID (required)
             */
            private final String meetingRecordId;
            

            private V1RecordsAccessMeetingRecordIdDeleteRequest body;

            /**
             * @param meetingRecordId 会议录制ID
             */
            public Builder(String meetingRecordId) {
                this.meetingRecordId = meetingRecordId;
            }
            
                        public Builder body(V1RecordsAccessMeetingRecordIdDeleteRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1RecordsAccessMeetingRecordIdDeleteRequest build() {
                return new ApiV1RecordsAccessMeetingRecordIdDeleteRequest(this);
            }
        }
        
        public String getMeetingRecordId() {
            return this.meetingRecordId;
        }
        

        public V1RecordsAccessMeetingRecordIdDeleteRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1RecordsAccessMeetingRecordIdDeleteResponse extends ApiResponse {
        private final Object data;
        public ApiV1RecordsAccessMeetingRecordIdDeleteResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1RecordsAccessMeetingRecordIdPostRequest {
    
        /**
         * meetingRecordId 会议录制ID (required)
         */
        private String meetingRecordId;
        private V1RecordsAccessMeetingRecordIdPostRequest body;

        private ApiV1RecordsAccessMeetingRecordIdPostRequest() {}

        private ApiV1RecordsAccessMeetingRecordIdPostRequest(Builder builder) {
            
            this.meetingRecordId = builder.meetingRecordId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingRecordId 会议录制ID (required)
             */
            private final String meetingRecordId;
            

            private V1RecordsAccessMeetingRecordIdPostRequest body;

            /**
             * @param meetingRecordId 会议录制ID
             */
            public Builder(String meetingRecordId) {
                this.meetingRecordId = meetingRecordId;
            }
            
                        public Builder body(V1RecordsAccessMeetingRecordIdPostRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1RecordsAccessMeetingRecordIdPostRequest build() {
                return new ApiV1RecordsAccessMeetingRecordIdPostRequest(this);
            }
        }
        
        public String getMeetingRecordId() {
            return this.meetingRecordId;
        }
        

        public V1RecordsAccessMeetingRecordIdPostRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1RecordsAccessMeetingRecordIdPostResponse extends ApiResponse {
        private final V1RecordsAccessMeetingRecordIdPost200Response data;
        public ApiV1RecordsAccessMeetingRecordIdPostResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1RecordsAccessMeetingRecordIdPost200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1RecordsAccessMeetingRecordIdPost200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1RecordsApprovalsMeetingRecordIdPutRequest {
    
        /**
         * meetingRecordId 会议录制 ID，列表查询接口返回的 meeting_record_id。 (required)
         */
        private String meetingRecordId;
        private V1RecordsApprovalsMeetingRecordIdPutRequest body;

        private ApiV1RecordsApprovalsMeetingRecordIdPutRequest() {}

        private ApiV1RecordsApprovalsMeetingRecordIdPutRequest(Builder builder) {
            
            this.meetingRecordId = builder.meetingRecordId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingRecordId 会议录制 ID，列表查询接口返回的 meeting_record_id。 (required)
             */
            private final String meetingRecordId;
            

            private V1RecordsApprovalsMeetingRecordIdPutRequest body;

            /**
             * @param meetingRecordId 会议录制 ID，列表查询接口返回的 meeting_record_id。
             */
            public Builder(String meetingRecordId) {
                this.meetingRecordId = meetingRecordId;
            }
            
                        public Builder body(V1RecordsApprovalsMeetingRecordIdPutRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1RecordsApprovalsMeetingRecordIdPutRequest build() {
                return new ApiV1RecordsApprovalsMeetingRecordIdPutRequest(this);
            }
        }
        
        public String getMeetingRecordId() {
            return this.meetingRecordId;
        }
        

        public V1RecordsApprovalsMeetingRecordIdPutRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1RecordsApprovalsMeetingRecordIdPutResponse extends ApiResponse {
        private final Object data;
        public ApiV1RecordsApprovalsMeetingRecordIdPutResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1RecordsDeleteRequest {
    
        /**
         * meetingRecordId 会议录制 ID。 (required)
         */
        private String meetingRecordId;

        /**
         * meetingId 会议 ID。 (optional)
         */
        private String meetingId;

        /**
         * operatorId 操作者ID，根据operator_id_type的值，使用不同的类型 (optional)
         */
        private String operatorId;

        /**
         * operatorIdType 操作者ID的类型，必须与operator_id同时出现 (optional)
         */
        private String operatorIdType;

        /**
         * userid 用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 (optional)
         */
        private String userid;
        private Object body;

        private ApiV1RecordsDeleteRequest() {}

        private ApiV1RecordsDeleteRequest(Builder builder) {
            
            this.meetingRecordId = builder.meetingRecordId;
            

            this.meetingId = builder.meetingId;
            

            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.userid = builder.userid;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingRecordId 会议录制 ID。 (required)
             */
            private String meetingRecordId;
            

            /**
             * meetingId 会议 ID。 (optional)
             */
            private String meetingId;
            

            /**
             * operatorId 操作者ID，根据operator_id_type的值，使用不同的类型 (optional)
             */
            private String operatorId;
            

            /**
             * operatorIdType 操作者ID的类型，必须与operator_id同时出现 (optional)
             */
            private String operatorIdType;
            

            /**
             * userid 用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 (optional)
             */
            private String userid;
            

            private Object body;

            /**
             */
            public Builder() {
            }
            
            /**
             * @param meetingRecordId 会议录制 ID。 (required)
             */
            public Builder meetingRecordId(String meetingRecordId) {
                this.meetingRecordId = meetingRecordId;
                return this;
            }
            
            
            /**
             * @param meetingId 会议 ID。 (optional)
             */
            public Builder meetingId(String meetingId) {
                this.meetingId = meetingId;
                return this;
            }
            
            
            /**
             * @param operatorId 操作者ID，根据operator_id_type的值，使用不同的类型 (optional)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 操作者ID的类型，必须与operator_id同时出现 (optional)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
            
            /**
             * @param userid 用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 (optional)
             */
            public Builder userid(String userid) {
                this.userid = userid;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1RecordsDeleteRequest build() {
                return new ApiV1RecordsDeleteRequest(this);
            }
        }
        
        public String getMeetingRecordId() {
            return this.meetingRecordId;
        }
        

        public String getMeetingId() {
            return this.meetingId;
        }
        

        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public String getUserid() {
            return this.userid;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1RecordsDeleteResponse extends ApiResponse {
        private final Object data;
        public ApiV1RecordsDeleteResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1RecordsEventsGetRequest {
    
        /**
         * meetingRecordId 会议录制 ID，列表接口返回的是 meeting_record_id。 (required)
         */
        private String meetingRecordId;

        /**
         * eventType 查询事件类型：1：下载，2：查看。 (required)
         */
        private String eventType;

        /**
         * pageSize 分页大小，默认值为20，最大为50。 (optional)
         */
        private String pageSize;

        /**
         * page 页码，从1开始，默认值为1。 (optional)
         */
        private String page;

        /**
         * startTime 查询起始时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (optional)
         */
        private String startTime;

        /**
         * endTime 查询结束时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (optional)
         */
        private String endTime;

        private ApiV1RecordsEventsGetRequest() {}

        private ApiV1RecordsEventsGetRequest(Builder builder) {
            
            this.meetingRecordId = builder.meetingRecordId;
            

            this.eventType = builder.eventType;
            

            this.pageSize = builder.pageSize;
            

            this.page = builder.page;
            

            this.startTime = builder.startTime;
            

            this.endTime = builder.endTime;
            
        }

        public static class Builder {
            
            /**
             * meetingRecordId 会议录制 ID，列表接口返回的是 meeting_record_id。 (required)
             */
            private String meetingRecordId;
            

            /**
             * eventType 查询事件类型：1：下载，2：查看。 (required)
             */
            private String eventType;
            

            /**
             * pageSize 分页大小，默认值为20，最大为50。 (optional)
             */
            private String pageSize;
            

            /**
             * page 页码，从1开始，默认值为1。 (optional)
             */
            private String page;
            

            /**
             * startTime 查询起始时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (optional)
             */
            private String startTime;
            

            /**
             * endTime 查询结束时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (optional)
             */
            private String endTime;
            

            /**
             */
            public Builder() {
            }
            
            /**
             * @param meetingRecordId 会议录制 ID，列表接口返回的是 meeting_record_id。 (required)
             */
            public Builder meetingRecordId(String meetingRecordId) {
                this.meetingRecordId = meetingRecordId;
                return this;
            }
            
            
            /**
             * @param eventType 查询事件类型：1：下载，2：查看。 (required)
             */
            public Builder eventType(String eventType) {
                this.eventType = eventType;
                return this;
            }
            
            
            /**
             * @param pageSize 分页大小，默认值为20，最大为50。 (optional)
             */
            public Builder pageSize(String pageSize) {
                this.pageSize = pageSize;
                return this;
            }
            
            
            /**
             * @param page 页码，从1开始，默认值为1。 (optional)
             */
            public Builder page(String page) {
                this.page = page;
                return this;
            }
            
            
            /**
             * @param startTime 查询起始时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (optional)
             */
            public Builder startTime(String startTime) {
                this.startTime = startTime;
                return this;
            }
            
            
            /**
             * @param endTime 查询结束时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (optional)
             */
            public Builder endTime(String endTime) {
                this.endTime = endTime;
                return this;
            }
            

            public ApiV1RecordsEventsGetRequest build() {
                return new ApiV1RecordsEventsGetRequest(this);
            }
        }
        
        public String getMeetingRecordId() {
            return this.meetingRecordId;
        }
        

        public String getEventType() {
            return this.eventType;
        }
        

        public String getPageSize() {
            return this.pageSize;
        }
        

        public String getPage() {
            return this.page;
        }
        

        public String getStartTime() {
            return this.startTime;
        }
        

        public String getEndTime() {
            return this.endTime;
        }
        
    }

    public static class ApiV1RecordsEventsGetResponse extends ApiResponse {
        private final V1RecordsEventsGet200Response data;
        public ApiV1RecordsEventsGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1RecordsEventsGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1RecordsEventsGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1RecordsGetRequest {
    
        /**
         * startTime 查询起始时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (required)
         */
        private String startTime;

        /**
         * endTime 查询结束时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (required)
         */
        private String endTime;

        /**
         * operatorId 操作者ID，必须与operator_id_type同时出现。 (optional)
         */
        private String operatorId;

        /**
         * operatorIdType 操作者ID的类型，必须与operator_id同时出现。 (optional)
         */
        private String operatorIdType;

        /**
         * userid 用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId），当会议 ID 和会议 code 均为空时，表示查询用户所有会议的录制列表。 (optional)
         */
        private String userid;

        /**
         * meetingId 会议的唯一 ID，不为空时优先根据会议 ID 查询。 (optional)
         */
        private String meetingId;

        /**
         * meetingCode 会议 code，当 meeting_id 为空且 meeting_code 不为空时根据会议 code 查询。 (optional)
         */
        private String meetingCode;

        /**
         * pageSize 分页大小，默认值为10，最大为20。 (optional)
         */
        private String pageSize;

        /**
         * page 页码，从1开始，默认值为1。 (optional)
         */
        private String page;

        /**
         * mediaSetType  (optional)
         */
        private String mediaSetType;
        private Object body;

        private ApiV1RecordsGetRequest() {}

        private ApiV1RecordsGetRequest(Builder builder) {
            
            this.startTime = builder.startTime;
            

            this.endTime = builder.endTime;
            

            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.userid = builder.userid;
            

            this.meetingId = builder.meetingId;
            

            this.meetingCode = builder.meetingCode;
            

            this.pageSize = builder.pageSize;
            

            this.page = builder.page;
            

            this.mediaSetType = builder.mediaSetType;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * startTime 查询起始时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (required)
             */
            private String startTime;
            

            /**
             * endTime 查询结束时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (required)
             */
            private String endTime;
            

            /**
             * operatorId 操作者ID，必须与operator_id_type同时出现。 (optional)
             */
            private String operatorId;
            

            /**
             * operatorIdType 操作者ID的类型，必须与operator_id同时出现。 (optional)
             */
            private String operatorIdType;
            

            /**
             * userid 用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId），当会议 ID 和会议 code 均为空时，表示查询用户所有会议的录制列表。 (optional)
             */
            private String userid;
            

            /**
             * meetingId 会议的唯一 ID，不为空时优先根据会议 ID 查询。 (optional)
             */
            private String meetingId;
            

            /**
             * meetingCode 会议 code，当 meeting_id 为空且 meeting_code 不为空时根据会议 code 查询。 (optional)
             */
            private String meetingCode;
            

            /**
             * pageSize 分页大小，默认值为10，最大为20。 (optional)
             */
            private String pageSize;
            

            /**
             * page 页码，从1开始，默认值为1。 (optional)
             */
            private String page;
            

            /**
             * mediaSetType  (optional)
             */
            private String mediaSetType;
            

            private Object body;

            /**
             */
            public Builder() {
            }
            
            /**
             * @param startTime 查询起始时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (required)
             */
            public Builder startTime(String startTime) {
                this.startTime = startTime;
                return this;
            }
            
            
            /**
             * @param endTime 查询结束时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (required)
             */
            public Builder endTime(String endTime) {
                this.endTime = endTime;
                return this;
            }
            
            
            /**
             * @param operatorId 操作者ID，必须与operator_id_type同时出现。 (optional)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 操作者ID的类型，必须与operator_id同时出现。 (optional)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
            
            /**
             * @param userid 用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId），当会议 ID 和会议 code 均为空时，表示查询用户所有会议的录制列表。 (optional)
             */
            public Builder userid(String userid) {
                this.userid = userid;
                return this;
            }
            
            
            /**
             * @param meetingId 会议的唯一 ID，不为空时优先根据会议 ID 查询。 (optional)
             */
            public Builder meetingId(String meetingId) {
                this.meetingId = meetingId;
                return this;
            }
            
            
            /**
             * @param meetingCode 会议 code，当 meeting_id 为空且 meeting_code 不为空时根据会议 code 查询。 (optional)
             */
            public Builder meetingCode(String meetingCode) {
                this.meetingCode = meetingCode;
                return this;
            }
            
            
            /**
             * @param pageSize 分页大小，默认值为10，最大为20。 (optional)
             */
            public Builder pageSize(String pageSize) {
                this.pageSize = pageSize;
                return this;
            }
            
            
            /**
             * @param page 页码，从1开始，默认值为1。 (optional)
             */
            public Builder page(String page) {
                this.page = page;
                return this;
            }
            
            
            /**
             * @param mediaSetType  (optional)
             */
            public Builder mediaSetType(String mediaSetType) {
                this.mediaSetType = mediaSetType;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1RecordsGetRequest build() {
                return new ApiV1RecordsGetRequest(this);
            }
        }
        
        public String getStartTime() {
            return this.startTime;
        }
        

        public String getEndTime() {
            return this.endTime;
        }
        

        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public String getUserid() {
            return this.userid;
        }
        

        public String getMeetingId() {
            return this.meetingId;
        }
        

        public String getMeetingCode() {
            return this.meetingCode;
        }
        

        public String getPageSize() {
            return this.pageSize;
        }
        

        public String getPage() {
            return this.page;
        }
        

        public String getMediaSetType() {
            return this.mediaSetType;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1RecordsGetResponse extends ApiResponse {
        private final V1RecordsGet200Response data;
        public ApiV1RecordsGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1RecordsGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1RecordsGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1RecordsRecordFileIdDeleteRequest {
    
        /**
         * recordFileId 录制文件 ID。 (required)
         */
        private String recordFileId;

        /**
         * meetingId 会议 ID。 (optional)
         */
        private String meetingId;

        /**
         * operatorId 操作者ID，根据operator_id_type的值，使用不同的类型，必须与operator_id_type同时出现 (optional)
         */
        private String operatorId;

        /**
         * operatorIdType 操作者ID的类型，必须与operator_id同时出现 (optional)
         */
        private String operatorIdType;

        /**
         * userid 用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 (optional)
         */
        private String userid;
        private Object body;

        private ApiV1RecordsRecordFileIdDeleteRequest() {}

        private ApiV1RecordsRecordFileIdDeleteRequest(Builder builder) {
            
            this.recordFileId = builder.recordFileId;
            

            this.meetingId = builder.meetingId;
            

            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.userid = builder.userid;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * recordFileId 录制文件 ID。 (required)
             */
            private final String recordFileId;
            

            /**
             * meetingId 会议 ID。 (optional)
             */
            private String meetingId;
            

            /**
             * operatorId 操作者ID，根据operator_id_type的值，使用不同的类型，必须与operator_id_type同时出现 (optional)
             */
            private String operatorId;
            

            /**
             * operatorIdType 操作者ID的类型，必须与operator_id同时出现 (optional)
             */
            private String operatorIdType;
            

            /**
             * userid 用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 (optional)
             */
            private String userid;
            

            private Object body;

            /**
             * @param recordFileId 录制文件 ID。
             */
            public Builder(String recordFileId) {
                this.recordFileId = recordFileId;
            }
            
            
            /**
             * @param meetingId 会议 ID。 (optional)
             */
            public Builder meetingId(String meetingId) {
                this.meetingId = meetingId;
                return this;
            }
            
            
            /**
             * @param operatorId 操作者ID，根据operator_id_type的值，使用不同的类型，必须与operator_id_type同时出现 (optional)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 操作者ID的类型，必须与operator_id同时出现 (optional)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
            
            /**
             * @param userid 用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 (optional)
             */
            public Builder userid(String userid) {
                this.userid = userid;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1RecordsRecordFileIdDeleteRequest build() {
                return new ApiV1RecordsRecordFileIdDeleteRequest(this);
            }
        }
        
        public String getRecordFileId() {
            return this.recordFileId;
        }
        

        public String getMeetingId() {
            return this.meetingId;
        }
        

        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public String getUserid() {
            return this.userid;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1RecordsRecordFileIdDeleteResponse extends ApiResponse {
        private final Object data;
        public ApiV1RecordsRecordFileIdDeleteResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1RecordsSettingsMeetingRecordIdGetRequest {
    
        /**
         * meetingRecordId 会议录制ID (required)
         */
        private String meetingRecordId;

        /**
         * operatorId 操作人ID,录制管理者、企业超级管理员或有企业录制管理权限的用 (required)
         */
        private String operatorId;

        /**
         * operatorIdType 操作人ID 类型 1-userid，2-openid,3-rooms_id (required)
         */
        private String operatorIdType;
        private Object body;

        private ApiV1RecordsSettingsMeetingRecordIdGetRequest() {}

        private ApiV1RecordsSettingsMeetingRecordIdGetRequest(Builder builder) {
            
            this.meetingRecordId = builder.meetingRecordId;
            

            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingRecordId 会议录制ID (required)
             */
            private final String meetingRecordId;
            

            /**
             * operatorId 操作人ID,录制管理者、企业超级管理员或有企业录制管理权限的用 (required)
             */
            private String operatorId;
            

            /**
             * operatorIdType 操作人ID 类型 1-userid，2-openid,3-rooms_id (required)
             */
            private String operatorIdType;
            

            private Object body;

            /**
             * @param meetingRecordId 会议录制ID
             */
            public Builder(String meetingRecordId) {
                this.meetingRecordId = meetingRecordId;
            }
            
            
            /**
             * @param operatorId 操作人ID,录制管理者、企业超级管理员或有企业录制管理权限的用 (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 操作人ID 类型 1-userid，2-openid,3-rooms_id (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1RecordsSettingsMeetingRecordIdGetRequest build() {
                return new ApiV1RecordsSettingsMeetingRecordIdGetRequest(this);
            }
        }
        
        public String getMeetingRecordId() {
            return this.meetingRecordId;
        }
        

        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1RecordsSettingsMeetingRecordIdGetResponse extends ApiResponse {
        private final V1RecordsSettingsMeetingRecordIdGet200Response data;
        public ApiV1RecordsSettingsMeetingRecordIdGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1RecordsSettingsMeetingRecordIdGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1RecordsSettingsMeetingRecordIdGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1RecordsSettingsMeetingRecordIdPutRequest {
    
        /**
         * meetingRecordId 会议录制 ID。 (required)
         */
        private String meetingRecordId;
        private V1RecordsSettingsMeetingRecordIdPutRequest body;

        private ApiV1RecordsSettingsMeetingRecordIdPutRequest() {}

        private ApiV1RecordsSettingsMeetingRecordIdPutRequest(Builder builder) {
            
            this.meetingRecordId = builder.meetingRecordId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingRecordId 会议录制 ID。 (required)
             */
            private final String meetingRecordId;
            

            private V1RecordsSettingsMeetingRecordIdPutRequest body;

            /**
             * @param meetingRecordId 会议录制 ID。
             */
            public Builder(String meetingRecordId) {
                this.meetingRecordId = meetingRecordId;
            }
            
                        public Builder body(V1RecordsSettingsMeetingRecordIdPutRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1RecordsSettingsMeetingRecordIdPutRequest build() {
                return new ApiV1RecordsSettingsMeetingRecordIdPutRequest(this);
            }
        }
        
        public String getMeetingRecordId() {
            return this.meetingRecordId;
        }
        

        public V1RecordsSettingsMeetingRecordIdPutRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1RecordsSettingsMeetingRecordIdPutResponse extends ApiResponse {
        private final Object data;
        public ApiV1RecordsSettingsMeetingRecordIdPutResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1RecordsTranscriptsDetailsGetRequest {
    
        /**
         * recordFileId 录制id (required)
         */
        private String recordFileId;

        /**
         * operatorId 操作者ID。operator_id 必须与 operator_id_type 配合使用。根据operator_id_type的值，operator_id 代表不同类型。 (required)
         */
        private String operatorId;

        /**
         * operatorIdType 操作者ID的类型：  1. 企业用户userid 2：open_id 3. rooms设备rooms_id (required)
         */
        private String operatorIdType;

        /**
         * meetingId 会议id (optional)
         */
        private String meetingId;

        /**
         * pid 查询的起始段落 ID。获取 pid 后（含）的段落，默认从0开始。 (optional)
         */
        private String pid;

        /**
         * limit 查询的段落数，默认查询全量数据 (optional)
         */
        private String limit;

        /**
         * transcriptsType 转写类型，默认是0。 0：原文版 1：智能优化版 (optional)
         */
        private String transcriptsType;
        private Object body;

        private ApiV1RecordsTranscriptsDetailsGetRequest() {}

        private ApiV1RecordsTranscriptsDetailsGetRequest(Builder builder) {
            
            this.recordFileId = builder.recordFileId;
            

            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.meetingId = builder.meetingId;
            

            this.pid = builder.pid;
            

            this.limit = builder.limit;
            

            this.transcriptsType = builder.transcriptsType;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * recordFileId 录制id (required)
             */
            private String recordFileId;
            

            /**
             * operatorId 操作者ID。operator_id 必须与 operator_id_type 配合使用。根据operator_id_type的值，operator_id 代表不同类型。 (required)
             */
            private String operatorId;
            

            /**
             * operatorIdType 操作者ID的类型：  1. 企业用户userid 2：open_id 3. rooms设备rooms_id (required)
             */
            private String operatorIdType;
            

            /**
             * meetingId 会议id (optional)
             */
            private String meetingId;
            

            /**
             * pid 查询的起始段落 ID。获取 pid 后（含）的段落，默认从0开始。 (optional)
             */
            private String pid;
            

            /**
             * limit 查询的段落数，默认查询全量数据 (optional)
             */
            private String limit;
            

            /**
             * transcriptsType 转写类型，默认是0。 0：原文版 1：智能优化版 (optional)
             */
            private String transcriptsType;
            

            private Object body;

            /**
             */
            public Builder() {
            }
            
            /**
             * @param recordFileId 录制id (required)
             */
            public Builder recordFileId(String recordFileId) {
                this.recordFileId = recordFileId;
                return this;
            }
            
            
            /**
             * @param operatorId 操作者ID。operator_id 必须与 operator_id_type 配合使用。根据operator_id_type的值，operator_id 代表不同类型。 (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 操作者ID的类型：  1. 企业用户userid 2：open_id 3. rooms设备rooms_id (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
            
            /**
             * @param meetingId 会议id (optional)
             */
            public Builder meetingId(String meetingId) {
                this.meetingId = meetingId;
                return this;
            }
            
            
            /**
             * @param pid 查询的起始段落 ID。获取 pid 后（含）的段落，默认从0开始。 (optional)
             */
            public Builder pid(String pid) {
                this.pid = pid;
                return this;
            }
            
            
            /**
             * @param limit 查询的段落数，默认查询全量数据 (optional)
             */
            public Builder limit(String limit) {
                this.limit = limit;
                return this;
            }
            
            
            /**
             * @param transcriptsType 转写类型，默认是0。 0：原文版 1：智能优化版 (optional)
             */
            public Builder transcriptsType(String transcriptsType) {
                this.transcriptsType = transcriptsType;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1RecordsTranscriptsDetailsGetRequest build() {
                return new ApiV1RecordsTranscriptsDetailsGetRequest(this);
            }
        }
        
        public String getRecordFileId() {
            return this.recordFileId;
        }
        

        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public String getMeetingId() {
            return this.meetingId;
        }
        

        public String getPid() {
            return this.pid;
        }
        

        public String getLimit() {
            return this.limit;
        }
        

        public String getTranscriptsType() {
            return this.transcriptsType;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1RecordsTranscriptsDetailsGetResponse extends ApiResponse {
        private final V1RecordsTranscriptsDetailsGet200Response data;
        public ApiV1RecordsTranscriptsDetailsGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1RecordsTranscriptsDetailsGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1RecordsTranscriptsDetailsGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1RecordsTranscriptsParagraphsGetRequest {
    
        /**
         * recordFileId 录制文件 ID。 (required)
         */
        private String recordFileId;

        /**
         * operatorIdType 操作者ID的类型：  1. 企业用户userid 2：open_id 3. rooms设备rooms_id (required)
         */
        private String operatorIdType;

        /**
         * operatorId 操作者ID。operator_id 必须与 operator_id_type 配合使用。根据operator_id_type的值，operator_id 代表不同类型。 (required)
         */
        private String operatorId;

        /**
         * meetingId 会议 ID。 (optional)
         */
        private String meetingId;
        private Object body;

        private ApiV1RecordsTranscriptsParagraphsGetRequest() {}

        private ApiV1RecordsTranscriptsParagraphsGetRequest(Builder builder) {
            
            this.recordFileId = builder.recordFileId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.operatorId = builder.operatorId;
            

            this.meetingId = builder.meetingId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * recordFileId 录制文件 ID。 (required)
             */
            private String recordFileId;
            

            /**
             * operatorIdType 操作者ID的类型：  1. 企业用户userid 2：open_id 3. rooms设备rooms_id (required)
             */
            private String operatorIdType;
            

            /**
             * operatorId 操作者ID。operator_id 必须与 operator_id_type 配合使用。根据operator_id_type的值，operator_id 代表不同类型。 (required)
             */
            private String operatorId;
            

            /**
             * meetingId 会议 ID。 (optional)
             */
            private String meetingId;
            

            private Object body;

            /**
             */
            public Builder() {
            }
            
            /**
             * @param recordFileId 录制文件 ID。 (required)
             */
            public Builder recordFileId(String recordFileId) {
                this.recordFileId = recordFileId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 操作者ID的类型：  1. 企业用户userid 2：open_id 3. rooms设备rooms_id (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
            
            /**
             * @param operatorId 操作者ID。operator_id 必须与 operator_id_type 配合使用。根据operator_id_type的值，operator_id 代表不同类型。 (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param meetingId 会议 ID。 (optional)
             */
            public Builder meetingId(String meetingId) {
                this.meetingId = meetingId;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1RecordsTranscriptsParagraphsGetRequest build() {
                return new ApiV1RecordsTranscriptsParagraphsGetRequest(this);
            }
        }
        
        public String getRecordFileId() {
            return this.recordFileId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getMeetingId() {
            return this.meetingId;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1RecordsTranscriptsParagraphsGetResponse extends ApiResponse {
        private final V1RecordsTranscriptsParagraphsGet200Response data;
        public ApiV1RecordsTranscriptsParagraphsGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1RecordsTranscriptsParagraphsGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1RecordsTranscriptsParagraphsGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1RecordsTranscriptsSearchGetRequest {
    
        /**
         * recordFileId 录制文件id (required)
         */
        private String recordFileId;

        /**
         * operatorId 用户名 (required)
         */
        private String operatorId;

        /**
         * operatorIdType id类型: 1: 常规用户 2：open_id 3:rooms (required)
         */
        private String operatorIdType;

        /**
         * text 搜索的文本, 如果是中文, 需要urlencode一下 (required)
         */
        private String text;

        /**
         * meetingId 会议ID (optional)
         */
        private String meetingId;

        /**
         * transcriptsType 转写类型，默认是0。 0：原文版 1：智能优化版 (optional, default to 0)
         */
        private String transcriptsType;
        private Object body;

        private ApiV1RecordsTranscriptsSearchGetRequest() {}

        private ApiV1RecordsTranscriptsSearchGetRequest(Builder builder) {
            
            this.recordFileId = builder.recordFileId;
            

            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.text = builder.text;
            

            this.meetingId = builder.meetingId;
            

            this.transcriptsType = builder.transcriptsType;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * recordFileId 录制文件id (required)
             */
            private String recordFileId;
            

            /**
             * operatorId 用户名 (required)
             */
            private String operatorId;
            

            /**
             * operatorIdType id类型: 1: 常规用户 2：open_id 3:rooms (required)
             */
            private String operatorIdType;
            

            /**
             * text 搜索的文本, 如果是中文, 需要urlencode一下 (required)
             */
            private String text;
            

            /**
             * meetingId 会议ID (optional)
             */
            private String meetingId;
            

            /**
             * transcriptsType 转写类型，默认是0。 0：原文版 1：智能优化版 (optional, default to 0)
             */
            private String transcriptsType;
            

            private Object body;

            /**
             */
            public Builder() {
            }
            
            /**
             * @param recordFileId 录制文件id (required)
             */
            public Builder recordFileId(String recordFileId) {
                this.recordFileId = recordFileId;
                return this;
            }
            
            
            /**
             * @param operatorId 用户名 (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType id类型: 1: 常规用户 2：open_id 3:rooms (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
            
            /**
             * @param text 搜索的文本, 如果是中文, 需要urlencode一下 (required)
             */
            public Builder text(String text) {
                this.text = text;
                return this;
            }
            
            
            /**
             * @param meetingId 会议ID (optional)
             */
            public Builder meetingId(String meetingId) {
                this.meetingId = meetingId;
                return this;
            }
            
            
            /**
             * @param transcriptsType 转写类型，默认是0。 0：原文版 1：智能优化版 (optional, default to 0)
             */
            public Builder transcriptsType(String transcriptsType) {
                this.transcriptsType = transcriptsType;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1RecordsTranscriptsSearchGetRequest build() {
                return new ApiV1RecordsTranscriptsSearchGetRequest(this);
            }
        }
        
        public String getRecordFileId() {
            return this.recordFileId;
        }
        

        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public String getText() {
            return this.text;
        }
        

        public String getMeetingId() {
            return this.meetingId;
        }
        

        public String getTranscriptsType() {
            return this.transcriptsType;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1RecordsTranscriptsSearchGetResponse extends ApiResponse {
        private final V1RecordsTranscriptsSearchGet200Response data;
        public ApiV1RecordsTranscriptsSearchGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1RecordsTranscriptsSearchGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1RecordsTranscriptsSearchGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1RecordsTransferRecordingPutRequest {
    
        /**
         * meetingId 会议ID (required)
         */
        private String meetingId;

        /**
         * meetingRecordId 会议录制ID (required)
         */
        private String meetingRecordId;
        private V1RecordsTransferRecordingPutRequest body;

        private ApiV1RecordsTransferRecordingPutRequest() {}

        private ApiV1RecordsTransferRecordingPutRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.meetingRecordId = builder.meetingRecordId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId 会议ID (required)
             */
            private String meetingId;
            

            /**
             * meetingRecordId 会议录制ID (required)
             */
            private String meetingRecordId;
            

            private V1RecordsTransferRecordingPutRequest body;

            /**
             */
            public Builder() {
            }
            
            /**
             * @param meetingId 会议ID (required)
             */
            public Builder meetingId(String meetingId) {
                this.meetingId = meetingId;
                return this;
            }
            
            
            /**
             * @param meetingRecordId 会议录制ID (required)
             */
            public Builder meetingRecordId(String meetingRecordId) {
                this.meetingRecordId = meetingRecordId;
                return this;
            }
            
                        public Builder body(V1RecordsTransferRecordingPutRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1RecordsTransferRecordingPutRequest build() {
                return new ApiV1RecordsTransferRecordingPutRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public String getMeetingRecordId() {
            return this.meetingRecordId;
        }
        

        public V1RecordsTransferRecordingPutRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1RecordsTransferRecordingPutResponse extends ApiResponse {
        private final Object data;
        public ApiV1RecordsTransferRecordingPutResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1RecordsViewDetailsGetRequest {
    
        /**
         * recordFileId 录制文件 ID。 (required)
         */
        private String recordFileId;

        /**
         * operatorIdType 操作者 ID 的类型： 1：userid 2：open_id (required)
         */
        private String operatorIdType;

        /**
         * operatorId 操作者 ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
         */
        private String operatorId;

        /**
         * pageSize 分页大小，默认20，最大50 (optional)
         */
        private String pageSize;

        /**
         * page 页码，从1开始，默认1 (optional)
         */
        private String page;

        /**
         * startTime 查询起始时间戳，UNIX 时间戳（单位毫秒）。 说明：仅存储最近31天的数据，默认展示最近31天的数据。 (optional)
         */
        private String startTime;

        /**
         * endTime 查询结束时间戳，UNIX 时间戳（单位毫秒）。 说明：仅存储最近31天的数据，默认展示最近31天的数据 (optional)
         */
        private String endTime;
        private Object body;

        private ApiV1RecordsViewDetailsGetRequest() {}

        private ApiV1RecordsViewDetailsGetRequest(Builder builder) {
            
            this.recordFileId = builder.recordFileId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.operatorId = builder.operatorId;
            

            this.pageSize = builder.pageSize;
            

            this.page = builder.page;
            

            this.startTime = builder.startTime;
            

            this.endTime = builder.endTime;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * recordFileId 录制文件 ID。 (required)
             */
            private String recordFileId;
            

            /**
             * operatorIdType 操作者 ID 的类型： 1：userid 2：open_id (required)
             */
            private String operatorIdType;
            

            /**
             * operatorId 操作者 ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
             */
            private String operatorId;
            

            /**
             * pageSize 分页大小，默认20，最大50 (optional)
             */
            private String pageSize;
            

            /**
             * page 页码，从1开始，默认1 (optional)
             */
            private String page;
            

            /**
             * startTime 查询起始时间戳，UNIX 时间戳（单位毫秒）。 说明：仅存储最近31天的数据，默认展示最近31天的数据。 (optional)
             */
            private String startTime;
            

            /**
             * endTime 查询结束时间戳，UNIX 时间戳（单位毫秒）。 说明：仅存储最近31天的数据，默认展示最近31天的数据 (optional)
             */
            private String endTime;
            

            private Object body;

            /**
             */
            public Builder() {
            }
            
            /**
             * @param recordFileId 录制文件 ID。 (required)
             */
            public Builder recordFileId(String recordFileId) {
                this.recordFileId = recordFileId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 操作者 ID 的类型： 1：userid 2：open_id (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
            
            /**
             * @param operatorId 操作者 ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param pageSize 分页大小，默认20，最大50 (optional)
             */
            public Builder pageSize(String pageSize) {
                this.pageSize = pageSize;
                return this;
            }
            
            
            /**
             * @param page 页码，从1开始，默认1 (optional)
             */
            public Builder page(String page) {
                this.page = page;
                return this;
            }
            
            
            /**
             * @param startTime 查询起始时间戳，UNIX 时间戳（单位毫秒）。 说明：仅存储最近31天的数据，默认展示最近31天的数据。 (optional)
             */
            public Builder startTime(String startTime) {
                this.startTime = startTime;
                return this;
            }
            
            
            /**
             * @param endTime 查询结束时间戳，UNIX 时间戳（单位毫秒）。 说明：仅存储最近31天的数据，默认展示最近31天的数据 (optional)
             */
            public Builder endTime(String endTime) {
                this.endTime = endTime;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1RecordsViewDetailsGetRequest build() {
                return new ApiV1RecordsViewDetailsGetRequest(this);
            }
        }
        
        public String getRecordFileId() {
            return this.recordFileId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getPageSize() {
            return this.pageSize;
        }
        

        public String getPage() {
            return this.page;
        }
        

        public String getStartTime() {
            return this.startTime;
        }
        

        public String getEndTime() {
            return this.endTime;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1RecordsViewDetailsGetResponse extends ApiResponse {
        private final V1RecordsViewDetailsGet200Response data;
        public ApiV1RecordsViewDetailsGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1RecordsViewDetailsGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1RecordsViewDetailsGet200Response getData() {
            return this.data;
        }
    }

    /**
     * v1AddressesGet 查询会议录制地址[/v1/addresses - GET]
     * <p>**描述：**  * 查询会议录制地址，可获取会议云录制的播放地址和下载地址。 * 企业 secret 鉴权用户可获取该用户所属企业下的会议录制地址，OAuth2.0 鉴权用户只能获取该企业下 OAuth2.0 应用的会议录制地址。 * 当您想实时监测会议录制相关状况时，您可以通过订阅 [录制管理](https://cloud.tencent.com/document/product/1095/53226) 中的相关事件，接收事件通知。 * 当前同一场会议的不同录制文件共用分享链接。<p/>
     * @param req ApiV1AddressesGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1AddressesGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1AddressesGetResponse v1AddressesGet(ApiV1AddressesGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/addresses")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingRecordId' is set
            if (req.getMeetingRecordId() == null) {
                throw new IllegalArgumentException("'meetingRecordId' is required and must be specified");
            }
            

            

            

            

            

            

            

            
            // path 参数
            // query 参数
            if (req.getMeetingRecordId() != null) {
                apiReq.getQueryParams().set("meeting_record_id", req.getMeetingRecordId());
            }
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getUserid() != null) {
                apiReq.getQueryParams().set("userid", req.getUserid());
            }
            if (req.getPageSize() != null) {
                apiReq.getQueryParams().set("page_size", req.getPageSize());
            }
            if (req.getPage() != null) {
                apiReq.getQueryParams().set("page", req.getPage());
            }
            if (req.getAddressType() != null) {
                apiReq.getQueryParams().set("address_type", req.getAddressType());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1AddressesGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1AddressesGet 查询会议录制地址[/v1/addresses - GET]
    * <p>**描述：**  * 查询会议录制地址，可获取会议云录制的播放地址和下载地址。 * 企业 secret 鉴权用户可获取该用户所属企业下的会议录制地址，OAuth2.0 鉴权用户只能获取该企业下 OAuth2.0 应用的会议录制地址。 * 当您想实时监测会议录制相关状况时，您可以通过订阅 [录制管理](https://cloud.tencent.com/document/product/1095/53226) 中的相关事件，接收事件通知。 * 当前同一场会议的不同录制文件共用分享链接。<p/>
    * @param req ApiV1AddressesGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1AddressesGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1AddressesGetResponse v1AddressesGet(ApiV1AddressesGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1AddressesGet(req, null, builders);
    }
    /**
     * v1AddressesRecordFileIdGet 查询单个录制详情（文件、转写、纪要）[/v1/addresses/{record_file_id} - GET]
     * <p>查询单个云录制的详情信息，包括录制文件和会议纪要，并可获取播放地址和下载地址。企业 secert 鉴权用户可获取该用户所属企业下的单个录制列表，OAuth2.0 鉴权用户只能获取该企业下 OAuth2.0 应用的单个录制列表。<p/>
     * @param req ApiV1AddressesRecordFileIdGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1AddressesRecordFileIdGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1AddressesRecordFileIdGetResponse v1AddressesRecordFileIdGet(ApiV1AddressesRecordFileIdGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/addresses/{record_file_id}")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'recordFileId' is set
            if (req.getRecordFileId() == null) {
                throw new IllegalArgumentException("'recordFileId' is required and must be specified");
            }
            

            

            

            

            

            
            // path 参数
            apiReq.getPathParams().set("record_file_id", req.getRecordFileId());
            // query 参数
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getUserid() != null) {
                apiReq.getQueryParams().set("userid", req.getUserid());
            }
            if (req.getAddressType() != null) {
                apiReq.getQueryParams().set("address_type", req.getAddressType());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1AddressesRecordFileIdGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1AddressesRecordFileIdGet 查询单个录制详情（文件、转写、纪要）[/v1/addresses/{record_file_id} - GET]
    * <p>查询单个云录制的详情信息，包括录制文件和会议纪要，并可获取播放地址和下载地址。企业 secert 鉴权用户可获取该用户所属企业下的单个录制列表，OAuth2.0 鉴权用户只能获取该企业下 OAuth2.0 应用的单个录制列表。<p/>
    * @param req ApiV1AddressesRecordFileIdGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1AddressesRecordFileIdGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1AddressesRecordFileIdGetResponse v1AddressesRecordFileIdGet(ApiV1AddressesRecordFileIdGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1AddressesRecordFileIdGet(req, null, builders);
    }
    /**
     * v1FilesRecordsUploadAllPost 上传录制文件[/v1/files/records/upload-all - POST]
     * <p><p/>
     * @param req ApiV1FilesRecordsUploadAllPostRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1FilesRecordsUploadAllPostResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1FilesRecordsUploadAllPostResponse v1FilesRecordsUploadAllPost(ApiV1FilesRecordsUploadAllPostRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            // 构造from-data 表单数据
            MultipartBody.Builder builder = new MultipartBody.Builder()
                .setType(MultipartBody.FORM);
            
            // 封装表单字段
            builder.addFormDataPart("operator_id", String.valueOf(req.getOperatorId()));
            
            // 封装表单字段
            builder.addFormDataPart("operator_id_type", String.valueOf(req.getOperatorIdType()));
            
            // 封装表单字段
            builder.addFormDataPart("file_name", String.valueOf(req.getFileName()));
            
            // 封装表单字段
            builder.addFormDataPart("file_type", String.valueOf(req.getFileType()));
            
            // 封装表单字段
            builder.addFormDataPart("file_size", String.valueOf(req.getFileSize()));
            
            // 封装表单字段
            builder.addFormDataPart("file_checksum", String.valueOf(req.getFileChecksum()));
                        
            // 添加文件到FormData
            builder.addFormDataPart("file_content", req.getFileContent().getName(),
                RequestBody.create(MediaType.parse("application/octet-stream"),req.getFileContent()));
            
            // 封装表单字段
            builder.addFormDataPart("speak_number", String.valueOf(req.getSpeakNumber()));
            
            // 封装表单字段
            builder.addFormDataPart("ai_record", String.valueOf(req.getAiRecord()));
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/files/records/upload-all")
                    .body(builder.build())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();


            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            

            // verify the required parameter 'fileName' is set
            if (req.getFileName() == null) {
                throw new IllegalArgumentException("'fileName' is required and must be specified");
            }
            

            // verify the required parameter 'fileType' is set
            if (req.getFileType() == null) {
                throw new IllegalArgumentException("'fileType' is required and must be specified");
            }
            

            // verify the required parameter 'fileSize' is set
            if (req.getFileSize() == null) {
                throw new IllegalArgumentException("'fileSize' is required and must be specified");
            }
            

            // verify the required parameter 'fileChecksum' is set
            if (req.getFileChecksum() == null) {
                throw new IllegalArgumentException("'fileChecksum' is required and must be specified");
            }
            

            // verify the required parameter 'fileContent' is set
            if (req.getFileContent() == null) {
                throw new IllegalArgumentException("'fileContent' is required and must be specified");
            }
            

            // verify the required parameter 'speakNumber' is set
            if (req.getSpeakNumber() == null) {
                throw new IllegalArgumentException("'speakNumber' is required and must be specified");
            }
            

            
            // path 参数
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().post(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1FilesRecordsUploadAllPostResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1FilesRecordsUploadAllPost 上传录制文件[/v1/files/records/upload-all - POST]
    * <p><p/>
    * @param req ApiV1FilesRecordsUploadAllPostRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1FilesRecordsUploadAllPostResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1FilesRecordsUploadAllPostResponse v1FilesRecordsUploadAllPost(ApiV1FilesRecordsUploadAllPostRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1FilesRecordsUploadAllPost(req, null, builders);
    }
    /**
     * v1FilesRecordsUploadFinishPost 分块上传录制文件 - 上传完成[/v1/files/records/upload-finish - POST]
     * <p><p/>
     * @param req ApiV1FilesRecordsUploadFinishPostRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1FilesRecordsUploadFinishPostResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1FilesRecordsUploadFinishPostResponse v1FilesRecordsUploadFinishPost(ApiV1FilesRecordsUploadFinishPostRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/files/records/upload-finish")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            
            // path 参数
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().post(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1FilesRecordsUploadFinishPostResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1FilesRecordsUploadFinishPost 分块上传录制文件 - 上传完成[/v1/files/records/upload-finish - POST]
    * <p><p/>
    * @param req ApiV1FilesRecordsUploadFinishPostRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1FilesRecordsUploadFinishPostResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1FilesRecordsUploadFinishPostResponse v1FilesRecordsUploadFinishPost(ApiV1FilesRecordsUploadFinishPostRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1FilesRecordsUploadFinishPost(req, null, builders);
    }
    /**
     * v1FilesRecordsUploadPartPost 分块上传录制文件 - 上传[/v1/files/records/upload-part - POST]
     * <p><p/>
     * @param req ApiV1FilesRecordsUploadPartPostRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1FilesRecordsUploadPartPostResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1FilesRecordsUploadPartPostResponse v1FilesRecordsUploadPartPost(ApiV1FilesRecordsUploadPartPostRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            // 构造from-data 表单数据
            MultipartBody.Builder builder = new MultipartBody.Builder()
                .setType(MultipartBody.FORM);
            
            // 封装表单字段
            builder.addFormDataPart("operator_id", String.valueOf(req.getOperatorId()));
            
            // 封装表单字段
            builder.addFormDataPart("operator_id_type", String.valueOf(req.getOperatorIdType()));
            
            // 封装表单字段
            builder.addFormDataPart("upload_id", String.valueOf(req.getUploadId()));
            
            // 封装表单字段
            builder.addFormDataPart("file_size", String.valueOf(req.getFileSize()));
            
            // 封装表单字段
            builder.addFormDataPart("file_seq", String.valueOf(req.getFileSeq()));
            
            // 封装表单字段
            builder.addFormDataPart("file_checksum", String.valueOf(req.getFileChecksum()));
                        
            // 添加文件到FormData
            builder.addFormDataPart("file_content", req.getFileContent().getName(),
                RequestBody.create(MediaType.parse("application/octet-stream"),req.getFileContent()));
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/files/records/upload-part")
                    .body(builder.build())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();


            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            

            // verify the required parameter 'uploadId' is set
            if (req.getUploadId() == null) {
                throw new IllegalArgumentException("'uploadId' is required and must be specified");
            }
            

            // verify the required parameter 'fileSize' is set
            if (req.getFileSize() == null) {
                throw new IllegalArgumentException("'fileSize' is required and must be specified");
            }
            

            // verify the required parameter 'fileSeq' is set
            if (req.getFileSeq() == null) {
                throw new IllegalArgumentException("'fileSeq' is required and must be specified");
            }
            

            // verify the required parameter 'fileChecksum' is set
            if (req.getFileChecksum() == null) {
                throw new IllegalArgumentException("'fileChecksum' is required and must be specified");
            }
            

            // verify the required parameter 'fileContent' is set
            if (req.getFileContent() == null) {
                throw new IllegalArgumentException("'fileContent' is required and must be specified");
            }
            
            // path 参数
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().post(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1FilesRecordsUploadPartPostResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1FilesRecordsUploadPartPost 分块上传录制文件 - 上传[/v1/files/records/upload-part - POST]
    * <p><p/>
    * @param req ApiV1FilesRecordsUploadPartPostRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1FilesRecordsUploadPartPostResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1FilesRecordsUploadPartPostResponse v1FilesRecordsUploadPartPost(ApiV1FilesRecordsUploadPartPostRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1FilesRecordsUploadPartPost(req, null, builders);
    }
    /**
     * v1FilesRecordsUploadPreparePost 分块上传录制文件 - 预上传[/v1/files/records/upload-prepare - POST]
     * <p>分块上传录制文件 - 预上传<p/>
     * @param req ApiV1FilesRecordsUploadPreparePostRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1FilesRecordsUploadPreparePostResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1FilesRecordsUploadPreparePostResponse v1FilesRecordsUploadPreparePost(ApiV1FilesRecordsUploadPreparePostRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/files/records/upload-prepare")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            
            // path 参数
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().post(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1FilesRecordsUploadPreparePostResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1FilesRecordsUploadPreparePost 分块上传录制文件 - 预上传[/v1/files/records/upload-prepare - POST]
    * <p>分块上传录制文件 - 预上传<p/>
    * @param req ApiV1FilesRecordsUploadPreparePostRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1FilesRecordsUploadPreparePostResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1FilesRecordsUploadPreparePostResponse v1FilesRecordsUploadPreparePost(ApiV1FilesRecordsUploadPreparePostRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1FilesRecordsUploadPreparePost(req, null, builders);
    }
    /**
     * v1MetricsRecordsGet 查询录制文件访问数据[/v1/metrics/records - GET]
     * <p>\\*\\*描述：\\*\\*查询会议录制 ID 对应的访问数据，按照天维度返回，支持 OAuth2\\.0 鉴权调用。  * \\*\\*所需权限点为：\\*\\*查看会议录制（VIEW\\_VIDEO） 或 管理会议录制（MANAGE\\_VIDEO）。 * \\*\\*接口请求方法：\\*\\*GET<p/>
     * @param req ApiV1MetricsRecordsGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MetricsRecordsGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MetricsRecordsGetResponse v1MetricsRecordsGet(ApiV1MetricsRecordsGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/metrics/records")
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingRecordId' is set
            if (req.getMeetingRecordId() == null) {
                throw new IllegalArgumentException("'meetingRecordId' is required and must be specified");
            }
            

            

            
            // path 参数
            // query 参数
            if (req.getMeetingRecordId() != null) {
                apiReq.getQueryParams().set("meeting_record_id", req.getMeetingRecordId());
            }
            if (req.getStartTime() != null) {
                apiReq.getQueryParams().set("start_time", req.getStartTime());
            }
            if (req.getEndTime() != null) {
                apiReq.getQueryParams().set("end_time", req.getEndTime());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MetricsRecordsGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MetricsRecordsGet 查询录制文件访问数据[/v1/metrics/records - GET]
    * <p>\\*\\*描述：\\*\\*查询会议录制 ID 对应的访问数据，按照天维度返回，支持 OAuth2\\.0 鉴权调用。  * \\*\\*所需权限点为：\\*\\*查看会议录制（VIEW\\_VIDEO） 或 管理会议录制（MANAGE\\_VIDEO）。 * \\*\\*接口请求方法：\\*\\*GET<p/>
    * @param req ApiV1MetricsRecordsGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MetricsRecordsGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MetricsRecordsGetResponse v1MetricsRecordsGet(ApiV1MetricsRecordsGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MetricsRecordsGet(req, null, builders);
    }
    /**
     * v1RecordsAccessMeetingRecordIdDelete 移除录制访问成员[/v1/records/access/{meeting_record_id} - DELETE]
     * <p>仅会议创建者、企业超级管理员或有企业录制管理权限的用户可调用。 权限点：管理会议录制<p/>
     * @param req ApiV1RecordsAccessMeetingRecordIdDeleteRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RecordsAccessMeetingRecordIdDeleteResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RecordsAccessMeetingRecordIdDeleteResponse v1RecordsAccessMeetingRecordIdDelete(ApiV1RecordsAccessMeetingRecordIdDeleteRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/records/access/{meeting_record_id}")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingRecordId' is set
            if (req.getMeetingRecordId() == null) {
                throw new IllegalArgumentException("'meetingRecordId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_record_id", req.getMeetingRecordId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().delete(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RecordsAccessMeetingRecordIdDeleteResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RecordsAccessMeetingRecordIdDelete 移除录制访问成员[/v1/records/access/{meeting_record_id} - DELETE]
    * <p>仅会议创建者、企业超级管理员或有企业录制管理权限的用户可调用。 权限点：管理会议录制<p/>
    * @param req ApiV1RecordsAccessMeetingRecordIdDeleteRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RecordsAccessMeetingRecordIdDeleteResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RecordsAccessMeetingRecordIdDeleteResponse v1RecordsAccessMeetingRecordIdDelete(ApiV1RecordsAccessMeetingRecordIdDeleteRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RecordsAccessMeetingRecordIdDelete(req, null, builders);
    }
    /**
     * v1RecordsAccessMeetingRecordIdPost 添加录制访问成员[/v1/records/access/{meeting_record_id} - POST]
     * <p>仅会议创建者、企业超级管理员或有企业录制管理权限的用户可调用，可以添加参会成员或企业内成员为访问成员。 权限点：管理会议录制<p/>
     * @param req ApiV1RecordsAccessMeetingRecordIdPostRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RecordsAccessMeetingRecordIdPostResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RecordsAccessMeetingRecordIdPostResponse v1RecordsAccessMeetingRecordIdPost(ApiV1RecordsAccessMeetingRecordIdPostRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/records/access/{meeting_record_id}")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingRecordId' is set
            if (req.getMeetingRecordId() == null) {
                throw new IllegalArgumentException("'meetingRecordId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_record_id", req.getMeetingRecordId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().post(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RecordsAccessMeetingRecordIdPostResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RecordsAccessMeetingRecordIdPost 添加录制访问成员[/v1/records/access/{meeting_record_id} - POST]
    * <p>仅会议创建者、企业超级管理员或有企业录制管理权限的用户可调用，可以添加参会成员或企业内成员为访问成员。 权限点：管理会议录制<p/>
    * @param req ApiV1RecordsAccessMeetingRecordIdPostRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RecordsAccessMeetingRecordIdPostResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RecordsAccessMeetingRecordIdPostResponse v1RecordsAccessMeetingRecordIdPost(ApiV1RecordsAccessMeetingRecordIdPostRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RecordsAccessMeetingRecordIdPost(req, null, builders);
    }
    /**
     * v1RecordsApprovalsMeetingRecordIdPut 审批云录制权限[/v1/records/approvals/{meeting_record_id} - PUT]
     * <p>会议创建者，企业超级管理员，有企业录制管理权限的用户，可以对云录制观看申请进行审批操作。OAuth权限点录制管理<p/>
     * @param req ApiV1RecordsApprovalsMeetingRecordIdPutRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RecordsApprovalsMeetingRecordIdPutResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RecordsApprovalsMeetingRecordIdPutResponse v1RecordsApprovalsMeetingRecordIdPut(ApiV1RecordsApprovalsMeetingRecordIdPutRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/records/approvals/{meeting_record_id}")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingRecordId' is set
            if (req.getMeetingRecordId() == null) {
                throw new IllegalArgumentException("'meetingRecordId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_record_id", req.getMeetingRecordId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().put(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RecordsApprovalsMeetingRecordIdPutResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RecordsApprovalsMeetingRecordIdPut 审批云录制权限[/v1/records/approvals/{meeting_record_id} - PUT]
    * <p>会议创建者，企业超级管理员，有企业录制管理权限的用户，可以对云录制观看申请进行审批操作。OAuth权限点录制管理<p/>
    * @param req ApiV1RecordsApprovalsMeetingRecordIdPutRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RecordsApprovalsMeetingRecordIdPutResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RecordsApprovalsMeetingRecordIdPutResponse v1RecordsApprovalsMeetingRecordIdPut(ApiV1RecordsApprovalsMeetingRecordIdPutRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RecordsApprovalsMeetingRecordIdPut(req, null, builders);
    }
    /**
     * v1RecordsDelete 删除会议录制[/v1/records - DELETE]
     * <p>删除会议的所有录制文件，该接口会删除会议录制 ID 里对应的所有云录制文件。企业 secret 鉴权用户可删除该用户所属企业下的会议录制，OAuth2.0 鉴权用户只能删除该企业下 OAuth2.0 应用的会议录制。 &lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(51, 51, 51)\&quot;&gt;当您想实时监测会议录制删除状况时，您可以通过订阅 &lt;/span&gt;[删除云录制](https://cloud.tencent.com/document/product/1095/53232)&lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(51, 51, 51)\&quot;&gt; 的事件，接收事件通知。&lt;/span&gt;<p/>
     * @param req ApiV1RecordsDeleteRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RecordsDeleteResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RecordsDeleteResponse v1RecordsDelete(ApiV1RecordsDeleteRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/records")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingRecordId' is set
            if (req.getMeetingRecordId() == null) {
                throw new IllegalArgumentException("'meetingRecordId' is required and must be specified");
            }
            

            

            

            

            

            
            // path 参数
            // query 参数
            if (req.getMeetingId() != null) {
                apiReq.getQueryParams().set("meeting_id", req.getMeetingId());
            }
            if (req.getMeetingRecordId() != null) {
                apiReq.getQueryParams().set("meeting_record_id", req.getMeetingRecordId());
            }
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getUserid() != null) {
                apiReq.getQueryParams().set("userid", req.getUserid());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().delete(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RecordsDeleteResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RecordsDelete 删除会议录制[/v1/records - DELETE]
    * <p>删除会议的所有录制文件，该接口会删除会议录制 ID 里对应的所有云录制文件。企业 secret 鉴权用户可删除该用户所属企业下的会议录制，OAuth2.0 鉴权用户只能删除该企业下 OAuth2.0 应用的会议录制。 &lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(51, 51, 51)\&quot;&gt;当您想实时监测会议录制删除状况时，您可以通过订阅 &lt;/span&gt;[删除云录制](https://cloud.tencent.com/document/product/1095/53232)&lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(51, 51, 51)\&quot;&gt; 的事件，接收事件通知。&lt;/span&gt;<p/>
    * @param req ApiV1RecordsDeleteRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RecordsDeleteResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RecordsDeleteResponse v1RecordsDelete(ApiV1RecordsDeleteRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RecordsDelete(req, null, builders);
    }
    /**
     * v1RecordsEventsGet 获取会议录制操作（查看、下载）记录[/v1/records/events - GET]
     * <p>\\*\\*描述：\\*\\*查询会议录制 ID 对应的操作记录，包括用户查看和下载，支持 OAuth2\\.0 鉴权调用。  * \\*\\*所需权限点为：\\*\\*查看会议录制（VIEW\\_VIDEO） 或 管理会议录制（MANAGE\\_VIDEO）。 * \\*\\*接口请求方法：\\*\\*GET<p/>
     * @param req ApiV1RecordsEventsGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RecordsEventsGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RecordsEventsGetResponse v1RecordsEventsGet(ApiV1RecordsEventsGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/records/events")
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingRecordId' is set
            if (req.getMeetingRecordId() == null) {
                throw new IllegalArgumentException("'meetingRecordId' is required and must be specified");
            }
            

            // verify the required parameter 'eventType' is set
            if (req.getEventType() == null) {
                throw new IllegalArgumentException("'eventType' is required and must be specified");
            }
            

            

            

            

            
            // path 参数
            // query 参数
            if (req.getMeetingRecordId() != null) {
                apiReq.getQueryParams().set("meeting_record_id", req.getMeetingRecordId());
            }
            if (req.getEventType() != null) {
                apiReq.getQueryParams().set("event_type", req.getEventType());
            }
            if (req.getPageSize() != null) {
                apiReq.getQueryParams().set("page_size", req.getPageSize());
            }
            if (req.getPage() != null) {
                apiReq.getQueryParams().set("page", req.getPage());
            }
            if (req.getStartTime() != null) {
                apiReq.getQueryParams().set("start_time", req.getStartTime());
            }
            if (req.getEndTime() != null) {
                apiReq.getQueryParams().set("end_time", req.getEndTime());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RecordsEventsGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RecordsEventsGet 获取会议录制操作（查看、下载）记录[/v1/records/events - GET]
    * <p>\\*\\*描述：\\*\\*查询会议录制 ID 对应的操作记录，包括用户查看和下载，支持 OAuth2\\.0 鉴权调用。  * \\*\\*所需权限点为：\\*\\*查看会议录制（VIEW\\_VIDEO） 或 管理会议录制（MANAGE\\_VIDEO）。 * \\*\\*接口请求方法：\\*\\*GET<p/>
    * @param req ApiV1RecordsEventsGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RecordsEventsGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RecordsEventsGetResponse v1RecordsEventsGet(ApiV1RecordsEventsGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RecordsEventsGet(req, null, builders);
    }
    /**
     * v1RecordsGet 查询会议录制列表[/v1/records - GET]
     * <p>获取用户云录制记录，根据用户 ID、会议 ID、会议 code 进行查询，支持根据时间区间分页获取。 企业 secret 鉴权用户可获取该用户所属企业下的会议录制列表，OAuth2.0 鉴权用户只能获取该企业下 OAuth2.0 应用的会议录制列表。 当您想实时监测会议录制相关状况时，您可以通过订阅 [录制管理](https://cloud.tencent.com/document/product/1095/53226) 中的相关事件，接收事件通知。 当前同一场会议的不同录制文件共用分享链接。<p/>
     * @param req ApiV1RecordsGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RecordsGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RecordsGetResponse v1RecordsGet(ApiV1RecordsGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/records")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'startTime' is set
            if (req.getStartTime() == null) {
                throw new IllegalArgumentException("'startTime' is required and must be specified");
            }
            

            // verify the required parameter 'endTime' is set
            if (req.getEndTime() == null) {
                throw new IllegalArgumentException("'endTime' is required and must be specified");
            }
            

            

            

            

            

            

            

            

            

            
            // path 参数
            // query 参数
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getUserid() != null) {
                apiReq.getQueryParams().set("userid", req.getUserid());
            }
            if (req.getMeetingId() != null) {
                apiReq.getQueryParams().set("meeting_id", req.getMeetingId());
            }
            if (req.getMeetingCode() != null) {
                apiReq.getQueryParams().set("meeting_code", req.getMeetingCode());
            }
            if (req.getStartTime() != null) {
                apiReq.getQueryParams().set("start_time", req.getStartTime());
            }
            if (req.getEndTime() != null) {
                apiReq.getQueryParams().set("end_time", req.getEndTime());
            }
            if (req.getPageSize() != null) {
                apiReq.getQueryParams().set("page_size", req.getPageSize());
            }
            if (req.getPage() != null) {
                apiReq.getQueryParams().set("page", req.getPage());
            }
            if (req.getMediaSetType() != null) {
                apiReq.getQueryParams().set("media_set_type", req.getMediaSetType());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RecordsGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RecordsGet 查询会议录制列表[/v1/records - GET]
    * <p>获取用户云录制记录，根据用户 ID、会议 ID、会议 code 进行查询，支持根据时间区间分页获取。 企业 secret 鉴权用户可获取该用户所属企业下的会议录制列表，OAuth2.0 鉴权用户只能获取该企业下 OAuth2.0 应用的会议录制列表。 当您想实时监测会议录制相关状况时，您可以通过订阅 [录制管理](https://cloud.tencent.com/document/product/1095/53226) 中的相关事件，接收事件通知。 当前同一场会议的不同录制文件共用分享链接。<p/>
    * @param req ApiV1RecordsGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RecordsGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RecordsGetResponse v1RecordsGet(ApiV1RecordsGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RecordsGet(req, null, builders);
    }
    /**
     * v1RecordsRecordFileIdDelete 删除单个录制文件[/v1/records/{record_file_id} - DELETE]
     * <p>删除单个录制文件，该接口支持从会议中删除指定的某个录制文件。企业 secret 鉴权用户可删除该用户所属企业下的单个录制文件，OAuth2.0 鉴权用户只能删除该企业下 OAuth2.0 应用的单个录制文件。 &lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(51, 51, 51)\&quot;&gt;当您想实时监测会议录制删除状况时，您可以通过订阅 &lt;/span&gt;[删除云录制](https://cloud.tencent.com/document/product/1095/53232)&lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(51, 51, 51)\&quot;&gt; 的事件，接收事件通知。&lt;/span&gt;<p/>
     * @param req ApiV1RecordsRecordFileIdDeleteRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RecordsRecordFileIdDeleteResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RecordsRecordFileIdDeleteResponse v1RecordsRecordFileIdDelete(ApiV1RecordsRecordFileIdDeleteRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/records/{record_file_id}")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'recordFileId' is set
            if (req.getRecordFileId() == null) {
                throw new IllegalArgumentException("'recordFileId' is required and must be specified");
            }
            

            

            

            

            

            
            // path 参数
            apiReq.getPathParams().set("record_file_id", req.getRecordFileId());
            // query 参数
            if (req.getMeetingId() != null) {
                apiReq.getQueryParams().set("meeting_id", req.getMeetingId());
            }
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getUserid() != null) {
                apiReq.getQueryParams().set("userid", req.getUserid());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().delete(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RecordsRecordFileIdDeleteResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RecordsRecordFileIdDelete 删除单个录制文件[/v1/records/{record_file_id} - DELETE]
    * <p>删除单个录制文件，该接口支持从会议中删除指定的某个录制文件。企业 secret 鉴权用户可删除该用户所属企业下的单个录制文件，OAuth2.0 鉴权用户只能删除该企业下 OAuth2.0 应用的单个录制文件。 &lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(51, 51, 51)\&quot;&gt;当您想实时监测会议录制删除状况时，您可以通过订阅 &lt;/span&gt;[删除云录制](https://cloud.tencent.com/document/product/1095/53232)&lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(51, 51, 51)\&quot;&gt; 的事件，接收事件通知。&lt;/span&gt;<p/>
    * @param req ApiV1RecordsRecordFileIdDeleteRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RecordsRecordFileIdDeleteResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RecordsRecordFileIdDeleteResponse v1RecordsRecordFileIdDelete(ApiV1RecordsRecordFileIdDeleteRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RecordsRecordFileIdDelete(req, null, builders);
    }
    /**
     * v1RecordsSettingsMeetingRecordIdGet 查询会议录制共享设置[/v1/records/settings/{meeting_record_id} - GET]
     * <p>根据会议录制 ID 查询共享等配置，支持修改共享权限、共享密码、共享有效期等信息，<p/>
     * @param req ApiV1RecordsSettingsMeetingRecordIdGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RecordsSettingsMeetingRecordIdGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RecordsSettingsMeetingRecordIdGetResponse v1RecordsSettingsMeetingRecordIdGet(ApiV1RecordsSettingsMeetingRecordIdGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/records/settings/{meeting_record_id}")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingRecordId' is set
            if (req.getMeetingRecordId() == null) {
                throw new IllegalArgumentException("'meetingRecordId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_record_id", req.getMeetingRecordId());
            // query 参数
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RecordsSettingsMeetingRecordIdGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RecordsSettingsMeetingRecordIdGet 查询会议录制共享设置[/v1/records/settings/{meeting_record_id} - GET]
    * <p>根据会议录制 ID 查询共享等配置，支持修改共享权限、共享密码、共享有效期等信息，<p/>
    * @param req ApiV1RecordsSettingsMeetingRecordIdGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RecordsSettingsMeetingRecordIdGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RecordsSettingsMeetingRecordIdGetResponse v1RecordsSettingsMeetingRecordIdGet(ApiV1RecordsSettingsMeetingRecordIdGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RecordsSettingsMeetingRecordIdGet(req, null, builders);
    }
    /**
     * v1RecordsSettingsMeetingRecordIdPut 修改会议录制共享设置[/v1/records/settings/{meeting_record_id} - PUT]
     * <p>根据会议录制 ID 修改共享等配置，支持修改共享权限、共享密码、共享有效期等信息，支持 OAuth2.0 鉴权调用。 所需权限点为：管理会议录制（MANAGE\\_VIDEO）。<p/>
     * @param req ApiV1RecordsSettingsMeetingRecordIdPutRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RecordsSettingsMeetingRecordIdPutResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RecordsSettingsMeetingRecordIdPutResponse v1RecordsSettingsMeetingRecordIdPut(ApiV1RecordsSettingsMeetingRecordIdPutRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/records/settings/{meeting_record_id}")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingRecordId' is set
            if (req.getMeetingRecordId() == null) {
                throw new IllegalArgumentException("'meetingRecordId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_record_id", req.getMeetingRecordId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().put(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RecordsSettingsMeetingRecordIdPutResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RecordsSettingsMeetingRecordIdPut 修改会议录制共享设置[/v1/records/settings/{meeting_record_id} - PUT]
    * <p>根据会议录制 ID 修改共享等配置，支持修改共享权限、共享密码、共享有效期等信息，支持 OAuth2.0 鉴权调用。 所需权限点为：管理会议录制（MANAGE\\_VIDEO）。<p/>
    * @param req ApiV1RecordsSettingsMeetingRecordIdPutRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RecordsSettingsMeetingRecordIdPutResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RecordsSettingsMeetingRecordIdPutResponse v1RecordsSettingsMeetingRecordIdPut(ApiV1RecordsSettingsMeetingRecordIdPutRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RecordsSettingsMeetingRecordIdPut(req, null, builders);
    }
    /**
     * v1RecordsTranscriptsDetailsGet 查询录制转写详情[/v1/records/transcripts/details - GET]
     * <p>获取云录制会议纪要的详情，包含时间戳、文本等内容。支持 OAuth2.0 鉴权调用，仅支持授权用户为商业版、企业版、教育版。  所需权限点为：查看会议录制（VIEW\\_VIDEO） 或 管理会议录制（MANAGE\\_VIDEO）。<p/>
     * @param req ApiV1RecordsTranscriptsDetailsGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RecordsTranscriptsDetailsGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RecordsTranscriptsDetailsGetResponse v1RecordsTranscriptsDetailsGet(ApiV1RecordsTranscriptsDetailsGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/records/transcripts/details")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'recordFileId' is set
            if (req.getRecordFileId() == null) {
                throw new IllegalArgumentException("'recordFileId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            

            

            

            

            

            
            // path 参数
            // query 参数
            if (req.getMeetingId() != null) {
                apiReq.getQueryParams().set("meeting_id", req.getMeetingId());
            }
            if (req.getRecordFileId() != null) {
                apiReq.getQueryParams().set("record_file_id", req.getRecordFileId());
            }
            if (req.getPid() != null) {
                apiReq.getQueryParams().set("pid", req.getPid());
            }
            if (req.getLimit() != null) {
                apiReq.getQueryParams().set("limit", req.getLimit());
            }
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getTranscriptsType() != null) {
                apiReq.getQueryParams().set("transcripts_type", req.getTranscriptsType());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RecordsTranscriptsDetailsGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RecordsTranscriptsDetailsGet 查询录制转写详情[/v1/records/transcripts/details - GET]
    * <p>获取云录制会议纪要的详情，包含时间戳、文本等内容。支持 OAuth2.0 鉴权调用，仅支持授权用户为商业版、企业版、教育版。  所需权限点为：查看会议录制（VIEW\\_VIDEO） 或 管理会议录制（MANAGE\\_VIDEO）。<p/>
    * @param req ApiV1RecordsTranscriptsDetailsGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RecordsTranscriptsDetailsGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RecordsTranscriptsDetailsGetResponse v1RecordsTranscriptsDetailsGet(ApiV1RecordsTranscriptsDetailsGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RecordsTranscriptsDetailsGet(req, null, builders);
    }
    /**
     * v1RecordsTranscriptsParagraphsGet 查询录制转写段落信息[/v1/records/transcripts/paragraphs - GET]
     * <p>获取云录制会议纪要的段落信息（段落总数、段落 ID）。支持 OAuth2\\.0 鉴权调用，仅支持授权用户为商业版、企业版、教育版。  所需权限点为：查看会议录制（VIEW\\_VIDEO） 或 管理会议录制（MANAGE\\_VIDEO）。<p/>
     * @param req ApiV1RecordsTranscriptsParagraphsGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RecordsTranscriptsParagraphsGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RecordsTranscriptsParagraphsGetResponse v1RecordsTranscriptsParagraphsGet(ApiV1RecordsTranscriptsParagraphsGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/records/transcripts/paragraphs")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'recordFileId' is set
            if (req.getRecordFileId() == null) {
                throw new IllegalArgumentException("'recordFileId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            

            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            

            
            // path 参数
            // query 参数
            if (req.getMeetingId() != null) {
                apiReq.getQueryParams().set("meeting_id", req.getMeetingId());
            }
            if (req.getRecordFileId() != null) {
                apiReq.getQueryParams().set("record_file_id", req.getRecordFileId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RecordsTranscriptsParagraphsGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RecordsTranscriptsParagraphsGet 查询录制转写段落信息[/v1/records/transcripts/paragraphs - GET]
    * <p>获取云录制会议纪要的段落信息（段落总数、段落 ID）。支持 OAuth2\\.0 鉴权调用，仅支持授权用户为商业版、企业版、教育版。  所需权限点为：查看会议录制（VIEW\\_VIDEO） 或 管理会议录制（MANAGE\\_VIDEO）。<p/>
    * @param req ApiV1RecordsTranscriptsParagraphsGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RecordsTranscriptsParagraphsGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RecordsTranscriptsParagraphsGetResponse v1RecordsTranscriptsParagraphsGet(ApiV1RecordsTranscriptsParagraphsGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RecordsTranscriptsParagraphsGet(req, null, builders);
    }
    /**
     * v1RecordsTranscriptsSearchGet 查询录制转写搜索结果[/v1/records/transcripts/search - GET]
     * <p>根据指定内容搜索会议纪要。支持 OAuth2\\.0 鉴权调用，仅支持授权用户为商业版、企业版、教育版。  所需权限点为：查看会议录制（VIEW\\_VIDEO） 或 管理会议录制（MANAGE\\_VIDEO）。<p/>
     * @param req ApiV1RecordsTranscriptsSearchGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RecordsTranscriptsSearchGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RecordsTranscriptsSearchGetResponse v1RecordsTranscriptsSearchGet(ApiV1RecordsTranscriptsSearchGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/records/transcripts/search")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'recordFileId' is set
            if (req.getRecordFileId() == null) {
                throw new IllegalArgumentException("'recordFileId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            

            // verify the required parameter 'text' is set
            if (req.getText() == null) {
                throw new IllegalArgumentException("'text' is required and must be specified");
            }
            

            

            

            
            // path 参数
            // query 参数
            if (req.getMeetingId() != null) {
                apiReq.getQueryParams().set("meeting_id", req.getMeetingId());
            }
            if (req.getRecordFileId() != null) {
                apiReq.getQueryParams().set("record_file_id", req.getRecordFileId());
            }
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getText() != null) {
                apiReq.getQueryParams().set("text", req.getText());
            }
            if (req.getTranscriptsType() != null) {
                apiReq.getQueryParams().set("transcripts_type", req.getTranscriptsType());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RecordsTranscriptsSearchGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RecordsTranscriptsSearchGet 查询录制转写搜索结果[/v1/records/transcripts/search - GET]
    * <p>根据指定内容搜索会议纪要。支持 OAuth2\\.0 鉴权调用，仅支持授权用户为商业版、企业版、教育版。  所需权限点为：查看会议录制（VIEW\\_VIDEO） 或 管理会议录制（MANAGE\\_VIDEO）。<p/>
    * @param req ApiV1RecordsTranscriptsSearchGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RecordsTranscriptsSearchGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RecordsTranscriptsSearchGetResponse v1RecordsTranscriptsSearchGet(ApiV1RecordsTranscriptsSearchGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RecordsTranscriptsSearchGet(req, null, builders);
    }
    /**
     * v1RecordsTransferRecordingPut 设置专网会议转存[/v1/records/transfer-recording - PUT]
     * <p>描述：设置指定会议的录制文件是否转存 企业 secret 鉴权用户和OAuth2.0 鉴权用户并且有录制访问权限可指定会议录制设置。 设置仅支持对专网会议录制生效，如果会议为公网会议则返回失败 通过会议录制ID设置录制是否转存， 根据混合云集群是否开启转存： 如果混合云集群已开启录制转存功能 对指定的会议录制可通过API设置转存，和转存完成后的删除策略 如果录制未加入转存任务或转存失败， 则将录制加入转存任务 如果录制已加入转存任务， 或转存已完成， 则返回失败 如果混合云集群未开启专网会议录制转存 不支持通过API设置会议录制的转存， 返回失败<p/>
     * @param req ApiV1RecordsTransferRecordingPutRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RecordsTransferRecordingPutResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RecordsTransferRecordingPutResponse v1RecordsTransferRecordingPut(ApiV1RecordsTransferRecordingPutRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/records/transfer-recording")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            // verify the required parameter 'meetingRecordId' is set
            if (req.getMeetingRecordId() == null) {
                throw new IllegalArgumentException("'meetingRecordId' is required and must be specified");
            }
            

            
            // path 参数
            // query 参数
            if (req.getMeetingId() != null) {
                apiReq.getQueryParams().set("meeting_id", req.getMeetingId());
            }
            if (req.getMeetingRecordId() != null) {
                apiReq.getQueryParams().set("meeting_record_id", req.getMeetingRecordId());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().put(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RecordsTransferRecordingPutResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RecordsTransferRecordingPut 设置专网会议转存[/v1/records/transfer-recording - PUT]
    * <p>描述：设置指定会议的录制文件是否转存 企业 secret 鉴权用户和OAuth2.0 鉴权用户并且有录制访问权限可指定会议录制设置。 设置仅支持对专网会议录制生效，如果会议为公网会议则返回失败 通过会议录制ID设置录制是否转存， 根据混合云集群是否开启转存： 如果混合云集群已开启录制转存功能 对指定的会议录制可通过API设置转存，和转存完成后的删除策略 如果录制未加入转存任务或转存失败， 则将录制加入转存任务 如果录制已加入转存任务， 或转存已完成， 则返回失败 如果混合云集群未开启专网会议录制转存 不支持通过API设置会议录制的转存， 返回失败<p/>
    * @param req ApiV1RecordsTransferRecordingPutRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RecordsTransferRecordingPutResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RecordsTransferRecordingPutResponse v1RecordsTransferRecordingPut(ApiV1RecordsTransferRecordingPutRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RecordsTransferRecordingPut(req, null, builders);
    }
    /**
     * v1RecordsViewDetailsGet 查询录制文件观看流水记录[/v1/records/view-details - GET]
     * <p>查询会议云录制在一段时间内的观看记录，每次播放都会有一条记录。 支持 JWT 和 OAuth，OAuth 2.0鉴权用户只能获取该企业下 OAuth 2.0应用创建的会议记录 权限点：查看会议录制或管理会议录制。<p/>
     * @param req ApiV1RecordsViewDetailsGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RecordsViewDetailsGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RecordsViewDetailsGetResponse v1RecordsViewDetailsGet(ApiV1RecordsViewDetailsGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/records/view-details")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'recordFileId' is set
            if (req.getRecordFileId() == null) {
                throw new IllegalArgumentException("'recordFileId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            

            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            

            

            

            

            
            // path 参数
            // query 参数
            if (req.getRecordFileId() != null) {
                apiReq.getQueryParams().set("record_file_id", req.getRecordFileId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getPageSize() != null) {
                apiReq.getQueryParams().set("page_size", req.getPageSize());
            }
            if (req.getPage() != null) {
                apiReq.getQueryParams().set("page", req.getPage());
            }
            if (req.getStartTime() != null) {
                apiReq.getQueryParams().set("start_time", req.getStartTime());
            }
            if (req.getEndTime() != null) {
                apiReq.getQueryParams().set("end_time", req.getEndTime());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RecordsViewDetailsGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RecordsViewDetailsGet 查询录制文件观看流水记录[/v1/records/view-details - GET]
    * <p>查询会议云录制在一段时间内的观看记录，每次播放都会有一条记录。 支持 JWT 和 OAuth，OAuth 2.0鉴权用户只能获取该企业下 OAuth 2.0应用创建的会议记录 权限点：查看会议录制或管理会议录制。<p/>
    * @param req ApiV1RecordsViewDetailsGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RecordsViewDetailsGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RecordsViewDetailsGetResponse v1RecordsViewDetailsGet(ApiV1RecordsViewDetailsGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RecordsViewDetailsGet(req, null, builders);
    }
}

