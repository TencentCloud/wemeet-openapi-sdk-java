/*
 * 腾讯会议OpenAPI
 * SAAS版RESTFUL风格API
 *
 * The version of the OpenAPI document: v1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.tencentcloudapi.wemeet.service.records.api;

import com.tencentcloudapi.wemeet.core.Config;
import com.tencentcloudapi.wemeet.core.Constants;
import com.tencentcloudapi.wemeet.core.authenticator.AuthenticatorBuilder;
import com.tencentcloudapi.wemeet.core.exception.ClientException;
import com.tencentcloudapi.wemeet.core.exception.ServiceException;
import com.tencentcloudapi.wemeet.core.xhttp.ApiRequest;
import com.tencentcloudapi.wemeet.core.xhttp.ApiResponse;
import com.tencentcloudapi.wemeet.core.xhttp.Authentication;
import com.tencentcloudapi.wemeet.core.xhttp.Serializable;
import com.tencentcloudapi.wemeet.service.records.model.*;

public class RecordsApi {

    private final Config config;

    public RecordsApi(Config config) {
        this.config = config;
    }

    public static class ApiV1AddressesGetRequest {
        /**
         * meetingRecordId 会议录制 ID。 (required)
         */
        private String meetingRecordId;
        /**
         * userid 用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 (optional)
         */
        private String userid;
        /**
         * operatorId 操作者ID 必须与operator_id_type 同时提供 (optional)
         */
        private String operatorId;
        /**
         * operatorIdType 操作者ID的类型 3为rooms_id 必须与operator_id_type 同时提供 (optional)
         */
        private String operatorIdType;
        /**
         * page 分页page (optional)
         */
        private String page;
        /**
         * pageSize 分页size (optional)
         */
        private String pageSize;

        private ApiV1AddressesGetRequest() {}

        private ApiV1AddressesGetRequest(Builder builder) {
            this.meetingRecordId = builder.meetingRecordId;
            this.userid = builder.userid;
            this.operatorId = builder.operatorId;
            this.operatorIdType = builder.operatorIdType;
            this.page = builder.page;
            this.pageSize = builder.pageSize;
        }

        public static class Builder {
            /**
             * meetingRecordId 会议录制 ID。 (required)
             */
            private String meetingRecordId;
            /**
             * userid 用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 (optional)
             */
            private String userid;
            /**
             * operatorId 操作者ID 必须与operator_id_type 同时提供 (optional)
             */
            private String operatorId;
            /**
             * operatorIdType 操作者ID的类型 3为rooms_id 必须与operator_id_type 同时提供 (optional)
             */
            private String operatorIdType;
            /**
             * page 分页page (optional)
             */
            private String page;
            /**
             * pageSize 分页size (optional)
             */
            private String pageSize;

            /**
             */
            public Builder() {
            }
            /**
             * @param meetingRecordId 会议录制 ID。 (required)
             */
            public Builder meetingRecordId(String meetingRecordId) {
                this.meetingRecordId = meetingRecordId;
                return this;
            }
            /**
             * @param userid 用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 (optional)
             */
            public Builder userid(String userid) {
                this.userid = userid;
                return this;
            }
            /**
             * @param operatorId 操作者ID 必须与operator_id_type 同时提供 (optional)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            /**
             * @param operatorIdType 操作者ID的类型 3为rooms_id 必须与operator_id_type 同时提供 (optional)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            /**
             * @param page 分页page (optional)
             */
            public Builder page(String page) {
                this.page = page;
                return this;
            }
            /**
             * @param pageSize 分页size (optional)
             */
            public Builder pageSize(String pageSize) {
                this.pageSize = pageSize;
                return this;
            }

            public ApiV1AddressesGetRequest build() {
                return new ApiV1AddressesGetRequest(this);
            }
        }
        public String getMeetingRecordId() {
            return this.meetingRecordId;
        }
        public String getUserid() {
            return this.userid;
        }
        public String getOperatorId() {
            return this.operatorId;
        }
        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        public String getPage() {
            return this.page;
        }
        public String getPageSize() {
            return this.pageSize;
        }
    }

    public static class ApiV1AddressesGetResponse extends ApiResponse {
        private final V1AddressesGet200Response data;
        public ApiV1AddressesGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1AddressesGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1AddressesGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1AddressesRecordFileIdGetRequest {
        /**
         * recordFileId  (required)
         */
        private String recordFileId;
        /**
         * userid 用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 (optional)
         */
        private String userid;
        /**
         * operatorId 操作者ID，必须与operator_id_type同时出现。 (optional)
         */
        private String operatorId;
        /**
         * operatorIdType 操作者ID的类型 rooms_Id是3，必须与operator_id同时出现。 (optional)
         */
        private String operatorIdType;
        private Object body;

        private ApiV1AddressesRecordFileIdGetRequest() {}

        private ApiV1AddressesRecordFileIdGetRequest(Builder builder) {
            this.recordFileId = builder.recordFileId;
            this.userid = builder.userid;
            this.operatorId = builder.operatorId;
            this.operatorIdType = builder.operatorIdType;
            this.body = builder.body;
        }

        public static class Builder {
            /**
             * recordFileId  (required)
             */
            private final String recordFileId;
            /**
             * userid 用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 (optional)
             */
            private String userid;
            /**
             * operatorId 操作者ID，必须与operator_id_type同时出现。 (optional)
             */
            private String operatorId;
            /**
             * operatorIdType 操作者ID的类型 rooms_Id是3，必须与operator_id同时出现。 (optional)
             */
            private String operatorIdType;
            private Object body;

            /**
             * @param recordFileId 
             */
            public Builder(String recordFileId) {
                this.recordFileId = recordFileId;
            }
            /**
             * @param userid 用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 (optional)
             */
            public Builder userid(String userid) {
                this.userid = userid;
                return this;
            }
            /**
             * @param operatorId 操作者ID，必须与operator_id_type同时出现。 (optional)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            /**
             * @param operatorIdType 操作者ID的类型 rooms_Id是3，必须与operator_id同时出现。 (optional)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1AddressesRecordFileIdGetRequest build() {
                return new ApiV1AddressesRecordFileIdGetRequest(this);
            }
        }
        public String getRecordFileId() {
            return this.recordFileId;
        }
        public String getUserid() {
            return this.userid;
        }
        public String getOperatorId() {
            return this.operatorId;
        }
        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1AddressesRecordFileIdGetResponse extends ApiResponse {
        private final V1AddressesRecordFileIdGet200Response data;
        public ApiV1AddressesRecordFileIdGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1AddressesRecordFileIdGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1AddressesRecordFileIdGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MetricsRecordsGetRequest {
        /**
         * meetingRecordId 会议录制 ID。 (required)
         */
        private String meetingRecordId;
        /**
         * startTime 查询起始时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (optional)
         */
        private String startTime;
        /**
         * endTime 查询结束时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (optional)
         */
        private String endTime;

        private ApiV1MetricsRecordsGetRequest() {}

        private ApiV1MetricsRecordsGetRequest(Builder builder) {
            this.meetingRecordId = builder.meetingRecordId;
            this.startTime = builder.startTime;
            this.endTime = builder.endTime;
        }

        public static class Builder {
            /**
             * meetingRecordId 会议录制 ID。 (required)
             */
            private String meetingRecordId;
            /**
             * startTime 查询起始时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (optional)
             */
            private String startTime;
            /**
             * endTime 查询结束时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (optional)
             */
            private String endTime;

            /**
             */
            public Builder() {
            }
            /**
             * @param meetingRecordId 会议录制 ID。 (required)
             */
            public Builder meetingRecordId(String meetingRecordId) {
                this.meetingRecordId = meetingRecordId;
                return this;
            }
            /**
             * @param startTime 查询起始时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (optional)
             */
            public Builder startTime(String startTime) {
                this.startTime = startTime;
                return this;
            }
            /**
             * @param endTime 查询结束时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (optional)
             */
            public Builder endTime(String endTime) {
                this.endTime = endTime;
                return this;
            }

            public ApiV1MetricsRecordsGetRequest build() {
                return new ApiV1MetricsRecordsGetRequest(this);
            }
        }
        public String getMeetingRecordId() {
            return this.meetingRecordId;
        }
        public String getStartTime() {
            return this.startTime;
        }
        public String getEndTime() {
            return this.endTime;
        }
    }

    public static class ApiV1MetricsRecordsGetResponse extends ApiResponse {
        private final V1MetricsRecordsGet200Response data;
        public ApiV1MetricsRecordsGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MetricsRecordsGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MetricsRecordsGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1RecordsApprovalsMeetingRecordIdPutRequest {
        /**
         * meetingRecordId 会议录制 ID，列表查询接口返回的 meeting_record_id。 (required)
         */
        private String meetingRecordId;
        private V1RecordsApprovalsMeetingRecordIdPutRequest body;

        private ApiV1RecordsApprovalsMeetingRecordIdPutRequest() {}

        private ApiV1RecordsApprovalsMeetingRecordIdPutRequest(Builder builder) {
            this.meetingRecordId = builder.meetingRecordId;
            this.body = builder.body;
        }

        public static class Builder {
            /**
             * meetingRecordId 会议录制 ID，列表查询接口返回的 meeting_record_id。 (required)
             */
            private final String meetingRecordId;
            private V1RecordsApprovalsMeetingRecordIdPutRequest body;

            /**
             * @param meetingRecordId 会议录制 ID，列表查询接口返回的 meeting_record_id。
             */
            public Builder(String meetingRecordId) {
                this.meetingRecordId = meetingRecordId;
            }
            public Builder body(V1RecordsApprovalsMeetingRecordIdPutRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1RecordsApprovalsMeetingRecordIdPutRequest build() {
                return new ApiV1RecordsApprovalsMeetingRecordIdPutRequest(this);
            }
        }
        public String getMeetingRecordId() {
            return this.meetingRecordId;
        }
        public V1RecordsApprovalsMeetingRecordIdPutRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1RecordsApprovalsMeetingRecordIdPutResponse extends ApiResponse {
        private final Object data;
        public ApiV1RecordsApprovalsMeetingRecordIdPutResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1RecordsDeleteRequest {
        /**
         * meetingId 会议 ID。 (required)
         */
        private String meetingId;
        /**
         * meetingRecordId 会议录制 ID。 (required)
         */
        private String meetingRecordId;
        /**
         * userid 用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 (optional)
         */
        private String userid;
        /**
         * operatorIdType 操作者ID的类型，必须与operator_id同时出现 (optional)
         */
        private String operatorIdType;
        /**
         * operatorId 操作者ID，根据operator_id_type的值，使用不同的类型 (optional)
         */
        private String operatorId;

        private ApiV1RecordsDeleteRequest() {}

        private ApiV1RecordsDeleteRequest(Builder builder) {
            this.meetingId = builder.meetingId;
            this.meetingRecordId = builder.meetingRecordId;
            this.userid = builder.userid;
            this.operatorIdType = builder.operatorIdType;
            this.operatorId = builder.operatorId;
        }

        public static class Builder {
            /**
             * meetingId 会议 ID。 (required)
             */
            private String meetingId;
            /**
             * meetingRecordId 会议录制 ID。 (required)
             */
            private String meetingRecordId;
            /**
             * userid 用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 (optional)
             */
            private String userid;
            /**
             * operatorIdType 操作者ID的类型，必须与operator_id同时出现 (optional)
             */
            private String operatorIdType;
            /**
             * operatorId 操作者ID，根据operator_id_type的值，使用不同的类型 (optional)
             */
            private String operatorId;

            /**
             */
            public Builder() {
            }
            /**
             * @param meetingId 会议 ID。 (required)
             */
            public Builder meetingId(String meetingId) {
                this.meetingId = meetingId;
                return this;
            }
            /**
             * @param meetingRecordId 会议录制 ID。 (required)
             */
            public Builder meetingRecordId(String meetingRecordId) {
                this.meetingRecordId = meetingRecordId;
                return this;
            }
            /**
             * @param userid 用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 (optional)
             */
            public Builder userid(String userid) {
                this.userid = userid;
                return this;
            }
            /**
             * @param operatorIdType 操作者ID的类型，必须与operator_id同时出现 (optional)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            /**
             * @param operatorId 操作者ID，根据operator_id_type的值，使用不同的类型 (optional)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }

            public ApiV1RecordsDeleteRequest build() {
                return new ApiV1RecordsDeleteRequest(this);
            }
        }
        public String getMeetingId() {
            return this.meetingId;
        }
        public String getMeetingRecordId() {
            return this.meetingRecordId;
        }
        public String getUserid() {
            return this.userid;
        }
        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        public String getOperatorId() {
            return this.operatorId;
        }
    }

    public static class ApiV1RecordsDeleteResponse extends ApiResponse {
        private final Object data;
        public ApiV1RecordsDeleteResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1RecordsEventsGetRequest {
        /**
         * meetingRecordId 会议录制 ID，列表接口返回的是 meeting_record_id。 (required)
         */
        private String meetingRecordId;
        /**
         * eventType 查询事件类型：1：下载，2：查看。 (required)
         */
        private String eventType;
        /**
         * page 页码，从1开始，默认值为1。 (optional)
         */
        private String page;
        /**
         * pageSize 分页大小，默认值为20，最大为50。 (optional)
         */
        private String pageSize;
        /**
         * startTime 查询起始时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (optional)
         */
        private String startTime;
        /**
         * endTime 查询结束时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (optional)
         */
        private String endTime;

        private ApiV1RecordsEventsGetRequest() {}

        private ApiV1RecordsEventsGetRequest(Builder builder) {
            this.meetingRecordId = builder.meetingRecordId;
            this.eventType = builder.eventType;
            this.page = builder.page;
            this.pageSize = builder.pageSize;
            this.startTime = builder.startTime;
            this.endTime = builder.endTime;
        }

        public static class Builder {
            /**
             * meetingRecordId 会议录制 ID，列表接口返回的是 meeting_record_id。 (required)
             */
            private String meetingRecordId;
            /**
             * eventType 查询事件类型：1：下载，2：查看。 (required)
             */
            private String eventType;
            /**
             * page 页码，从1开始，默认值为1。 (optional)
             */
            private String page;
            /**
             * pageSize 分页大小，默认值为20，最大为50。 (optional)
             */
            private String pageSize;
            /**
             * startTime 查询起始时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (optional)
             */
            private String startTime;
            /**
             * endTime 查询结束时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (optional)
             */
            private String endTime;

            /**
             */
            public Builder() {
            }
            /**
             * @param meetingRecordId 会议录制 ID，列表接口返回的是 meeting_record_id。 (required)
             */
            public Builder meetingRecordId(String meetingRecordId) {
                this.meetingRecordId = meetingRecordId;
                return this;
            }
            /**
             * @param eventType 查询事件类型：1：下载，2：查看。 (required)
             */
            public Builder eventType(String eventType) {
                this.eventType = eventType;
                return this;
            }
            /**
             * @param page 页码，从1开始，默认值为1。 (optional)
             */
            public Builder page(String page) {
                this.page = page;
                return this;
            }
            /**
             * @param pageSize 分页大小，默认值为20，最大为50。 (optional)
             */
            public Builder pageSize(String pageSize) {
                this.pageSize = pageSize;
                return this;
            }
            /**
             * @param startTime 查询起始时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (optional)
             */
            public Builder startTime(String startTime) {
                this.startTime = startTime;
                return this;
            }
            /**
             * @param endTime 查询结束时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (optional)
             */
            public Builder endTime(String endTime) {
                this.endTime = endTime;
                return this;
            }

            public ApiV1RecordsEventsGetRequest build() {
                return new ApiV1RecordsEventsGetRequest(this);
            }
        }
        public String getMeetingRecordId() {
            return this.meetingRecordId;
        }
        public String getEventType() {
            return this.eventType;
        }
        public String getPage() {
            return this.page;
        }
        public String getPageSize() {
            return this.pageSize;
        }
        public String getStartTime() {
            return this.startTime;
        }
        public String getEndTime() {
            return this.endTime;
        }
    }

    public static class ApiV1RecordsEventsGetResponse extends ApiResponse {
        private final V1RecordsEventsGet200Response data;
        public ApiV1RecordsEventsGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1RecordsEventsGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1RecordsEventsGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1RecordsGetRequest {
        /**
         * startTime 查询起始时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (required)
         */
        private String startTime;
        /**
         * endTime 查询结束时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (required)
         */
        private String endTime;
        /**
         * userid 用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId），当会议 ID 和会议 code 均为空时，表示查询用户所有会议的录制列表。 (optional)
         */
        private String userid;
        /**
         * meetingId 会议的唯一 ID，不为空时优先根据会议 ID 查询。 (optional)
         */
        private String meetingId;
        /**
         * meetingCode 会议 code，当 meeting_id 为空且 meeting_code 不为空时根据会议 code 查询。 (optional)
         */
        private String meetingCode;
        /**
         * page 页码，从1开始，默认值为1。 (optional)
         */
        private String page;
        /**
         * pageSize 分页大小，默认值为10，最大为20。 (optional)
         */
        private String pageSize;
        /**
         * operatorId 操作者ID，必须与operator_id_type同时出现。 (optional)
         */
        private String operatorId;
        /**
         * operatorIdType 操作者ID的类型，必须与operator_id同时出现。 (optional)
         */
        private String operatorIdType;
        /**
         * mediaSetType  (optional)
         */
        private String mediaSetType;
        private Object body;

        private ApiV1RecordsGetRequest() {}

        private ApiV1RecordsGetRequest(Builder builder) {
            this.startTime = builder.startTime;
            this.endTime = builder.endTime;
            this.userid = builder.userid;
            this.meetingId = builder.meetingId;
            this.meetingCode = builder.meetingCode;
            this.page = builder.page;
            this.pageSize = builder.pageSize;
            this.operatorId = builder.operatorId;
            this.operatorIdType = builder.operatorIdType;
            this.mediaSetType = builder.mediaSetType;
            this.body = builder.body;
        }

        public static class Builder {
            /**
             * startTime 查询起始时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (required)
             */
            private String startTime;
            /**
             * endTime 查询结束时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (required)
             */
            private String endTime;
            /**
             * userid 用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId），当会议 ID 和会议 code 均为空时，表示查询用户所有会议的录制列表。 (optional)
             */
            private String userid;
            /**
             * meetingId 会议的唯一 ID，不为空时优先根据会议 ID 查询。 (optional)
             */
            private String meetingId;
            /**
             * meetingCode 会议 code，当 meeting_id 为空且 meeting_code 不为空时根据会议 code 查询。 (optional)
             */
            private String meetingCode;
            /**
             * page 页码，从1开始，默认值为1。 (optional)
             */
            private String page;
            /**
             * pageSize 分页大小，默认值为10，最大为20。 (optional)
             */
            private String pageSize;
            /**
             * operatorId 操作者ID，必须与operator_id_type同时出现。 (optional)
             */
            private String operatorId;
            /**
             * operatorIdType 操作者ID的类型，必须与operator_id同时出现。 (optional)
             */
            private String operatorIdType;
            /**
             * mediaSetType  (optional)
             */
            private String mediaSetType;
            private Object body;

            /**
             */
            public Builder() {
            }
            /**
             * @param startTime 查询起始时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (required)
             */
            public Builder startTime(String startTime) {
                this.startTime = startTime;
                return this;
            }
            /**
             * @param endTime 查询结束时间戳，UNIX 时间戳（单位秒）。说明：时间区间不允许超过31天。 (required)
             */
            public Builder endTime(String endTime) {
                this.endTime = endTime;
                return this;
            }
            /**
             * @param userid 用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId），当会议 ID 和会议 code 均为空时，表示查询用户所有会议的录制列表。 (optional)
             */
            public Builder userid(String userid) {
                this.userid = userid;
                return this;
            }
            /**
             * @param meetingId 会议的唯一 ID，不为空时优先根据会议 ID 查询。 (optional)
             */
            public Builder meetingId(String meetingId) {
                this.meetingId = meetingId;
                return this;
            }
            /**
             * @param meetingCode 会议 code，当 meeting_id 为空且 meeting_code 不为空时根据会议 code 查询。 (optional)
             */
            public Builder meetingCode(String meetingCode) {
                this.meetingCode = meetingCode;
                return this;
            }
            /**
             * @param page 页码，从1开始，默认值为1。 (optional)
             */
            public Builder page(String page) {
                this.page = page;
                return this;
            }
            /**
             * @param pageSize 分页大小，默认值为10，最大为20。 (optional)
             */
            public Builder pageSize(String pageSize) {
                this.pageSize = pageSize;
                return this;
            }
            /**
             * @param operatorId 操作者ID，必须与operator_id_type同时出现。 (optional)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            /**
             * @param operatorIdType 操作者ID的类型，必须与operator_id同时出现。 (optional)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            /**
             * @param mediaSetType  (optional)
             */
            public Builder mediaSetType(String mediaSetType) {
                this.mediaSetType = mediaSetType;
                return this;
            }
            public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1RecordsGetRequest build() {
                return new ApiV1RecordsGetRequest(this);
            }
        }
        public String getStartTime() {
            return this.startTime;
        }
        public String getEndTime() {
            return this.endTime;
        }
        public String getUserid() {
            return this.userid;
        }
        public String getMeetingId() {
            return this.meetingId;
        }
        public String getMeetingCode() {
            return this.meetingCode;
        }
        public String getPage() {
            return this.page;
        }
        public String getPageSize() {
            return this.pageSize;
        }
        public String getOperatorId() {
            return this.operatorId;
        }
        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        public String getMediaSetType() {
            return this.mediaSetType;
        }
        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1RecordsGetResponse extends ApiResponse {
        private final V1RecordsGet200Response data;
        public ApiV1RecordsGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1RecordsGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1RecordsGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1RecordsRecordFileIdDeleteRequest {
        /**
         * recordFileId 录制文件 ID。 (required)
         */
        private String recordFileId;
        /**
         * meetingId 会议 ID。 (required)
         */
        private String meetingId;
        /**
         * userid 用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 (optional)
         */
        private String userid;
        /**
         * operatorId 操作者ID，根据operator_id_type的值，使用不同的类型，必须与operator_id_type同时出现 (optional)
         */
        private String operatorId;
        /**
         * operatorIdType 操作者ID的类型，必须与operator_id同时出现 (optional)
         */
        private String operatorIdType;
        private Object body;

        private ApiV1RecordsRecordFileIdDeleteRequest() {}

        private ApiV1RecordsRecordFileIdDeleteRequest(Builder builder) {
            this.recordFileId = builder.recordFileId;
            this.meetingId = builder.meetingId;
            this.userid = builder.userid;
            this.operatorId = builder.operatorId;
            this.operatorIdType = builder.operatorIdType;
            this.body = builder.body;
        }

        public static class Builder {
            /**
             * recordFileId 录制文件 ID。 (required)
             */
            private final String recordFileId;
            /**
             * meetingId 会议 ID。 (required)
             */
            private String meetingId;
            /**
             * userid 用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 (optional)
             */
            private String userid;
            /**
             * operatorId 操作者ID，根据operator_id_type的值，使用不同的类型，必须与operator_id_type同时出现 (optional)
             */
            private String operatorId;
            /**
             * operatorIdType 操作者ID的类型，必须与operator_id同时出现 (optional)
             */
            private String operatorIdType;
            private Object body;

            /**
             * @param recordFileId 录制文件 ID。
             */
            public Builder(String recordFileId) {
                this.recordFileId = recordFileId;
            }
            /**
             * @param meetingId 会议 ID。 (required)
             */
            public Builder meetingId(String meetingId) {
                this.meetingId = meetingId;
                return this;
            }
            /**
             * @param userid 用户 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 (optional)
             */
            public Builder userid(String userid) {
                this.userid = userid;
                return this;
            }
            /**
             * @param operatorId 操作者ID，根据operator_id_type的值，使用不同的类型，必须与operator_id_type同时出现 (optional)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            /**
             * @param operatorIdType 操作者ID的类型，必须与operator_id同时出现 (optional)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1RecordsRecordFileIdDeleteRequest build() {
                return new ApiV1RecordsRecordFileIdDeleteRequest(this);
            }
        }
        public String getRecordFileId() {
            return this.recordFileId;
        }
        public String getMeetingId() {
            return this.meetingId;
        }
        public String getUserid() {
            return this.userid;
        }
        public String getOperatorId() {
            return this.operatorId;
        }
        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1RecordsRecordFileIdDeleteResponse extends ApiResponse {
        private final Object data;
        public ApiV1RecordsRecordFileIdDeleteResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1RecordsSettingsMeetingRecordIdPutRequest {
        /**
         * meetingRecordId 会议录制 ID。 (required)
         */
        private String meetingRecordId;
        private V1RecordsSettingsMeetingRecordIdPutRequest body;

        private ApiV1RecordsSettingsMeetingRecordIdPutRequest() {}

        private ApiV1RecordsSettingsMeetingRecordIdPutRequest(Builder builder) {
            this.meetingRecordId = builder.meetingRecordId;
            this.body = builder.body;
        }

        public static class Builder {
            /**
             * meetingRecordId 会议录制 ID。 (required)
             */
            private final String meetingRecordId;
            private V1RecordsSettingsMeetingRecordIdPutRequest body;

            /**
             * @param meetingRecordId 会议录制 ID。
             */
            public Builder(String meetingRecordId) {
                this.meetingRecordId = meetingRecordId;
            }
            public Builder body(V1RecordsSettingsMeetingRecordIdPutRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1RecordsSettingsMeetingRecordIdPutRequest build() {
                return new ApiV1RecordsSettingsMeetingRecordIdPutRequest(this);
            }
        }
        public String getMeetingRecordId() {
            return this.meetingRecordId;
        }
        public V1RecordsSettingsMeetingRecordIdPutRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1RecordsSettingsMeetingRecordIdPutResponse extends ApiResponse {
        private final Object data;
        public ApiV1RecordsSettingsMeetingRecordIdPutResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1RecordsTranscriptsDetailsGetRequest {
        /**
         * meetingId 会议id (required)
         */
        private String meetingId;
        /**
         * recordFileId 录制id (required)
         */
        private String recordFileId;
        /**
         * operatorId 操作者ID。operator_id 必须与 operator_id_type 配合使用。根据operator_id_type的值，operator_id 代表不同类型。 (required)
         */
        private String operatorId;
        /**
         * operatorIdType 操作者ID的类型：  1. 企业用户userid 2：open_id 3. rooms设备rooms_id (required)
         */
        private String operatorIdType;
        /**
         * pid 查询的起始段落 ID。获取 pid 后（含）的段落，默认从0开始。 (optional)
         */
        private String pid;
        /**
         * limit 查询的段落数，默认查询全量数据 (optional)
         */
        private String limit;
        /**
         * transcriptsType 转写类型，默认是0。 0：原文版 1：智能优化版 (optional)
         */
        private String transcriptsType;
        private Object body;

        private ApiV1RecordsTranscriptsDetailsGetRequest() {}

        private ApiV1RecordsTranscriptsDetailsGetRequest(Builder builder) {
            this.meetingId = builder.meetingId;
            this.recordFileId = builder.recordFileId;
            this.operatorId = builder.operatorId;
            this.operatorIdType = builder.operatorIdType;
            this.pid = builder.pid;
            this.limit = builder.limit;
            this.transcriptsType = builder.transcriptsType;
            this.body = builder.body;
        }

        public static class Builder {
            /**
             * meetingId 会议id (required)
             */
            private String meetingId;
            /**
             * recordFileId 录制id (required)
             */
            private String recordFileId;
            /**
             * operatorId 操作者ID。operator_id 必须与 operator_id_type 配合使用。根据operator_id_type的值，operator_id 代表不同类型。 (required)
             */
            private String operatorId;
            /**
             * operatorIdType 操作者ID的类型：  1. 企业用户userid 2：open_id 3. rooms设备rooms_id (required)
             */
            private String operatorIdType;
            /**
             * pid 查询的起始段落 ID。获取 pid 后（含）的段落，默认从0开始。 (optional)
             */
            private String pid;
            /**
             * limit 查询的段落数，默认查询全量数据 (optional)
             */
            private String limit;
            /**
             * transcriptsType 转写类型，默认是0。 0：原文版 1：智能优化版 (optional)
             */
            private String transcriptsType;
            private Object body;

            /**
             */
            public Builder() {
            }
            /**
             * @param meetingId 会议id (required)
             */
            public Builder meetingId(String meetingId) {
                this.meetingId = meetingId;
                return this;
            }
            /**
             * @param recordFileId 录制id (required)
             */
            public Builder recordFileId(String recordFileId) {
                this.recordFileId = recordFileId;
                return this;
            }
            /**
             * @param operatorId 操作者ID。operator_id 必须与 operator_id_type 配合使用。根据operator_id_type的值，operator_id 代表不同类型。 (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            /**
             * @param operatorIdType 操作者ID的类型：  1. 企业用户userid 2：open_id 3. rooms设备rooms_id (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            /**
             * @param pid 查询的起始段落 ID。获取 pid 后（含）的段落，默认从0开始。 (optional)
             */
            public Builder pid(String pid) {
                this.pid = pid;
                return this;
            }
            /**
             * @param limit 查询的段落数，默认查询全量数据 (optional)
             */
            public Builder limit(String limit) {
                this.limit = limit;
                return this;
            }
            /**
             * @param transcriptsType 转写类型，默认是0。 0：原文版 1：智能优化版 (optional)
             */
            public Builder transcriptsType(String transcriptsType) {
                this.transcriptsType = transcriptsType;
                return this;
            }
            public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1RecordsTranscriptsDetailsGetRequest build() {
                return new ApiV1RecordsTranscriptsDetailsGetRequest(this);
            }
        }
        public String getMeetingId() {
            return this.meetingId;
        }
        public String getRecordFileId() {
            return this.recordFileId;
        }
        public String getOperatorId() {
            return this.operatorId;
        }
        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        public String getPid() {
            return this.pid;
        }
        public String getLimit() {
            return this.limit;
        }
        public String getTranscriptsType() {
            return this.transcriptsType;
        }
        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1RecordsTranscriptsDetailsGetResponse extends ApiResponse {
        private final V1RecordsTranscriptsDetailsGet200Response data;
        public ApiV1RecordsTranscriptsDetailsGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1RecordsTranscriptsDetailsGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1RecordsTranscriptsDetailsGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1RecordsTranscriptsParagraphsGetRequest {
        /**
         * meetingId 会议 ID。 (required)
         */
        private String meetingId;
        /**
         * recordFileId 录制文件 ID。 (required)
         */
        private String recordFileId;
        /**
         * operatorIdType 操作者ID的类型：  1. 企业用户userid 2：open_id 3. rooms设备rooms_id (required)
         */
        private String operatorIdType;
        /**
         * operatorId 操作者ID。operator_id 必须与 operator_id_type 配合使用。根据operator_id_type的值，operator_id 代表不同类型。 (required)
         */
        private String operatorId;
        private Object body;

        private ApiV1RecordsTranscriptsParagraphsGetRequest() {}

        private ApiV1RecordsTranscriptsParagraphsGetRequest(Builder builder) {
            this.meetingId = builder.meetingId;
            this.recordFileId = builder.recordFileId;
            this.operatorIdType = builder.operatorIdType;
            this.operatorId = builder.operatorId;
            this.body = builder.body;
        }

        public static class Builder {
            /**
             * meetingId 会议 ID。 (required)
             */
            private String meetingId;
            /**
             * recordFileId 录制文件 ID。 (required)
             */
            private String recordFileId;
            /**
             * operatorIdType 操作者ID的类型：  1. 企业用户userid 2：open_id 3. rooms设备rooms_id (required)
             */
            private String operatorIdType;
            /**
             * operatorId 操作者ID。operator_id 必须与 operator_id_type 配合使用。根据operator_id_type的值，operator_id 代表不同类型。 (required)
             */
            private String operatorId;
            private Object body;

            /**
             */
            public Builder() {
            }
            /**
             * @param meetingId 会议 ID。 (required)
             */
            public Builder meetingId(String meetingId) {
                this.meetingId = meetingId;
                return this;
            }
            /**
             * @param recordFileId 录制文件 ID。 (required)
             */
            public Builder recordFileId(String recordFileId) {
                this.recordFileId = recordFileId;
                return this;
            }
            /**
             * @param operatorIdType 操作者ID的类型：  1. 企业用户userid 2：open_id 3. rooms设备rooms_id (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            /**
             * @param operatorId 操作者ID。operator_id 必须与 operator_id_type 配合使用。根据operator_id_type的值，operator_id 代表不同类型。 (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1RecordsTranscriptsParagraphsGetRequest build() {
                return new ApiV1RecordsTranscriptsParagraphsGetRequest(this);
            }
        }
        public String getMeetingId() {
            return this.meetingId;
        }
        public String getRecordFileId() {
            return this.recordFileId;
        }
        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        public String getOperatorId() {
            return this.operatorId;
        }
        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1RecordsTranscriptsParagraphsGetResponse extends ApiResponse {
        private final V1RecordsTranscriptsParagraphsGet200Response data;
        public ApiV1RecordsTranscriptsParagraphsGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1RecordsTranscriptsParagraphsGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1RecordsTranscriptsParagraphsGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1RecordsTranscriptsSearchGetRequest {
        /**
         * meetingId 会议ID (required)
         */
        private String meetingId;
        /**
         * recordFileId 录制文件id (required)
         */
        private String recordFileId;
        /**
         * text 搜索的文本, 如果是中文, 需要urlencode一下 (required)
         */
        private String text;
        /**
         * operatorIdType id类型: 1: 常规用户 2：open_id 3:rooms (required)
         */
        private String operatorIdType;
        /**
         * operatorId 用户名 (required)
         */
        private String operatorId;
        /**
         * transcriptsType 转写类型，默认是0。 0：原文版 1：智能优化版 (optional, default to 0)
         */
        private String transcriptsType;
        private Object body;

        private ApiV1RecordsTranscriptsSearchGetRequest() {}

        private ApiV1RecordsTranscriptsSearchGetRequest(Builder builder) {
            this.meetingId = builder.meetingId;
            this.recordFileId = builder.recordFileId;
            this.text = builder.text;
            this.operatorIdType = builder.operatorIdType;
            this.operatorId = builder.operatorId;
            this.transcriptsType = builder.transcriptsType;
            this.body = builder.body;
        }

        public static class Builder {
            /**
             * meetingId 会议ID (required)
             */
            private String meetingId;
            /**
             * recordFileId 录制文件id (required)
             */
            private String recordFileId;
            /**
             * text 搜索的文本, 如果是中文, 需要urlencode一下 (required)
             */
            private String text;
            /**
             * operatorIdType id类型: 1: 常规用户 2：open_id 3:rooms (required)
             */
            private String operatorIdType;
            /**
             * operatorId 用户名 (required)
             */
            private String operatorId;
            /**
             * transcriptsType 转写类型，默认是0。 0：原文版 1：智能优化版 (optional, default to 0)
             */
            private String transcriptsType;
            private Object body;

            /**
             */
            public Builder() {
            }
            /**
             * @param meetingId 会议ID (required)
             */
            public Builder meetingId(String meetingId) {
                this.meetingId = meetingId;
                return this;
            }
            /**
             * @param recordFileId 录制文件id (required)
             */
            public Builder recordFileId(String recordFileId) {
                this.recordFileId = recordFileId;
                return this;
            }
            /**
             * @param text 搜索的文本, 如果是中文, 需要urlencode一下 (required)
             */
            public Builder text(String text) {
                this.text = text;
                return this;
            }
            /**
             * @param operatorIdType id类型: 1: 常规用户 2：open_id 3:rooms (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            /**
             * @param operatorId 用户名 (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            /**
             * @param transcriptsType 转写类型，默认是0。 0：原文版 1：智能优化版 (optional, default to 0)
             */
            public Builder transcriptsType(String transcriptsType) {
                this.transcriptsType = transcriptsType;
                return this;
            }
            public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1RecordsTranscriptsSearchGetRequest build() {
                return new ApiV1RecordsTranscriptsSearchGetRequest(this);
            }
        }
        public String getMeetingId() {
            return this.meetingId;
        }
        public String getRecordFileId() {
            return this.recordFileId;
        }
        public String getText() {
            return this.text;
        }
        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        public String getOperatorId() {
            return this.operatorId;
        }
        public String getTranscriptsType() {
            return this.transcriptsType;
        }
        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1RecordsTranscriptsSearchGetResponse extends ApiResponse {
        private final V1RecordsTranscriptsSearchGet200Response data;
        public ApiV1RecordsTranscriptsSearchGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1RecordsTranscriptsSearchGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1RecordsTranscriptsSearchGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1RecordsTransferRecordingPutRequest {
        /**
         * meetingId 会议ID (required)
         */
        private String meetingId;
        /**
         * meetingRecordId 会议录制ID (required)
         */
        private String meetingRecordId;
        private V1RecordsTransferRecordingPutRequest body;

        private ApiV1RecordsTransferRecordingPutRequest() {}

        private ApiV1RecordsTransferRecordingPutRequest(Builder builder) {
            this.meetingId = builder.meetingId;
            this.meetingRecordId = builder.meetingRecordId;
            this.body = builder.body;
        }

        public static class Builder {
            /**
             * meetingId 会议ID (required)
             */
            private String meetingId;
            /**
             * meetingRecordId 会议录制ID (required)
             */
            private String meetingRecordId;
            private V1RecordsTransferRecordingPutRequest body;

            /**
             */
            public Builder() {
            }
            /**
             * @param meetingId 会议ID (required)
             */
            public Builder meetingId(String meetingId) {
                this.meetingId = meetingId;
                return this;
            }
            /**
             * @param meetingRecordId 会议录制ID (required)
             */
            public Builder meetingRecordId(String meetingRecordId) {
                this.meetingRecordId = meetingRecordId;
                return this;
            }
            public Builder body(V1RecordsTransferRecordingPutRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1RecordsTransferRecordingPutRequest build() {
                return new ApiV1RecordsTransferRecordingPutRequest(this);
            }
        }
        public String getMeetingId() {
            return this.meetingId;
        }
        public String getMeetingRecordId() {
            return this.meetingRecordId;
        }
        public V1RecordsTransferRecordingPutRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1RecordsTransferRecordingPutResponse extends ApiResponse {
        private final Object data;
        public ApiV1RecordsTransferRecordingPutResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1RecordsViewDetailsGetRequest {
        /**
         * recordFileId 录制文件 ID。 (required)
         */
        private String recordFileId;
        /**
         * operatorIdType 操作者 ID 的类型： 1：userid 2：open_id (required)
         */
        private String operatorIdType;
        /**
         * operatorId 操作者 ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
         */
        private String operatorId;
        /**
         * pageSize 分页大小，默认20，最大50 (optional)
         */
        private String pageSize;
        /**
         * page 页码，从1开始，默认1 (optional)
         */
        private String page;
        /**
         * startTime 查询起始时间戳，UNIX 时间戳（单位毫秒）。 说明：仅存储最近31天的数据，默认展示最近31天的数据。 (optional)
         */
        private String startTime;
        /**
         * endTime 查询结束时间戳，UNIX 时间戳（单位毫秒）。 说明：仅存储最近31天的数据，默认展示最近31天的数据 (optional)
         */
        private String endTime;
        private Object body;

        private ApiV1RecordsViewDetailsGetRequest() {}

        private ApiV1RecordsViewDetailsGetRequest(Builder builder) {
            this.recordFileId = builder.recordFileId;
            this.operatorIdType = builder.operatorIdType;
            this.operatorId = builder.operatorId;
            this.pageSize = builder.pageSize;
            this.page = builder.page;
            this.startTime = builder.startTime;
            this.endTime = builder.endTime;
            this.body = builder.body;
        }

        public static class Builder {
            /**
             * recordFileId 录制文件 ID。 (required)
             */
            private String recordFileId;
            /**
             * operatorIdType 操作者 ID 的类型： 1：userid 2：open_id (required)
             */
            private String operatorIdType;
            /**
             * operatorId 操作者 ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
             */
            private String operatorId;
            /**
             * pageSize 分页大小，默认20，最大50 (optional)
             */
            private String pageSize;
            /**
             * page 页码，从1开始，默认1 (optional)
             */
            private String page;
            /**
             * startTime 查询起始时间戳，UNIX 时间戳（单位毫秒）。 说明：仅存储最近31天的数据，默认展示最近31天的数据。 (optional)
             */
            private String startTime;
            /**
             * endTime 查询结束时间戳，UNIX 时间戳（单位毫秒）。 说明：仅存储最近31天的数据，默认展示最近31天的数据 (optional)
             */
            private String endTime;
            private Object body;

            /**
             */
            public Builder() {
            }
            /**
             * @param recordFileId 录制文件 ID。 (required)
             */
            public Builder recordFileId(String recordFileId) {
                this.recordFileId = recordFileId;
                return this;
            }
            /**
             * @param operatorIdType 操作者 ID 的类型： 1：userid 2：open_id (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            /**
             * @param operatorId 操作者 ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            /**
             * @param pageSize 分页大小，默认20，最大50 (optional)
             */
            public Builder pageSize(String pageSize) {
                this.pageSize = pageSize;
                return this;
            }
            /**
             * @param page 页码，从1开始，默认1 (optional)
             */
            public Builder page(String page) {
                this.page = page;
                return this;
            }
            /**
             * @param startTime 查询起始时间戳，UNIX 时间戳（单位毫秒）。 说明：仅存储最近31天的数据，默认展示最近31天的数据。 (optional)
             */
            public Builder startTime(String startTime) {
                this.startTime = startTime;
                return this;
            }
            /**
             * @param endTime 查询结束时间戳，UNIX 时间戳（单位毫秒）。 说明：仅存储最近31天的数据，默认展示最近31天的数据 (optional)
             */
            public Builder endTime(String endTime) {
                this.endTime = endTime;
                return this;
            }
            public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1RecordsViewDetailsGetRequest build() {
                return new ApiV1RecordsViewDetailsGetRequest(this);
            }
        }
        public String getRecordFileId() {
            return this.recordFileId;
        }
        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        public String getOperatorId() {
            return this.operatorId;
        }
        public String getPageSize() {
            return this.pageSize;
        }
        public String getPage() {
            return this.page;
        }
        public String getStartTime() {
            return this.startTime;
        }
        public String getEndTime() {
            return this.endTime;
        }
        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1RecordsViewDetailsGetResponse extends ApiResponse {
        private final V1RecordsViewDetailsGet200Response data;
        public ApiV1RecordsViewDetailsGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1RecordsViewDetailsGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1RecordsViewDetailsGet200Response getData() {
            return this.data;
        }
    }

    /**
     * v1AddressesGet 查询会议录制地址[/v1/addresses - GET]
     * <p>**描述：**  * 查询会议录制地址，可获取会议云录制的播放地址和下载地址。 * 企业 secret 鉴权用户可获取该用户所属企业下的会议录制地址，OAuth2.0 鉴权用户只能获取该企业下 OAuth2.0 应用的会议录制地址。 * 当您想实时监测会议录制相关状况时，您可以通过订阅 [录制管理](https://cloud.tencent.com/document/product/1095/53226) 中的相关事件，接收事件通知。 * 当前同一场会议的不同录制文件共用分享链接。<p/>
     * @param req ApiV1AddressesGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1AddressesGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1AddressesGetResponse v1AddressesGet(ApiV1AddressesGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }

            ApiRequest apiReq = new ApiRequest.Builder("/v1/addresses")
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();
            // verify the required parameter 'meetingRecordId' is set
            if (req.getMeetingRecordId() == null) {
                throw new IllegalArgumentException("'meetingRecordId' is required and must be specified");
            }
            // path 参数
            // query 参数
            if (req.getMeetingRecordId() != null) {
                apiReq.getQueryParams().set("meeting_record_id", req.getMeetingRecordId());
            }
            if (req.getUserid() != null) {
                apiReq.getQueryParams().set("userid", req.getUserid());
            }
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getPage() != null) {
                apiReq.getQueryParams().set("page", req.getPage());
            }
            if (req.getPageSize() != null) {
                apiReq.getQueryParams().set("page_size", req.getPageSize());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1AddressesGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1AddressesGet 查询会议录制地址[/v1/addresses - GET]
    * <p>**描述：**  * 查询会议录制地址，可获取会议云录制的播放地址和下载地址。 * 企业 secret 鉴权用户可获取该用户所属企业下的会议录制地址，OAuth2.0 鉴权用户只能获取该企业下 OAuth2.0 应用的会议录制地址。 * 当您想实时监测会议录制相关状况时，您可以通过订阅 [录制管理](https://cloud.tencent.com/document/product/1095/53226) 中的相关事件，接收事件通知。 * 当前同一场会议的不同录制文件共用分享链接。<p/>
    * @param req ApiV1AddressesGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1AddressesGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1AddressesGetResponse v1AddressesGet(ApiV1AddressesGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1AddressesGet(req, null, builders);
    }
    /**
     * v1AddressesRecordFileIdGet 查询单个录制文件详情（文件、纪要）[/v1/addresses/{record_file_id} - GET]
     * <p>查询单个云录制的详情信息，包括录制文件和会议纪要，并可获取播放地址和下载地址。企业 secert 鉴权用户可获取该用户所属企业下的单个录制列表，OAuth2.0 鉴权用户只能获取该企业下 OAuth2.0 应用的单个录制列表。<p/>
     * @param req ApiV1AddressesRecordFileIdGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1AddressesRecordFileIdGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1AddressesRecordFileIdGetResponse v1AddressesRecordFileIdGet(ApiV1AddressesRecordFileIdGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }

            ApiRequest apiReq = new ApiRequest.Builder("/v1/addresses/{record_file_id}")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();
            // verify the required parameter 'recordFileId' is set
            if (req.getRecordFileId() == null) {
                throw new IllegalArgumentException("'recordFileId' is required and must be specified");
            }
            // path 参数
            apiReq.getPathParams().set("record_file_id", req.getRecordFileId());
            // query 参数
            if (req.getUserid() != null) {
                apiReq.getQueryParams().set("userid", req.getUserid());
            }
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1AddressesRecordFileIdGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1AddressesRecordFileIdGet 查询单个录制文件详情（文件、纪要）[/v1/addresses/{record_file_id} - GET]
    * <p>查询单个云录制的详情信息，包括录制文件和会议纪要，并可获取播放地址和下载地址。企业 secert 鉴权用户可获取该用户所属企业下的单个录制列表，OAuth2.0 鉴权用户只能获取该企业下 OAuth2.0 应用的单个录制列表。<p/>
    * @param req ApiV1AddressesRecordFileIdGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1AddressesRecordFileIdGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1AddressesRecordFileIdGetResponse v1AddressesRecordFileIdGet(ApiV1AddressesRecordFileIdGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1AddressesRecordFileIdGet(req, null, builders);
    }
    /**
     * v1MetricsRecordsGet 查询录制文件访问数据[/v1/metrics/records - GET]
     * <p>\\*\\*描述：\\*\\*查询会议录制 ID 对应的访问数据，按照天维度返回，支持 OAuth2\\.0 鉴权调用。  * \\*\\*所需权限点为：\\*\\*查看会议录制（VIEW\\_VIDEO） 或 管理会议录制（MANAGE\\_VIDEO）。 * \\*\\*接口请求方法：\\*\\*GET<p/>
     * @param req ApiV1MetricsRecordsGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MetricsRecordsGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MetricsRecordsGetResponse v1MetricsRecordsGet(ApiV1MetricsRecordsGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }

            ApiRequest apiReq = new ApiRequest.Builder("/v1/metrics/records")
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();
            // verify the required parameter 'meetingRecordId' is set
            if (req.getMeetingRecordId() == null) {
                throw new IllegalArgumentException("'meetingRecordId' is required and must be specified");
            }
            // path 参数
            // query 参数
            if (req.getMeetingRecordId() != null) {
                apiReq.getQueryParams().set("meeting_record_id", req.getMeetingRecordId());
            }
            if (req.getStartTime() != null) {
                apiReq.getQueryParams().set("start_time", req.getStartTime());
            }
            if (req.getEndTime() != null) {
                apiReq.getQueryParams().set("end_time", req.getEndTime());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MetricsRecordsGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MetricsRecordsGet 查询录制文件访问数据[/v1/metrics/records - GET]
    * <p>\\*\\*描述：\\*\\*查询会议录制 ID 对应的访问数据，按照天维度返回，支持 OAuth2\\.0 鉴权调用。  * \\*\\*所需权限点为：\\*\\*查看会议录制（VIEW\\_VIDEO） 或 管理会议录制（MANAGE\\_VIDEO）。 * \\*\\*接口请求方法：\\*\\*GET<p/>
    * @param req ApiV1MetricsRecordsGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MetricsRecordsGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MetricsRecordsGetResponse v1MetricsRecordsGet(ApiV1MetricsRecordsGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MetricsRecordsGet(req, null, builders);
    }
    /**
     * v1RecordsApprovalsMeetingRecordIdPut 云录制权限审批[/v1/records/approvals/{meeting_record_id} - PUT]
     * <p>会议创建者，企业超级管理员，有企业录制管理权限的用户，可以对云录制观看申请进行审批操作。OAuth权限点录制管理<p/>
     * @param req ApiV1RecordsApprovalsMeetingRecordIdPutRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RecordsApprovalsMeetingRecordIdPutResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RecordsApprovalsMeetingRecordIdPutResponse v1RecordsApprovalsMeetingRecordIdPut(ApiV1RecordsApprovalsMeetingRecordIdPutRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }

            ApiRequest apiReq = new ApiRequest.Builder("/v1/records/approvals/{meeting_record_id}")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();
            // verify the required parameter 'meetingRecordId' is set
            if (req.getMeetingRecordId() == null) {
                throw new IllegalArgumentException("'meetingRecordId' is required and must be specified");
            }
            // path 参数
            apiReq.getPathParams().set("meeting_record_id", req.getMeetingRecordId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().put(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RecordsApprovalsMeetingRecordIdPutResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RecordsApprovalsMeetingRecordIdPut 云录制权限审批[/v1/records/approvals/{meeting_record_id} - PUT]
    * <p>会议创建者，企业超级管理员，有企业录制管理权限的用户，可以对云录制观看申请进行审批操作。OAuth权限点录制管理<p/>
    * @param req ApiV1RecordsApprovalsMeetingRecordIdPutRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RecordsApprovalsMeetingRecordIdPutResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RecordsApprovalsMeetingRecordIdPutResponse v1RecordsApprovalsMeetingRecordIdPut(ApiV1RecordsApprovalsMeetingRecordIdPutRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RecordsApprovalsMeetingRecordIdPut(req, null, builders);
    }
    /**
     * v1RecordsDelete 删除会议的所有录制文件[/v1/records - DELETE]
     * <p>删除会议的所有录制文件，该接口会删除会议录制 ID 里对应的所有云录制文件。企业 secret 鉴权用户可删除该用户所属企业下的会议录制，OAuth2.0 鉴权用户只能删除该企业下 OAuth2.0 应用的会议录制。 &lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(51, 51, 51)\&quot;&gt;当您想实时监测会议录制删除状况时，您可以通过订阅 &lt;/span&gt;[删除云录制](https://cloud.tencent.com/document/product/1095/53232)&lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(51, 51, 51)\&quot;&gt; 的事件，接收事件通知。&lt;/span&gt;<p/>
     * @param req ApiV1RecordsDeleteRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RecordsDeleteResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RecordsDeleteResponse v1RecordsDelete(ApiV1RecordsDeleteRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }

            ApiRequest apiReq = new ApiRequest.Builder("/v1/records")
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();
            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            // verify the required parameter 'meetingRecordId' is set
            if (req.getMeetingRecordId() == null) {
                throw new IllegalArgumentException("'meetingRecordId' is required and must be specified");
            }
            // path 参数
            // query 参数
            if (req.getMeetingId() != null) {
                apiReq.getQueryParams().set("meeting_id", req.getMeetingId());
            }
            if (req.getMeetingRecordId() != null) {
                apiReq.getQueryParams().set("meeting_record_id", req.getMeetingRecordId());
            }
            if (req.getUserid() != null) {
                apiReq.getQueryParams().set("userid", req.getUserid());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().delete(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RecordsDeleteResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RecordsDelete 删除会议的所有录制文件[/v1/records - DELETE]
    * <p>删除会议的所有录制文件，该接口会删除会议录制 ID 里对应的所有云录制文件。企业 secret 鉴权用户可删除该用户所属企业下的会议录制，OAuth2.0 鉴权用户只能删除该企业下 OAuth2.0 应用的会议录制。 &lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(51, 51, 51)\&quot;&gt;当您想实时监测会议录制删除状况时，您可以通过订阅 &lt;/span&gt;[删除云录制](https://cloud.tencent.com/document/product/1095/53232)&lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(51, 51, 51)\&quot;&gt; 的事件，接收事件通知。&lt;/span&gt;<p/>
    * @param req ApiV1RecordsDeleteRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RecordsDeleteResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RecordsDeleteResponse v1RecordsDelete(ApiV1RecordsDeleteRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RecordsDelete(req, null, builders);
    }
    /**
     * v1RecordsEventsGet 获取会议录制操作（查看、下载）记录[/v1/records/events - GET]
     * <p>\\*\\*描述：\\*\\*查询会议录制 ID 对应的操作记录，包括用户查看和下载，支持 OAuth2\\.0 鉴权调用。  * \\*\\*所需权限点为：\\*\\*查看会议录制（VIEW\\_VIDEO） 或 管理会议录制（MANAGE\\_VIDEO）。 * \\*\\*接口请求方法：\\*\\*GET<p/>
     * @param req ApiV1RecordsEventsGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RecordsEventsGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RecordsEventsGetResponse v1RecordsEventsGet(ApiV1RecordsEventsGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }

            ApiRequest apiReq = new ApiRequest.Builder("/v1/records/events")
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();
            // verify the required parameter 'meetingRecordId' is set
            if (req.getMeetingRecordId() == null) {
                throw new IllegalArgumentException("'meetingRecordId' is required and must be specified");
            }
            // verify the required parameter 'eventType' is set
            if (req.getEventType() == null) {
                throw new IllegalArgumentException("'eventType' is required and must be specified");
            }
            // path 参数
            // query 参数
            if (req.getMeetingRecordId() != null) {
                apiReq.getQueryParams().set("meeting_record_id", req.getMeetingRecordId());
            }
            if (req.getEventType() != null) {
                apiReq.getQueryParams().set("event_type", req.getEventType());
            }
            if (req.getPage() != null) {
                apiReq.getQueryParams().set("page", req.getPage());
            }
            if (req.getPageSize() != null) {
                apiReq.getQueryParams().set("page_size", req.getPageSize());
            }
            if (req.getStartTime() != null) {
                apiReq.getQueryParams().set("start_time", req.getStartTime());
            }
            if (req.getEndTime() != null) {
                apiReq.getQueryParams().set("end_time", req.getEndTime());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RecordsEventsGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RecordsEventsGet 获取会议录制操作（查看、下载）记录[/v1/records/events - GET]
    * <p>\\*\\*描述：\\*\\*查询会议录制 ID 对应的操作记录，包括用户查看和下载，支持 OAuth2\\.0 鉴权调用。  * \\*\\*所需权限点为：\\*\\*查看会议录制（VIEW\\_VIDEO） 或 管理会议录制（MANAGE\\_VIDEO）。 * \\*\\*接口请求方法：\\*\\*GET<p/>
    * @param req ApiV1RecordsEventsGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RecordsEventsGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RecordsEventsGetResponse v1RecordsEventsGet(ApiV1RecordsEventsGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RecordsEventsGet(req, null, builders);
    }
    /**
     * v1RecordsGet 查询会议录制列表[/v1/records - GET]
     * <p>获取用户云录制记录，根据用户 ID、会议 ID、会议 code 进行查询，支持根据时间区间分页获取。 企业 secret 鉴权用户可获取该用户所属企业下的会议录制列表，OAuth2.0 鉴权用户只能获取该企业下 OAuth2.0 应用的会议录制列表。 当您想实时监测会议录制相关状况时，您可以通过订阅 [录制管理](https://cloud.tencent.com/document/product/1095/53226) 中的相关事件，接收事件通知。 当前同一场会议的不同录制文件共用分享链接。<p/>
     * @param req ApiV1RecordsGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RecordsGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RecordsGetResponse v1RecordsGet(ApiV1RecordsGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }

            ApiRequest apiReq = new ApiRequest.Builder("/v1/records")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();
            // verify the required parameter 'startTime' is set
            if (req.getStartTime() == null) {
                throw new IllegalArgumentException("'startTime' is required and must be specified");
            }
            // verify the required parameter 'endTime' is set
            if (req.getEndTime() == null) {
                throw new IllegalArgumentException("'endTime' is required and must be specified");
            }
            // path 参数
            // query 参数
            if (req.getUserid() != null) {
                apiReq.getQueryParams().set("userid", req.getUserid());
            }
            if (req.getStartTime() != null) {
                apiReq.getQueryParams().set("start_time", req.getStartTime());
            }
            if (req.getEndTime() != null) {
                apiReq.getQueryParams().set("end_time", req.getEndTime());
            }
            if (req.getMeetingId() != null) {
                apiReq.getQueryParams().set("meeting_id", req.getMeetingId());
            }
            if (req.getMeetingCode() != null) {
                apiReq.getQueryParams().set("meeting_code", req.getMeetingCode());
            }
            if (req.getPage() != null) {
                apiReq.getQueryParams().set("page", req.getPage());
            }
            if (req.getPageSize() != null) {
                apiReq.getQueryParams().set("page_size", req.getPageSize());
            }
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getMediaSetType() != null) {
                apiReq.getQueryParams().set("media_set_type", req.getMediaSetType());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RecordsGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RecordsGet 查询会议录制列表[/v1/records - GET]
    * <p>获取用户云录制记录，根据用户 ID、会议 ID、会议 code 进行查询，支持根据时间区间分页获取。 企业 secret 鉴权用户可获取该用户所属企业下的会议录制列表，OAuth2.0 鉴权用户只能获取该企业下 OAuth2.0 应用的会议录制列表。 当您想实时监测会议录制相关状况时，您可以通过订阅 [录制管理](https://cloud.tencent.com/document/product/1095/53226) 中的相关事件，接收事件通知。 当前同一场会议的不同录制文件共用分享链接。<p/>
    * @param req ApiV1RecordsGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RecordsGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RecordsGetResponse v1RecordsGet(ApiV1RecordsGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RecordsGet(req, null, builders);
    }
    /**
     * v1RecordsRecordFileIdDelete 删除单个录制文件[/v1/records/{record_file_id} - DELETE]
     * <p>删除单个录制文件，该接口支持从会议中删除指定的某个录制文件。企业 secret 鉴权用户可删除该用户所属企业下的单个录制文件，OAuth2.0 鉴权用户只能删除该企业下 OAuth2.0 应用的单个录制文件。 &lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(51, 51, 51)\&quot;&gt;当您想实时监测会议录制删除状况时，您可以通过订阅 &lt;/span&gt;[删除云录制](https://cloud.tencent.com/document/product/1095/53232)&lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(51, 51, 51)\&quot;&gt; 的事件，接收事件通知。&lt;/span&gt;<p/>
     * @param req ApiV1RecordsRecordFileIdDeleteRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RecordsRecordFileIdDeleteResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RecordsRecordFileIdDeleteResponse v1RecordsRecordFileIdDelete(ApiV1RecordsRecordFileIdDeleteRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }

            ApiRequest apiReq = new ApiRequest.Builder("/v1/records/{record_file_id}")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();
            // verify the required parameter 'recordFileId' is set
            if (req.getRecordFileId() == null) {
                throw new IllegalArgumentException("'recordFileId' is required and must be specified");
            }
            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            // path 参数
            apiReq.getPathParams().set("record_file_id", req.getRecordFileId());
            // query 参数
            if (req.getMeetingId() != null) {
                apiReq.getQueryParams().set("meeting_id", req.getMeetingId());
            }
            if (req.getUserid() != null) {
                apiReq.getQueryParams().set("userid", req.getUserid());
            }
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().delete(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RecordsRecordFileIdDeleteResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RecordsRecordFileIdDelete 删除单个录制文件[/v1/records/{record_file_id} - DELETE]
    * <p>删除单个录制文件，该接口支持从会议中删除指定的某个录制文件。企业 secret 鉴权用户可删除该用户所属企业下的单个录制文件，OAuth2.0 鉴权用户只能删除该企业下 OAuth2.0 应用的单个录制文件。 &lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(51, 51, 51)\&quot;&gt;当您想实时监测会议录制删除状况时，您可以通过订阅 &lt;/span&gt;[删除云录制](https://cloud.tencent.com/document/product/1095/53232)&lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(51, 51, 51)\&quot;&gt; 的事件，接收事件通知。&lt;/span&gt;<p/>
    * @param req ApiV1RecordsRecordFileIdDeleteRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RecordsRecordFileIdDeleteResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RecordsRecordFileIdDeleteResponse v1RecordsRecordFileIdDelete(ApiV1RecordsRecordFileIdDeleteRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RecordsRecordFileIdDelete(req, null, builders);
    }
    /**
     * v1RecordsSettingsMeetingRecordIdPut 修改会议录制共享设置[/v1/records/settings/{meeting_record_id} - PUT]
     * <p>根据会议录制 ID 修改共享等配置，支持修改共享权限、共享密码、共享有效期等信息，支持 OAuth2.0 鉴权调用。 所需权限点为：管理会议录制（MANAGE\\_VIDEO）。<p/>
     * @param req ApiV1RecordsSettingsMeetingRecordIdPutRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RecordsSettingsMeetingRecordIdPutResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RecordsSettingsMeetingRecordIdPutResponse v1RecordsSettingsMeetingRecordIdPut(ApiV1RecordsSettingsMeetingRecordIdPutRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }

            ApiRequest apiReq = new ApiRequest.Builder("/v1/records/settings/{meeting_record_id}")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();
            // verify the required parameter 'meetingRecordId' is set
            if (req.getMeetingRecordId() == null) {
                throw new IllegalArgumentException("'meetingRecordId' is required and must be specified");
            }
            // path 参数
            apiReq.getPathParams().set("meeting_record_id", req.getMeetingRecordId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().put(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RecordsSettingsMeetingRecordIdPutResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RecordsSettingsMeetingRecordIdPut 修改会议录制共享设置[/v1/records/settings/{meeting_record_id} - PUT]
    * <p>根据会议录制 ID 修改共享等配置，支持修改共享权限、共享密码、共享有效期等信息，支持 OAuth2.0 鉴权调用。 所需权限点为：管理会议录制（MANAGE\\_VIDEO）。<p/>
    * @param req ApiV1RecordsSettingsMeetingRecordIdPutRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RecordsSettingsMeetingRecordIdPutResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RecordsSettingsMeetingRecordIdPutResponse v1RecordsSettingsMeetingRecordIdPut(ApiV1RecordsSettingsMeetingRecordIdPutRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RecordsSettingsMeetingRecordIdPut(req, null, builders);
    }
    /**
     * v1RecordsTranscriptsDetailsGet 查询会议纪要详情[/v1/records/transcripts/details - GET]
     * <p>获取云录制会议纪要的详情，包含时间戳、文本等内容。支持 OAuth2.0 鉴权调用，仅支持授权用户为商业版、企业版、教育版。  所需权限点为：查看会议录制（VIEW\\_VIDEO） 或 管理会议录制（MANAGE\\_VIDEO）。<p/>
     * @param req ApiV1RecordsTranscriptsDetailsGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RecordsTranscriptsDetailsGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RecordsTranscriptsDetailsGetResponse v1RecordsTranscriptsDetailsGet(ApiV1RecordsTranscriptsDetailsGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }

            ApiRequest apiReq = new ApiRequest.Builder("/v1/records/transcripts/details")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();
            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            // verify the required parameter 'recordFileId' is set
            if (req.getRecordFileId() == null) {
                throw new IllegalArgumentException("'recordFileId' is required and must be specified");
            }
            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            // path 参数
            // query 参数
            if (req.getMeetingId() != null) {
                apiReq.getQueryParams().set("meeting_id", req.getMeetingId());
            }
            if (req.getRecordFileId() != null) {
                apiReq.getQueryParams().set("record_file_id", req.getRecordFileId());
            }
            if (req.getPid() != null) {
                apiReq.getQueryParams().set("pid", req.getPid());
            }
            if (req.getLimit() != null) {
                apiReq.getQueryParams().set("limit", req.getLimit());
            }
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getTranscriptsType() != null) {
                apiReq.getQueryParams().set("transcripts_type", req.getTranscriptsType());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RecordsTranscriptsDetailsGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RecordsTranscriptsDetailsGet 查询会议纪要详情[/v1/records/transcripts/details - GET]
    * <p>获取云录制会议纪要的详情，包含时间戳、文本等内容。支持 OAuth2.0 鉴权调用，仅支持授权用户为商业版、企业版、教育版。  所需权限点为：查看会议录制（VIEW\\_VIDEO） 或 管理会议录制（MANAGE\\_VIDEO）。<p/>
    * @param req ApiV1RecordsTranscriptsDetailsGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RecordsTranscriptsDetailsGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RecordsTranscriptsDetailsGetResponse v1RecordsTranscriptsDetailsGet(ApiV1RecordsTranscriptsDetailsGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RecordsTranscriptsDetailsGet(req, null, builders);
    }
    /**
     * v1RecordsTranscriptsParagraphsGet 查询会议纪要段落信息[/v1/records/transcripts/paragraphs - GET]
     * <p>获取云录制会议纪要的段落信息（段落总数、段落 ID）。支持 OAuth2\\.0 鉴权调用，仅支持授权用户为商业版、企业版、教育版。  所需权限点为：查看会议录制（VIEW\\_VIDEO） 或 管理会议录制（MANAGE\\_VIDEO）。<p/>
     * @param req ApiV1RecordsTranscriptsParagraphsGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RecordsTranscriptsParagraphsGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RecordsTranscriptsParagraphsGetResponse v1RecordsTranscriptsParagraphsGet(ApiV1RecordsTranscriptsParagraphsGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }

            ApiRequest apiReq = new ApiRequest.Builder("/v1/records/transcripts/paragraphs")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();
            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            // verify the required parameter 'recordFileId' is set
            if (req.getRecordFileId() == null) {
                throw new IllegalArgumentException("'recordFileId' is required and must be specified");
            }
            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            // path 参数
            // query 参数
            if (req.getMeetingId() != null) {
                apiReq.getQueryParams().set("meeting_id", req.getMeetingId());
            }
            if (req.getRecordFileId() != null) {
                apiReq.getQueryParams().set("record_file_id", req.getRecordFileId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RecordsTranscriptsParagraphsGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RecordsTranscriptsParagraphsGet 查询会议纪要段落信息[/v1/records/transcripts/paragraphs - GET]
    * <p>获取云录制会议纪要的段落信息（段落总数、段落 ID）。支持 OAuth2\\.0 鉴权调用，仅支持授权用户为商业版、企业版、教育版。  所需权限点为：查看会议录制（VIEW\\_VIDEO） 或 管理会议录制（MANAGE\\_VIDEO）。<p/>
    * @param req ApiV1RecordsTranscriptsParagraphsGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RecordsTranscriptsParagraphsGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RecordsTranscriptsParagraphsGetResponse v1RecordsTranscriptsParagraphsGet(ApiV1RecordsTranscriptsParagraphsGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RecordsTranscriptsParagraphsGet(req, null, builders);
    }
    /**
     * v1RecordsTranscriptsSearchGet 查询会议纪要搜索结果[/v1/records/transcripts/search - GET]
     * <p>根据指定内容搜索会议纪要。支持 OAuth2\\.0 鉴权调用，仅支持授权用户为商业版、企业版、教育版。  所需权限点为：查看会议录制（VIEW\\_VIDEO） 或 管理会议录制（MANAGE\\_VIDEO）。<p/>
     * @param req ApiV1RecordsTranscriptsSearchGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RecordsTranscriptsSearchGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RecordsTranscriptsSearchGetResponse v1RecordsTranscriptsSearchGet(ApiV1RecordsTranscriptsSearchGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }

            ApiRequest apiReq = new ApiRequest.Builder("/v1/records/transcripts/search")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();
            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            // verify the required parameter 'recordFileId' is set
            if (req.getRecordFileId() == null) {
                throw new IllegalArgumentException("'recordFileId' is required and must be specified");
            }
            // verify the required parameter 'text' is set
            if (req.getText() == null) {
                throw new IllegalArgumentException("'text' is required and must be specified");
            }
            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            // path 参数
            // query 参数
            if (req.getMeetingId() != null) {
                apiReq.getQueryParams().set("meeting_id", req.getMeetingId());
            }
            if (req.getRecordFileId() != null) {
                apiReq.getQueryParams().set("record_file_id", req.getRecordFileId());
            }
            if (req.getText() != null) {
                apiReq.getQueryParams().set("text", req.getText());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getTranscriptsType() != null) {
                apiReq.getQueryParams().set("transcripts_type", req.getTranscriptsType());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RecordsTranscriptsSearchGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RecordsTranscriptsSearchGet 查询会议纪要搜索结果[/v1/records/transcripts/search - GET]
    * <p>根据指定内容搜索会议纪要。支持 OAuth2\\.0 鉴权调用，仅支持授权用户为商业版、企业版、教育版。  所需权限点为：查看会议录制（VIEW\\_VIDEO） 或 管理会议录制（MANAGE\\_VIDEO）。<p/>
    * @param req ApiV1RecordsTranscriptsSearchGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RecordsTranscriptsSearchGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RecordsTranscriptsSearchGetResponse v1RecordsTranscriptsSearchGet(ApiV1RecordsTranscriptsSearchGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RecordsTranscriptsSearchGet(req, null, builders);
    }
    /**
     * v1RecordsTransferRecordingPut 设置专网会议录制是否转存[/v1/records/transfer-recording - PUT]
     * <p>描述：设置指定会议的录制文件是否转存 企业 secret 鉴权用户和OAuth2.0 鉴权用户并且有录制访问权限可指定会议录制设置。 设置仅支持对专网会议录制生效，如果会议为公网会议则返回失败 通过会议录制ID设置录制是否转存， 根据混合云集群是否开启转存： 如果混合云集群已开启录制转存功能 对指定的会议录制可通过API设置转存，和转存完成后的删除策略 如果录制未加入转存任务或转存失败， 则将录制加入转存任务 如果录制已加入转存任务， 或转存已完成， 则返回失败 如果混合云集群未开启专网会议录制转存 不支持通过API设置会议录制的转存， 返回失败<p/>
     * @param req ApiV1RecordsTransferRecordingPutRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RecordsTransferRecordingPutResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RecordsTransferRecordingPutResponse v1RecordsTransferRecordingPut(ApiV1RecordsTransferRecordingPutRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }

            ApiRequest apiReq = new ApiRequest.Builder("/v1/records/transfer-recording")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();
            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            // verify the required parameter 'meetingRecordId' is set
            if (req.getMeetingRecordId() == null) {
                throw new IllegalArgumentException("'meetingRecordId' is required and must be specified");
            }
            // path 参数
            // query 参数
            if (req.getMeetingId() != null) {
                apiReq.getQueryParams().set("meeting_id", req.getMeetingId());
            }
            if (req.getMeetingRecordId() != null) {
                apiReq.getQueryParams().set("meeting_record_id", req.getMeetingRecordId());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().put(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RecordsTransferRecordingPutResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RecordsTransferRecordingPut 设置专网会议录制是否转存[/v1/records/transfer-recording - PUT]
    * <p>描述：设置指定会议的录制文件是否转存 企业 secret 鉴权用户和OAuth2.0 鉴权用户并且有录制访问权限可指定会议录制设置。 设置仅支持对专网会议录制生效，如果会议为公网会议则返回失败 通过会议录制ID设置录制是否转存， 根据混合云集群是否开启转存： 如果混合云集群已开启录制转存功能 对指定的会议录制可通过API设置转存，和转存完成后的删除策略 如果录制未加入转存任务或转存失败， 则将录制加入转存任务 如果录制已加入转存任务， 或转存已完成， 则返回失败 如果混合云集群未开启专网会议录制转存 不支持通过API设置会议录制的转存， 返回失败<p/>
    * @param req ApiV1RecordsTransferRecordingPutRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RecordsTransferRecordingPutResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RecordsTransferRecordingPutResponse v1RecordsTransferRecordingPut(ApiV1RecordsTransferRecordingPutRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RecordsTransferRecordingPut(req, null, builders);
    }
    /**
     * v1RecordsViewDetailsGet 查询录制文件观看流水记录[/v1/records/view-details - GET]
     * <p>查询会议云录制在一段时间内的观看记录，每次播放都会有一条记录。 支持 JWT 和 OAuth，OAuth 2.0鉴权用户只能获取该企业下 OAuth 2.0应用创建的会议记录 权限点：查看会议录制或管理会议录制。<p/>
     * @param req ApiV1RecordsViewDetailsGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RecordsViewDetailsGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RecordsViewDetailsGetResponse v1RecordsViewDetailsGet(ApiV1RecordsViewDetailsGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }

            ApiRequest apiReq = new ApiRequest.Builder("/v1/records/view-details")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();
            // verify the required parameter 'recordFileId' is set
            if (req.getRecordFileId() == null) {
                throw new IllegalArgumentException("'recordFileId' is required and must be specified");
            }
            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            // path 参数
            // query 参数
            if (req.getRecordFileId() != null) {
                apiReq.getQueryParams().set("record_file_id", req.getRecordFileId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getPageSize() != null) {
                apiReq.getQueryParams().set("page_size", req.getPageSize());
            }
            if (req.getPage() != null) {
                apiReq.getQueryParams().set("page", req.getPage());
            }
            if (req.getStartTime() != null) {
                apiReq.getQueryParams().set("start_time", req.getStartTime());
            }
            if (req.getEndTime() != null) {
                apiReq.getQueryParams().set("end_time", req.getEndTime());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RecordsViewDetailsGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RecordsViewDetailsGet 查询录制文件观看流水记录[/v1/records/view-details - GET]
    * <p>查询会议云录制在一段时间内的观看记录，每次播放都会有一条记录。 支持 JWT 和 OAuth，OAuth 2.0鉴权用户只能获取该企业下 OAuth 2.0应用创建的会议记录 权限点：查看会议录制或管理会议录制。<p/>
    * @param req ApiV1RecordsViewDetailsGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RecordsViewDetailsGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RecordsViewDetailsGetResponse v1RecordsViewDetailsGet(ApiV1RecordsViewDetailsGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RecordsViewDetailsGet(req, null, builders);
    }
}

