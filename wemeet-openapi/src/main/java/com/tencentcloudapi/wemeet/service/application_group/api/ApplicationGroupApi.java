/*
 * 腾讯会议OpenAPI
 * SAAS版RESTFUL风格API
 *
 * The version of the OpenAPI document: v1.0.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.tencentcloudapi.wemeet.service.application_group.api;

import com.tencentcloudapi.wemeet.core.Config;
import com.tencentcloudapi.wemeet.core.Constants;
import com.tencentcloudapi.wemeet.core.authenticator.AuthenticatorBuilder;
import com.tencentcloudapi.wemeet.core.xhttp.*;
import com.tencentcloudapi.wemeet.core.exception.*;
import com.tencentcloudapi.wemeet.service.application_group.model.*;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import java.io.File;


public class ApplicationGroupApi {

    private final Config config;

    public ApplicationGroupApi(Config config) {
        this.config = config;
    }

    public static class ApiV1AppToolkitPostRequest {
            private V1AppToolkitPostRequest body;

        private ApiV1AppToolkitPostRequest() {}

        private ApiV1AppToolkitPostRequest(Builder builder) {
            
            this.body = builder.body;
        }

        public static class Builder {
            
            private V1AppToolkitPostRequest body;

            /**
             */
            public Builder() {
            }
                        public Builder body(V1AppToolkitPostRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1AppToolkitPostRequest build() {
                return new ApiV1AppToolkitPostRequest(this);
            }
        }
        
        public V1AppToolkitPostRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1AppToolkitPostResponse extends ApiResponse {
        private final Object data;
        public ApiV1AppToolkitPostResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    /**
     * v1AppToolkitPost 绑定扩展应用[/v1/app/toolkit - POST]
     * <p><p/>
     * @param req ApiV1AppToolkitPostRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1AppToolkitPostResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1AppToolkitPostResponse v1AppToolkitPost(ApiV1AppToolkitPostRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/app/toolkit")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            
            // path 参数
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().post(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1AppToolkitPostResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1AppToolkitPost 绑定扩展应用[/v1/app/toolkit - POST]
    * <p><p/>
    * @param req ApiV1AppToolkitPostRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1AppToolkitPostResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1AppToolkitPostResponse v1AppToolkitPost(ApiV1AppToolkitPostRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1AppToolkitPost(req, null, builders);
    }
}

