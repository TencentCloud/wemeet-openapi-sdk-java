/*
 * 腾讯会议OpenAPI
 * SAAS版RESTFUL风格API
 *
 * The version of the OpenAPI document: v1.0.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.tencentcloudapi.wemeet.service.pstn.api;

import com.tencentcloudapi.wemeet.core.Config;
import com.tencentcloudapi.wemeet.core.Constants;
import com.tencentcloudapi.wemeet.core.authenticator.AuthenticatorBuilder;
import com.tencentcloudapi.wemeet.core.xhttp.*;
import com.tencentcloudapi.wemeet.core.exception.*;
import com.tencentcloudapi.wemeet.service.pstn.model.*;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import java.io.File;


public class PstnApi {

    private final Config config;

    public PstnApi(Config config) {
        this.config = config;
    }

    public static class ApiV1MeetingMeetingIdPhoneCalloutPostRequest {
    
        /**
         * meetingId 会议的唯一ID (required)
         */
        private String meetingId;
        private V1MeetingMeetingIdPhoneCalloutPostRequest body;

        private ApiV1MeetingMeetingIdPhoneCalloutPostRequest() {}

        private ApiV1MeetingMeetingIdPhoneCalloutPostRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId 会议的唯一ID (required)
             */
            private final String meetingId;
            

            private V1MeetingMeetingIdPhoneCalloutPostRequest body;

            /**
             * @param meetingId 会议的唯一ID
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
                        public Builder body(V1MeetingMeetingIdPhoneCalloutPostRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingMeetingIdPhoneCalloutPostRequest build() {
                return new ApiV1MeetingMeetingIdPhoneCalloutPostRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public V1MeetingMeetingIdPhoneCalloutPostRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingMeetingIdPhoneCalloutPostResponse extends ApiResponse {
        private final V1MeetingMeetingIdPhoneCalloutPost200Response data;
        public ApiV1MeetingMeetingIdPhoneCalloutPostResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingMeetingIdPhoneCalloutPost200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingMeetingIdPhoneCalloutPost200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingMeetingIdPhoneCancelcallPostRequest {
    
        /**
         * meetingId  (required)
         */
        private String meetingId;
        private V1MeetingMeetingIdPhoneCancelcallPostRequest body;

        private ApiV1MeetingMeetingIdPhoneCancelcallPostRequest() {}

        private ApiV1MeetingMeetingIdPhoneCancelcallPostRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId  (required)
             */
            private final String meetingId;
            

            private V1MeetingMeetingIdPhoneCancelcallPostRequest body;

            /**
             * @param meetingId 
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
                        public Builder body(V1MeetingMeetingIdPhoneCancelcallPostRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingMeetingIdPhoneCancelcallPostRequest build() {
                return new ApiV1MeetingMeetingIdPhoneCancelcallPostRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public V1MeetingMeetingIdPhoneCancelcallPostRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingMeetingIdPhoneCancelcallPostResponse extends ApiResponse {
        private final V1MeetingMeetingIdPhoneCancelcallPost200Response data;
        public ApiV1MeetingMeetingIdPhoneCancelcallPostResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingMeetingIdPhoneCancelcallPost200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingMeetingIdPhoneCancelcallPost200Response getData() {
            return this.data;
        }
    }

    /**
     * v1MeetingMeetingIdPhoneCalloutPost 批量外呼[/v1/meeting/{meeting_id}/phone/callout - POST]
     * <p>**描述**：  * 会议创建者、主持人、联席主持人可以批量外呼电话入会。 * 在拨打后，立刻返回，无需等待，客户通过查询接口和 Webhook 获得外呼状态。 * 需要支持在会议未开始、会中外呼。 * 每次调用支持批量外呼50路。 * \\*\\*鉴权方式：\\*\\*JWT 鉴权<p/>
     * @param req ApiV1MeetingMeetingIdPhoneCalloutPostRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingMeetingIdPhoneCalloutPostResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingMeetingIdPhoneCalloutPostResponse v1MeetingMeetingIdPhoneCalloutPost(ApiV1MeetingMeetingIdPhoneCalloutPostRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meeting/{meeting_id}/phone/callout")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().post(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingMeetingIdPhoneCalloutPostResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingMeetingIdPhoneCalloutPost 批量外呼[/v1/meeting/{meeting_id}/phone/callout - POST]
    * <p>**描述**：  * 会议创建者、主持人、联席主持人可以批量外呼电话入会。 * 在拨打后，立刻返回，无需等待，客户通过查询接口和 Webhook 获得外呼状态。 * 需要支持在会议未开始、会中外呼。 * 每次调用支持批量外呼50路。 * \\*\\*鉴权方式：\\*\\*JWT 鉴权<p/>
    * @param req ApiV1MeetingMeetingIdPhoneCalloutPostRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingMeetingIdPhoneCalloutPostResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingMeetingIdPhoneCalloutPostResponse v1MeetingMeetingIdPhoneCalloutPost(ApiV1MeetingMeetingIdPhoneCalloutPostRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingMeetingIdPhoneCalloutPost(req, null, builders);
    }
    /**
     * v1MeetingMeetingIdPhoneCancelcallPost 批量取消外呼[/v1/meeting/{meeting_id}/phone/cancelcall - POST]
     * <p><p/>
     * @param req ApiV1MeetingMeetingIdPhoneCancelcallPostRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingMeetingIdPhoneCancelcallPostResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingMeetingIdPhoneCancelcallPostResponse v1MeetingMeetingIdPhoneCancelcallPost(ApiV1MeetingMeetingIdPhoneCancelcallPostRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meeting/{meeting_id}/phone/cancelcall")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().post(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingMeetingIdPhoneCancelcallPostResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingMeetingIdPhoneCancelcallPost 批量取消外呼[/v1/meeting/{meeting_id}/phone/cancelcall - POST]
    * <p><p/>
    * @param req ApiV1MeetingMeetingIdPhoneCancelcallPostRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingMeetingIdPhoneCancelcallPostResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingMeetingIdPhoneCancelcallPostResponse v1MeetingMeetingIdPhoneCancelcallPost(ApiV1MeetingMeetingIdPhoneCancelcallPostRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingMeetingIdPhoneCancelcallPost(req, null, builders);
    }
}

