/*
 * 腾讯会议OpenAPI
 * SAAS版RESTFUL风格API
 *
 * The version of the OpenAPI document: v1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.tencentcloudapi.wemeet.service.meeting_control.model;

import java.util.*;

import com.fasterxml.jackson.annotation.*;
import org.jetbrains.annotations.NotNull;

/**
 * V1RealControlMeetingsMeetingIdKickoutPutRequest
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
public class V1RealControlMeetingsMeetingIdKickoutPutRequest {
    @JsonProperty(value = "allow_rejoin", required = true)
    private Boolean allowRejoin;

    @JsonProperty(value = "instanceid", required = true)
    private Long instanceid;

    @JsonProperty(value = "operator_id")
    private String operatorId;

    @JsonProperty(value = "operator_id_type")
    private Long operatorIdType;

    @JsonProperty(value = "reason")
    private String reason;

    @JsonProperty(value = "users", required = true)
    private List<V1RealControlMeetingsMeetingIdKickoutPutRequestUsersInner> users;

    @JsonProperty(value = "uuid")
    private String uuid;

    /**
     * @param allowRejoin 移出后是否允许再次入会： true：允许再次入会 false：不允许 (required)
     * @param instanceid 用户的终端设备类型： 0：PSTN 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：linux 20：Rooms for Touch Windows 21：Rooms for Touch MacOS 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch iOS (required)
     * @param users 被操作用户对象信息列表 (required)
     */
    public V1RealControlMeetingsMeetingIdKickoutPutRequest(@NotNull Boolean allowRejoin, @NotNull Long instanceid, @NotNull List<V1RealControlMeetingsMeetingIdKickoutPutRequestUsersInner> users) {
        this.allowRejoin = allowRejoin;
        this.instanceid = instanceid;
        this.users = users;
    }

    /**
     * @param allowRejoin 移出后是否允许再次入会： true：允许再次入会 false：不允许 (required)
     */
    public V1RealControlMeetingsMeetingIdKickoutPutRequest allowRejoin(@NotNull Boolean allowRejoin) {
        this.allowRejoin = allowRejoin;
        return this;
    }
    /**
     * @return allowRejoin 移出后是否允许再次入会： true：允许再次入会 false：不允许
     **/
    public Boolean getAllowRejoin() {
        return allowRejoin;
    }

    /**
     * @param allowRejoin 移出后是否允许再次入会： true：允许再次入会 false：不允许 (required)
     */
    public void setAllowRejoin(Boolean allowRejoin) {
        this.allowRejoin = allowRejoin;
    }
    /**
     * @param instanceid 用户的终端设备类型： 0：PSTN 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：linux 20：Rooms for Touch Windows 21：Rooms for Touch MacOS 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch iOS (required)
     */
    public V1RealControlMeetingsMeetingIdKickoutPutRequest instanceid(@NotNull Long instanceid) {
        this.instanceid = instanceid;
        return this;
    }
    /**
     * @return instanceid 用户的终端设备类型： 0：PSTN 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：linux 20：Rooms for Touch Windows 21：Rooms for Touch MacOS 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch iOS
     **/
    public Long getInstanceid() {
        return instanceid;
    }

    /**
     * @param instanceid 用户的终端设备类型： 0：PSTN 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：linux 20：Rooms for Touch Windows 21：Rooms for Touch MacOS 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch iOS (required)
     */
    public void setInstanceid(Long instanceid) {
        this.instanceid = instanceid;
    }
    /**
     * @param operatorId 操作者 ID。 1：operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 2：接口输入参数如果需要传用户 ID 时，operator_id 和 uuid 不可以同时为空，两个参数如果都传了以 operator_id 为准。 3：如果 operator_id_type&#x3D;2，operator_id 必须和公共参数的 openid 一致。
     */
    public V1RealControlMeetingsMeetingIdKickoutPutRequest operatorId(String operatorId) {
        this.operatorId = operatorId;
        return this;
    }
    /**
     * @return operatorId 操作者 ID。 1：operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 2：接口输入参数如果需要传用户 ID 时，operator_id 和 uuid 不可以同时为空，两个参数如果都传了以 operator_id 为准。 3：如果 operator_id_type&#x3D;2，operator_id 必须和公共参数的 openid 一致。
     **/
    public String getOperatorId() {
        return operatorId;
    }

    /**
     * @param operatorId 操作者 ID。 1：operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 2：接口输入参数如果需要传用户 ID 时，operator_id 和 uuid 不可以同时为空，两个参数如果都传了以 operator_id 为准。 3：如果 operator_id_type&#x3D;2，operator_id 必须和公共参数的 openid 一致。
     */
    public void setOperatorId(String operatorId) {
        this.operatorId = operatorId;
    }
    /**
     * @param operatorIdType 操作者ID的类型：2:openid 4: ms_open_id
     */
    public V1RealControlMeetingsMeetingIdKickoutPutRequest operatorIdType(Long operatorIdType) {
        this.operatorIdType = operatorIdType;
        return this;
    }
    /**
     * @return operatorIdType 操作者ID的类型：2:openid 4: ms_open_id
     **/
    public Long getOperatorIdType() {
        return operatorIdType;
    }

    /**
     * @param operatorIdType 操作者ID的类型：2:openid 4: ms_open_id
     */
    public void setOperatorIdType(Long operatorIdType) {
        this.operatorIdType = operatorIdType;
    }
    /**
     * @param reason 移出原因说明。当用户设备为 MRA 时，该参数必须填写移出原因。
     */
    public V1RealControlMeetingsMeetingIdKickoutPutRequest reason(String reason) {
        this.reason = reason;
        return this;
    }
    /**
     * @return reason 移出原因说明。当用户设备为 MRA 时，该参数必须填写移出原因。
     **/
    public String getReason() {
        return reason;
    }

    /**
     * @param reason 移出原因说明。当用户设备为 MRA 时，该参数必须填写移出原因。
     */
    public void setReason(String reason) {
        this.reason = reason;
    }
    /**
     * @param users 被操作用户对象信息列表 (required)
     */
    public V1RealControlMeetingsMeetingIdKickoutPutRequest users(@NotNull List<V1RealControlMeetingsMeetingIdKickoutPutRequestUsersInner> users) {
        this.users = users;
        return this;
    }
    /**
     * @return users 被操作用户对象信息列表
     **/
    public List<V1RealControlMeetingsMeetingIdKickoutPutRequestUsersInner> getUsers() {
        return users;
    }

    /**
     * @param users 被操作用户对象信息列表 (required)
     */
    public void setUsers(List<V1RealControlMeetingsMeetingIdKickoutPutRequestUsersInner> users) {
        this.users = users;
    }
    /**
     * @param uuid 操作者用户唯一身份 ID，仅支持主持人和联席主持人，且只适用于单场会议。即将废弃，推荐使用ms_open_id。
     */
    public V1RealControlMeetingsMeetingIdKickoutPutRequest uuid(String uuid) {
        this.uuid = uuid;
        return this;
    }
    /**
     * @return uuid 操作者用户唯一身份 ID，仅支持主持人和联席主持人，且只适用于单场会议。即将废弃，推荐使用ms_open_id。
     **/
    public String getUuid() {
        return uuid;
    }

    /**
     * @param uuid 操作者用户唯一身份 ID，仅支持主持人和联席主持人，且只适用于单场会议。即将废弃，推荐使用ms_open_id。
     */
    public void setUuid(String uuid) {
        this.uuid = uuid;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V1RealControlMeetingsMeetingIdKickoutPutRequest v1RealControlMeetingsMeetingIdKickoutPutRequest = (V1RealControlMeetingsMeetingIdKickoutPutRequest) o;
        return Objects.equals(this.allowRejoin, v1RealControlMeetingsMeetingIdKickoutPutRequest.allowRejoin) &&
            Objects.equals(this.instanceid, v1RealControlMeetingsMeetingIdKickoutPutRequest.instanceid) &&
            Objects.equals(this.operatorId, v1RealControlMeetingsMeetingIdKickoutPutRequest.operatorId) &&
            Objects.equals(this.operatorIdType, v1RealControlMeetingsMeetingIdKickoutPutRequest.operatorIdType) &&
            Objects.equals(this.reason, v1RealControlMeetingsMeetingIdKickoutPutRequest.reason) &&
            Objects.equals(this.users, v1RealControlMeetingsMeetingIdKickoutPutRequest.users) &&
            Objects.equals(this.uuid, v1RealControlMeetingsMeetingIdKickoutPutRequest.uuid);
    }

    @Override
    public int hashCode() {
        return Objects.hash(allowRejoin, instanceid, operatorId, operatorIdType, reason, users, uuid);
    }

    /**
    * Convert the given object to string with each line indented by 4 spaces
    * (except the first line).
    */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class V1RealControlMeetingsMeetingIdKickoutPutRequest {\n");
        sb.append("    allowRejoin: ").append(toIndentedString(allowRejoin)).append("\n");
        sb.append("    instanceid: ").append(toIndentedString(instanceid)).append("\n");
        sb.append("    operatorId: ").append(toIndentedString(operatorId)).append("\n");
        sb.append("    operatorIdType: ").append(toIndentedString(operatorIdType)).append("\n");
        sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
        sb.append("    users: ").append(toIndentedString(users)).append("\n");
        sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
        sb.append("}");
        return sb.toString();
    }
}

