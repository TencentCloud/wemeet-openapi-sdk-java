/*
 * 腾讯会议OpenAPI
 * SAAS版RESTFUL风格API
 *
 * The version of the OpenAPI document: v1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.tencentcloudapi.wemeet.service.meetings.model;

import java.util.*;

import com.fasterxml.jackson.annotation.*;
import org.jetbrains.annotations.NotNull;

/**
 * V1MeetingsMeetingIdPutRequest
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
public class V1MeetingsMeetingIdPutRequest {
    @JsonProperty(value = "allow_enterprise_intranet_only")
    private Boolean allowEnterpriseIntranetOnly;

    @JsonProperty(value = "enable_doc_upload_permission")
    private Boolean enableDocUploadPermission;

    @JsonProperty(value = "enable_enroll")
    private Boolean enableEnroll;

    @JsonProperty(value = "enable_host_key")
    private Boolean enableHostKey;

    @JsonProperty(value = "enable_live")
    private Boolean enableLive;

    @JsonProperty(value = "end_time")
    private String endTime;

    @JsonProperty(value = "guests")
    private List<V1MeetingsPostRequestGuestsInner> guests;

    @JsonProperty(value = "host_key")
    private String hostKey;

    @JsonProperty(value = "hosts")
    private List<V1MeetingsMeetingIdPutRequestHostsInner> hosts;

    @JsonProperty(value = "instanceid", required = true)
    private Long instanceid;

    @JsonProperty(value = "invitees")
    private List<V1MeetingsPostRequestInviteesInner> invitees;

    @JsonProperty(value = "live_config")
    private V1MeetingsMeetingIdPutRequestLiveConfig liveConfig;

    @JsonProperty(value = "location")
    private String location;

    @JsonProperty(value = "media_set_type")
    private Long mediaSetType;

    @JsonProperty(value = "meeting_type")
    private Long meetingType;

    @JsonProperty(value = "password")
    private String password;

    @JsonProperty(value = "recurring_rule")
    private V1MeetingsMeetingIdPutRequestRecurringRule recurringRule;

    @JsonProperty(value = "settings")
    private V1MeetingsMeetingIdPutRequestSettings settings;

    @JsonProperty(value = "start_time")
    private String startTime;

    @JsonProperty(value = "subject")
    private String subject;

    @JsonProperty(value = "time_zone")
    private String timeZone;

    @JsonProperty(value = "userid", required = true)
    private String userid;

    /**
     * @param instanceid 用户的终端设备类型： 0：PSTN 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：linux 20：Rooms for Touch Windows 21：Rooms for Touch MacOS 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch iOS (required)
     * @param userid 会议创建者 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 企业唯一用户标识说明： 1. 企业对接 SSO 时使用的员工唯一标识 ID。 2. 企业调用创建用户接口时传递的 userid 参数。  (required)
     */
    public V1MeetingsMeetingIdPutRequest(@NotNull Long instanceid, @NotNull String userid) {
        this.instanceid = instanceid;
        this.userid = userid;
    }

    /**
     * @param allowEnterpriseIntranetOnly 如果没有权限创建专网会议，该字段忽略
     */
    public V1MeetingsMeetingIdPutRequest allowEnterpriseIntranetOnly(Boolean allowEnterpriseIntranetOnly) {
        this.allowEnterpriseIntranetOnly = allowEnterpriseIntranetOnly;
        return this;
    }
    /**
     * @return allowEnterpriseIntranetOnly 如果没有权限创建专网会议，该字段忽略
     **/
    public Boolean getAllowEnterpriseIntranetOnly() {
        return allowEnterpriseIntranetOnly;
    }

    /**
     * @param allowEnterpriseIntranetOnly 如果没有权限创建专网会议，该字段忽略
     */
    public void setAllowEnterpriseIntranetOnly(Boolean allowEnterpriseIntranetOnly) {
        this.allowEnterpriseIntranetOnly = allowEnterpriseIntranetOnly;
    }
    /**
     * @param enableDocUploadPermission 是否允许成员上传文档，默认为允许
     */
    public V1MeetingsMeetingIdPutRequest enableDocUploadPermission(Boolean enableDocUploadPermission) {
        this.enableDocUploadPermission = enableDocUploadPermission;
        return this;
    }
    /**
     * @return enableDocUploadPermission 是否允许成员上传文档，默认为允许
     **/
    public Boolean getEnableDocUploadPermission() {
        return enableDocUploadPermission;
    }

    /**
     * @param enableDocUploadPermission 是否允许成员上传文档，默认为允许
     */
    public void setEnableDocUploadPermission(Boolean enableDocUploadPermission) {
        this.enableDocUploadPermission = enableDocUploadPermission;
    }
    /**
     * @param enableEnroll 是否开启报名开关，默认不开启
     */
    public V1MeetingsMeetingIdPutRequest enableEnroll(Boolean enableEnroll) {
        this.enableEnroll = enableEnroll;
        return this;
    }
    /**
     * @return enableEnroll 是否开启报名开关，默认不开启
     **/
    public Boolean getEnableEnroll() {
        return enableEnroll;
    }

    /**
     * @param enableEnroll 是否开启报名开关，默认不开启
     */
    public void setEnableEnroll(Boolean enableEnroll) {
        this.enableEnroll = enableEnroll;
    }
    /**
     * @param enableHostKey 是否开启主持人密钥，默认为false。 true：开启 false：关闭 修改周期性会议的主持人密钥适用于接下来的所有子会议。
     */
    public V1MeetingsMeetingIdPutRequest enableHostKey(Boolean enableHostKey) {
        this.enableHostKey = enableHostKey;
        return this;
    }
    /**
     * @return enableHostKey 是否开启主持人密钥，默认为false。 true：开启 false：关闭 修改周期性会议的主持人密钥适用于接下来的所有子会议。
     **/
    public Boolean getEnableHostKey() {
        return enableHostKey;
    }

    /**
     * @param enableHostKey 是否开启主持人密钥，默认为false。 true：开启 false：关闭 修改周期性会议的主持人密钥适用于接下来的所有子会议。
     */
    public void setEnableHostKey(Boolean enableHostKey) {
        this.enableHostKey = enableHostKey;
    }
    /**
     * @param enableLive 是否开启直播,默认不开启
     */
    public V1MeetingsMeetingIdPutRequest enableLive(Boolean enableLive) {
        this.enableLive = enableLive;
        return this;
    }
    /**
     * @return enableLive 是否开启直播,默认不开启
     **/
    public Boolean getEnableLive() {
        return enableLive;
    }

    /**
     * @param enableLive 是否开启直播,默认不开启
     */
    public void setEnableLive(Boolean enableLive) {
        this.enableLive = enableLive;
    }
    /**
     * @param endTime 会议结束时间戳（单位秒）
     */
    public V1MeetingsMeetingIdPutRequest endTime(String endTime) {
        this.endTime = endTime;
        return this;
    }
    /**
     * @return endTime 会议结束时间戳（单位秒）
     **/
    public String getEndTime() {
        return endTime;
    }

    /**
     * @param endTime 会议结束时间戳（单位秒）
     */
    public void setEndTime(String endTime) {
        this.endTime = endTime;
    }
    /**
     * @param guests 会议嘉宾列表，会议嘉宾不受会议密码和等候室的限制。不传该字段代表不修改。注意：传空数组会清空嘉宾列表。
     */
    public V1MeetingsMeetingIdPutRequest guests(List<V1MeetingsPostRequestGuestsInner> guests) {
        this.guests = guests;
        return this;
    }
    /**
     * @return guests 会议嘉宾列表，会议嘉宾不受会议密码和等候室的限制。不传该字段代表不修改。注意：传空数组会清空嘉宾列表。
     **/
    public List<V1MeetingsPostRequestGuestsInner> getGuests() {
        return guests;
    }

    /**
     * @param guests 会议嘉宾列表，会议嘉宾不受会议密码和等候室的限制。不传该字段代表不修改。注意：传空数组会清空嘉宾列表。
     */
    public void setGuests(List<V1MeetingsPostRequestGuestsInner> guests) {
        this.guests = guests;
    }
    /**
     * @param hostKey 主持人密钥，仅支持6位数字。 如开启主持人密钥后没有填写此项，将自动分配一个6位数字的密钥。
     */
    public V1MeetingsMeetingIdPutRequest hostKey(String hostKey) {
        this.hostKey = hostKey;
        return this;
    }
    /**
     * @return hostKey 主持人密钥，仅支持6位数字。 如开启主持人密钥后没有填写此项，将自动分配一个6位数字的密钥。
     **/
    public String getHostKey() {
        return hostKey;
    }

    /**
     * @param hostKey 主持人密钥，仅支持6位数字。 如开启主持人密钥后没有填写此项，将自动分配一个6位数字的密钥。
     */
    public void setHostKey(String hostKey) {
        this.hostKey = hostKey;
    }
    /**
     * @param hosts 主持人列表。 不传入该字段则不修改，传入空列表即覆盖为空。
     */
    public V1MeetingsMeetingIdPutRequest hosts(List<V1MeetingsMeetingIdPutRequestHostsInner> hosts) {
        this.hosts = hosts;
        return this;
    }
    /**
     * @return hosts 主持人列表。 不传入该字段则不修改，传入空列表即覆盖为空。
     **/
    public List<V1MeetingsMeetingIdPutRequestHostsInner> getHosts() {
        return hosts;
    }

    /**
     * @param hosts 主持人列表。 不传入该字段则不修改，传入空列表即覆盖为空。
     */
    public void setHosts(List<V1MeetingsMeetingIdPutRequestHostsInner> hosts) {
        this.hosts = hosts;
    }
    /**
     * @param instanceid 用户的终端设备类型： 0：PSTN 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：linux 20：Rooms for Touch Windows 21：Rooms for Touch MacOS 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch iOS (required)
     */
    public V1MeetingsMeetingIdPutRequest instanceid(@NotNull Long instanceid) {
        this.instanceid = instanceid;
        return this;
    }
    /**
     * @return instanceid 用户的终端设备类型： 0：PSTN 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：linux 20：Rooms for Touch Windows 21：Rooms for Touch MacOS 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch iOS
     **/
    public Long getInstanceid() {
        return instanceid;
    }

    /**
     * @param instanceid 用户的终端设备类型： 0：PSTN 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：linux 20：Rooms for Touch Windows 21：Rooms for Touch MacOS 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch iOS (required)
     */
    public void setInstanceid(Long instanceid) {
        this.instanceid = instanceid;
    }
    /**
     * @param invitees 邀请人列表，调用方用于标示用户的唯一 ID，仅支持邀请与会议创建者同企业的成员（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 企业唯一用户标识说明： 企业对接 SSO 时使用的员工唯一标识 ID。 企业调用创建用户接口时传递的 userid 参数。 注意：仅腾讯会议商业版和企业版可邀请参会者，邀请者列表仅支持300人；需要邀请超过300人的场景请调用 设置会议邀请成员 接口。
     */
    public V1MeetingsMeetingIdPutRequest invitees(List<V1MeetingsPostRequestInviteesInner> invitees) {
        this.invitees = invitees;
        return this;
    }
    /**
     * @return invitees 邀请人列表，调用方用于标示用户的唯一 ID，仅支持邀请与会议创建者同企业的成员（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 企业唯一用户标识说明： 企业对接 SSO 时使用的员工唯一标识 ID。 企业调用创建用户接口时传递的 userid 参数。 注意：仅腾讯会议商业版和企业版可邀请参会者，邀请者列表仅支持300人；需要邀请超过300人的场景请调用 设置会议邀请成员 接口。
     **/
    public List<V1MeetingsPostRequestInviteesInner> getInvitees() {
        return invitees;
    }

    /**
     * @param invitees 邀请人列表，调用方用于标示用户的唯一 ID，仅支持邀请与会议创建者同企业的成员（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 企业唯一用户标识说明： 企业对接 SSO 时使用的员工唯一标识 ID。 企业调用创建用户接口时传递的 userid 参数。 注意：仅腾讯会议商业版和企业版可邀请参会者，邀请者列表仅支持300人；需要邀请超过300人的场景请调用 设置会议邀请成员 接口。
     */
    public void setInvitees(List<V1MeetingsPostRequestInviteesInner> invitees) {
        this.invitees = invitees;
    }
    /**
     * @param liveConfig 
     */
    public V1MeetingsMeetingIdPutRequest liveConfig(V1MeetingsMeetingIdPutRequestLiveConfig liveConfig) {
        this.liveConfig = liveConfig;
        return this;
    }
    /**
     * @return liveConfig 
     **/
    public V1MeetingsMeetingIdPutRequestLiveConfig getLiveConfig() {
        return liveConfig;
    }

    /**
     * @param liveConfig 
     */
    public void setLiveConfig(V1MeetingsMeetingIdPutRequestLiveConfig liveConfig) {
        this.liveConfig = liveConfig;
    }
    /**
     * @param location 会议地点。最长支持18个汉字或36个英文字母。
     */
    public V1MeetingsMeetingIdPutRequest location(String location) {
        this.location = location;
        return this;
    }
    /**
     * @return location 会议地点。最长支持18个汉字或36个英文字母。
     **/
    public String getLocation() {
        return location;
    }

    /**
     * @param location 会议地点。最长支持18个汉字或36个英文字母。
     */
    public void setLocation(String location) {
        this.location = location;
    }
    /**
     * @param mediaSetType 该参数仅提供给支持混合云的企业可见，默认值为0。 0：外部会议 1：内部会议
     */
    public V1MeetingsMeetingIdPutRequest mediaSetType(Long mediaSetType) {
        this.mediaSetType = mediaSetType;
        return this;
    }
    /**
     * @return mediaSetType 该参数仅提供给支持混合云的企业可见，默认值为0。 0：外部会议 1：内部会议
     **/
    public Long getMediaSetType() {
        return mediaSetType;
    }

    /**
     * @param mediaSetType 该参数仅提供给支持混合云的企业可见，默认值为0。 0：外部会议 1：内部会议
     */
    public void setMediaSetType(Long mediaSetType) {
        this.mediaSetType = mediaSetType;
    }
    /**
     * @param meetingType 默认值为0。  0：普通会议  1：周期性会议（周期性会议时 type 不能为快速会议，同一账号同时最多可预定50场周期性会议）
     */
    public V1MeetingsMeetingIdPutRequest meetingType(Long meetingType) {
        this.meetingType = meetingType;
        return this;
    }
    /**
     * @return meetingType 默认值为0。  0：普通会议  1：周期性会议（周期性会议时 type 不能为快速会议，同一账号同时最多可预定50场周期性会议）
     **/
    public Long getMeetingType() {
        return meetingType;
    }

    /**
     * @param meetingType 默认值为0。  0：普通会议  1：周期性会议（周期性会议时 type 不能为快速会议，同一账号同时最多可预定50场周期性会议）
     */
    public void setMeetingType(Long meetingType) {
        this.meetingType = meetingType;
    }
    /**
     * @param password 会议密码（4~6位数字），可不填。如果将字段值改为空字符串\&quot;\&quot;，则表示取消会议密码
     */
    public V1MeetingsMeetingIdPutRequest password(String password) {
        this.password = password;
        return this;
    }
    /**
     * @return password 会议密码（4~6位数字），可不填。如果将字段值改为空字符串\&quot;\&quot;，则表示取消会议密码
     **/
    public String getPassword() {
        return password;
    }

    /**
     * @param password 会议密码（4~6位数字），可不填。如果将字段值改为空字符串\&quot;\&quot;，则表示取消会议密码
     */
    public void setPassword(String password) {
        this.password = password;
    }
    /**
     * @param recurringRule 
     */
    public V1MeetingsMeetingIdPutRequest recurringRule(V1MeetingsMeetingIdPutRequestRecurringRule recurringRule) {
        this.recurringRule = recurringRule;
        return this;
    }
    /**
     * @return recurringRule 
     **/
    public V1MeetingsMeetingIdPutRequestRecurringRule getRecurringRule() {
        return recurringRule;
    }

    /**
     * @param recurringRule 
     */
    public void setRecurringRule(V1MeetingsMeetingIdPutRequestRecurringRule recurringRule) {
        this.recurringRule = recurringRule;
    }
    /**
     * @param settings 
     */
    public V1MeetingsMeetingIdPutRequest settings(V1MeetingsMeetingIdPutRequestSettings settings) {
        this.settings = settings;
        return this;
    }
    /**
     * @return settings 
     **/
    public V1MeetingsMeetingIdPutRequestSettings getSettings() {
        return settings;
    }

    /**
     * @param settings 
     */
    public void setSettings(V1MeetingsMeetingIdPutRequestSettings settings) {
        this.settings = settings;
    }
    /**
     * @param startTime 会议开始时间戳（单位秒）
     */
    public V1MeetingsMeetingIdPutRequest startTime(String startTime) {
        this.startTime = startTime;
        return this;
    }
    /**
     * @return startTime 会议开始时间戳（单位秒）
     **/
    public String getStartTime() {
        return startTime;
    }

    /**
     * @param startTime 会议开始时间戳（单位秒）
     */
    public void setStartTime(String startTime) {
        this.startTime = startTime;
    }
    /**
     * @param subject 会议主题
     */
    public V1MeetingsMeetingIdPutRequest subject(String subject) {
        this.subject = subject;
        return this;
    }
    /**
     * @return subject 会议主题
     **/
    public String getSubject() {
        return subject;
    }

    /**
     * @param subject 会议主题
     */
    public void setSubject(String subject) {
        this.subject = subject;
    }
    /**
     * @param timeZone 时区，可参见 Oracle-TimeZone 标准。
     */
    public V1MeetingsMeetingIdPutRequest timeZone(String timeZone) {
        this.timeZone = timeZone;
        return this;
    }
    /**
     * @return timeZone 时区，可参见 Oracle-TimeZone 标准。
     **/
    public String getTimeZone() {
        return timeZone;
    }

    /**
     * @param timeZone 时区，可参见 Oracle-TimeZone 标准。
     */
    public void setTimeZone(String timeZone) {
        this.timeZone = timeZone;
    }
    /**
     * @param userid 会议创建者 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 企业唯一用户标识说明： 1. 企业对接 SSO 时使用的员工唯一标识 ID。 2. 企业调用创建用户接口时传递的 userid 参数。  (required)
     */
    public V1MeetingsMeetingIdPutRequest userid(@NotNull String userid) {
        this.userid = userid;
        return this;
    }
    /**
     * @return userid 会议创建者 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 企业唯一用户标识说明： 1. 企业对接 SSO 时使用的员工唯一标识 ID。 2. 企业调用创建用户接口时传递的 userid 参数。 
     **/
    public String getUserid() {
        return userid;
    }

    /**
     * @param userid 会议创建者 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 企业唯一用户标识说明： 1. 企业对接 SSO 时使用的员工唯一标识 ID。 2. 企业调用创建用户接口时传递的 userid 参数。  (required)
     */
    public void setUserid(String userid) {
        this.userid = userid;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V1MeetingsMeetingIdPutRequest v1MeetingsMeetingIdPutRequest = (V1MeetingsMeetingIdPutRequest) o;
        return Objects.equals(this.allowEnterpriseIntranetOnly, v1MeetingsMeetingIdPutRequest.allowEnterpriseIntranetOnly) &&
            Objects.equals(this.enableDocUploadPermission, v1MeetingsMeetingIdPutRequest.enableDocUploadPermission) &&
            Objects.equals(this.enableEnroll, v1MeetingsMeetingIdPutRequest.enableEnroll) &&
            Objects.equals(this.enableHostKey, v1MeetingsMeetingIdPutRequest.enableHostKey) &&
            Objects.equals(this.enableLive, v1MeetingsMeetingIdPutRequest.enableLive) &&
            Objects.equals(this.endTime, v1MeetingsMeetingIdPutRequest.endTime) &&
            Objects.equals(this.guests, v1MeetingsMeetingIdPutRequest.guests) &&
            Objects.equals(this.hostKey, v1MeetingsMeetingIdPutRequest.hostKey) &&
            Objects.equals(this.hosts, v1MeetingsMeetingIdPutRequest.hosts) &&
            Objects.equals(this.instanceid, v1MeetingsMeetingIdPutRequest.instanceid) &&
            Objects.equals(this.invitees, v1MeetingsMeetingIdPutRequest.invitees) &&
            Objects.equals(this.liveConfig, v1MeetingsMeetingIdPutRequest.liveConfig) &&
            Objects.equals(this.location, v1MeetingsMeetingIdPutRequest.location) &&
            Objects.equals(this.mediaSetType, v1MeetingsMeetingIdPutRequest.mediaSetType) &&
            Objects.equals(this.meetingType, v1MeetingsMeetingIdPutRequest.meetingType) &&
            Objects.equals(this.password, v1MeetingsMeetingIdPutRequest.password) &&
            Objects.equals(this.recurringRule, v1MeetingsMeetingIdPutRequest.recurringRule) &&
            Objects.equals(this.settings, v1MeetingsMeetingIdPutRequest.settings) &&
            Objects.equals(this.startTime, v1MeetingsMeetingIdPutRequest.startTime) &&
            Objects.equals(this.subject, v1MeetingsMeetingIdPutRequest.subject) &&
            Objects.equals(this.timeZone, v1MeetingsMeetingIdPutRequest.timeZone) &&
            Objects.equals(this.userid, v1MeetingsMeetingIdPutRequest.userid);
    }

    @Override
    public int hashCode() {
        return Objects.hash(allowEnterpriseIntranetOnly, enableDocUploadPermission, enableEnroll, enableHostKey, enableLive, endTime, guests, hostKey, hosts, instanceid, invitees, liveConfig, location, mediaSetType, meetingType, password, recurringRule, settings, startTime, subject, timeZone, userid);
    }

    /**
    * Convert the given object to string with each line indented by 4 spaces
    * (except the first line).
    */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class V1MeetingsMeetingIdPutRequest {\n");
        sb.append("    allowEnterpriseIntranetOnly: ").append(toIndentedString(allowEnterpriseIntranetOnly)).append("\n");
        sb.append("    enableDocUploadPermission: ").append(toIndentedString(enableDocUploadPermission)).append("\n");
        sb.append("    enableEnroll: ").append(toIndentedString(enableEnroll)).append("\n");
        sb.append("    enableHostKey: ").append(toIndentedString(enableHostKey)).append("\n");
        sb.append("    enableLive: ").append(toIndentedString(enableLive)).append("\n");
        sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
        sb.append("    guests: ").append(toIndentedString(guests)).append("\n");
        sb.append("    hostKey: ").append(toIndentedString(hostKey)).append("\n");
        sb.append("    hosts: ").append(toIndentedString(hosts)).append("\n");
        sb.append("    instanceid: ").append(toIndentedString(instanceid)).append("\n");
        sb.append("    invitees: ").append(toIndentedString(invitees)).append("\n");
        sb.append("    liveConfig: ").append(toIndentedString(liveConfig)).append("\n");
        sb.append("    location: ").append(toIndentedString(location)).append("\n");
        sb.append("    mediaSetType: ").append(toIndentedString(mediaSetType)).append("\n");
        sb.append("    meetingType: ").append(toIndentedString(meetingType)).append("\n");
        sb.append("    password: ").append(toIndentedString(password)).append("\n");
        sb.append("    recurringRule: ").append(toIndentedString(recurringRule)).append("\n");
        sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
        sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
        sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
        sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
        sb.append("    userid: ").append(toIndentedString(userid)).append("\n");
        sb.append("}");
        return sb.toString();
    }
}

