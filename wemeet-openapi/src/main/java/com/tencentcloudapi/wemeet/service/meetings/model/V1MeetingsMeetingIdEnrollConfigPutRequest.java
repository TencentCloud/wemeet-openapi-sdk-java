/*
 * 腾讯会议OpenAPI
 * SAAS版RESTFUL风格API
 *
 * The version of the OpenAPI document: v1.0.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.tencentcloudapi.wemeet.service.meetings.model;

import java.util.*;
import java.math.BigDecimal;

import com.fasterxml.jackson.annotation.*;
import org.jetbrains.annotations.NotNull;

/**
 * V1MeetingsMeetingIdEnrollConfigPutRequest
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
public class V1MeetingsMeetingIdEnrollConfigPutRequest {
    @JsonProperty(value = "approve_type")
    private Long approveType;

    @JsonProperty(value = "cover_image")
    private List<String> coverImage;

    @JsonProperty(value = "display_number_of_participants")
    private Long displayNumberOfParticipants;

    @JsonProperty(value = "enroll_deadline")
    private String enrollDeadline;

    @JsonProperty(value = "enroll_description")
    private String enrollDescription;

    @JsonProperty(value = "enroll_number")
    private Long enrollNumber;

    @JsonProperty(value = "enroll_push_type")
    private List<Long> enrollPushType;

    @JsonProperty(value = "instanceid", required = true)
    private Long instanceid;

    @JsonProperty(value = "is_collect_question")
    private Long isCollectQuestion;

    @JsonProperty(value = "no_registration_needed_for_staff")
    private Boolean noRegistrationNeededForStaff;

    @JsonProperty(value = "operator_id", required = true)
    private String operatorId;

    @JsonProperty(value = "operator_id_type", required = true)
    private Long operatorIdType;

    @JsonProperty(value = "question_list")
    private List<V1MeetingsMeetingIdEnrollConfigPutRequestQuestionListInner> questionList;

    /**
     * @param instanceid 设备类型 (required)
     * @param operatorId 操作者 ID。会议创建者可以导入报名信息。 operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。  operator_id_type&#x3D;2，operator_id必须和公共参数的openid一致。  operator_id和userid至少填写一个，两个参数如果都传了以operator_id为准。  使用OAuth公参鉴权后不能使用userid为入参。 (required)
     * @param operatorIdType 操作者 ID 的类型：  1: userid 2: open_id  如果operator_id和userid具有值，则以operator_id为准； (required)
     */
    public V1MeetingsMeetingIdEnrollConfigPutRequest(@NotNull Long instanceid, @NotNull String operatorId, @NotNull Long operatorIdType) {
        this.instanceid = instanceid;
        this.operatorId = operatorId;
        this.operatorIdType = operatorIdType;
    }

    /**
     * @param approveType 审批类型：1 自动审批，2 手动审批，默认自动审批
     */
    public V1MeetingsMeetingIdEnrollConfigPutRequest approveType(Long approveType) {
        this.approveType = approveType;
        return this;
    }
    /**
     * @return approveType 审批类型：1 自动审批，2 手动审批，默认自动审批
     **/
    public Long getApproveType() {
        return approveType;
    }

    /**
     * @param approveType 审批类型：1 自动审批，2 手动审批，默认自动审批
     */
    public void setApproveType(Long approveType) {
        this.approveType = approveType;
    }
    /**
     * @param coverImage 报名封面图的URL，上传封面为异步形式，通过异步任务结果webhook获取上传结果，列表内容为空字符串时为默认图片，不传或传空列表则不做修改，最多支持5张，支持格式为jpg，jpeg，png。每张不超过5M，按照传入顺序展示。
     */
    public V1MeetingsMeetingIdEnrollConfigPutRequest coverImage(List<String> coverImage) {
        this.coverImage = coverImage;
        return this;
    }
    /**
     * @return coverImage 报名封面图的URL，上传封面为异步形式，通过异步任务结果webhook获取上传结果，列表内容为空字符串时为默认图片，不传或传空列表则不做修改，最多支持5张，支持格式为jpg，jpeg，png。每张不超过5M，按照传入顺序展示。
     **/
    public List<String> getCoverImage() {
        return coverImage;
    }

    /**
     * @param coverImage 报名封面图的URL，上传封面为异步形式，通过异步任务结果webhook获取上传结果，列表内容为空字符串时为默认图片，不传或传空列表则不做修改，最多支持5张，支持格式为jpg，jpeg，png。每张不超过5M，按照传入顺序展示。
     */
    public void setCoverImage(List<String> coverImage) {
        this.coverImage = coverImage;
    }
    /**
     * @param displayNumberOfParticipants 显示已报名/预约人数。0：不展示 1：展示，默认开启
     */
    public V1MeetingsMeetingIdEnrollConfigPutRequest displayNumberOfParticipants(Long displayNumberOfParticipants) {
        this.displayNumberOfParticipants = displayNumberOfParticipants;
        return this;
    }
    /**
     * @return displayNumberOfParticipants 显示已报名/预约人数。0：不展示 1：展示，默认开启
     **/
    public Long getDisplayNumberOfParticipants() {
        return displayNumberOfParticipants;
    }

    /**
     * @param displayNumberOfParticipants 显示已报名/预约人数。0：不展示 1：展示，默认开启
     */
    public void setDisplayNumberOfParticipants(Long displayNumberOfParticipants) {
        this.displayNumberOfParticipants = displayNumberOfParticipants;
    }
    /**
     * @param enrollDeadline 报名截止时间（秒级时间戳）
     */
    public V1MeetingsMeetingIdEnrollConfigPutRequest enrollDeadline(String enrollDeadline) {
        this.enrollDeadline = enrollDeadline;
        return this;
    }
    /**
     * @return enrollDeadline 报名截止时间（秒级时间戳）
     **/
    public String getEnrollDeadline() {
        return enrollDeadline;
    }

    /**
     * @param enrollDeadline 报名截止时间（秒级时间戳）
     */
    public void setEnrollDeadline(String enrollDeadline) {
        this.enrollDeadline = enrollDeadline;
    }
    /**
     * @param enrollDescription 报名页详情介绍，最多5000字符
     */
    public V1MeetingsMeetingIdEnrollConfigPutRequest enrollDescription(String enrollDescription) {
        this.enrollDescription = enrollDescription;
        return this;
    }
    /**
     * @return enrollDescription 报名页详情介绍，最多5000字符
     **/
    public String getEnrollDescription() {
        return enrollDescription;
    }

    /**
     * @param enrollDescription 报名页详情介绍，最多5000字符
     */
    public void setEnrollDescription(String enrollDescription) {
        this.enrollDescription = enrollDescription;
    }
    /**
     * @param enrollNumber 报名人数上限
     */
    public V1MeetingsMeetingIdEnrollConfigPutRequest enrollNumber(Long enrollNumber) {
        this.enrollNumber = enrollNumber;
        return this;
    }
    /**
     * @return enrollNumber 报名人数上限
     **/
    public Long getEnrollNumber() {
        return enrollNumber;
    }

    /**
     * @param enrollNumber 报名人数上限
     */
    public void setEnrollNumber(Long enrollNumber) {
        this.enrollNumber = enrollNumber;
    }
    /**
     * @param enrollPushType 报名审批自动通知方式，1-短信通知；2-邮件中文；3-邮件英文；4-邮件中英文；5-公众号
     */
    public V1MeetingsMeetingIdEnrollConfigPutRequest enrollPushType(List<Long> enrollPushType) {
        this.enrollPushType = enrollPushType;
        return this;
    }
    /**
     * @return enrollPushType 报名审批自动通知方式，1-短信通知；2-邮件中文；3-邮件英文；4-邮件中英文；5-公众号
     **/
    public List<Long> getEnrollPushType() {
        return enrollPushType;
    }

    /**
     * @param enrollPushType 报名审批自动通知方式，1-短信通知；2-邮件中文；3-邮件英文；4-邮件中英文；5-公众号
     */
    public void setEnrollPushType(List<Long> enrollPushType) {
        this.enrollPushType = enrollPushType;
    }
    /**
     * @param instanceid 设备类型 (required)
     */
    public V1MeetingsMeetingIdEnrollConfigPutRequest instanceid(@NotNull Long instanceid) {
        this.instanceid = instanceid;
        return this;
    }
    /**
     * @return instanceid 设备类型
     **/
    public Long getInstanceid() {
        return instanceid;
    }

    /**
     * @param instanceid 设备类型 (required)
     */
    public void setInstanceid(Long instanceid) {
        this.instanceid = instanceid;
    }
    /**
     * @param isCollectQuestion 是否收集问题：1 不收集，2 收集，默认不收集问题
     */
    public V1MeetingsMeetingIdEnrollConfigPutRequest isCollectQuestion(Long isCollectQuestion) {
        this.isCollectQuestion = isCollectQuestion;
        return this;
    }
    /**
     * @return isCollectQuestion 是否收集问题：1 不收集，2 收集，默认不收集问题
     **/
    public Long getIsCollectQuestion() {
        return isCollectQuestion;
    }

    /**
     * @param isCollectQuestion 是否收集问题：1 不收集，2 收集，默认不收集问题
     */
    public void setIsCollectQuestion(Long isCollectQuestion) {
        this.isCollectQuestion = isCollectQuestion;
    }
    /**
     * @param noRegistrationNeededForStaff 本企业用户无需报名。 true: 本企业用户无需报名。 false：默认配置，所有用户需要报名。 
     */
    public V1MeetingsMeetingIdEnrollConfigPutRequest noRegistrationNeededForStaff(Boolean noRegistrationNeededForStaff) {
        this.noRegistrationNeededForStaff = noRegistrationNeededForStaff;
        return this;
    }
    /**
     * @return noRegistrationNeededForStaff 本企业用户无需报名。 true: 本企业用户无需报名。 false：默认配置，所有用户需要报名。 
     **/
    public Boolean getNoRegistrationNeededForStaff() {
        return noRegistrationNeededForStaff;
    }

    /**
     * @param noRegistrationNeededForStaff 本企业用户无需报名。 true: 本企业用户无需报名。 false：默认配置，所有用户需要报名。 
     */
    public void setNoRegistrationNeededForStaff(Boolean noRegistrationNeededForStaff) {
        this.noRegistrationNeededForStaff = noRegistrationNeededForStaff;
    }
    /**
     * @param operatorId 操作者 ID。会议创建者可以导入报名信息。 operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。  operator_id_type&#x3D;2，operator_id必须和公共参数的openid一致。  operator_id和userid至少填写一个，两个参数如果都传了以operator_id为准。  使用OAuth公参鉴权后不能使用userid为入参。 (required)
     */
    public V1MeetingsMeetingIdEnrollConfigPutRequest operatorId(@NotNull String operatorId) {
        this.operatorId = operatorId;
        return this;
    }
    /**
     * @return operatorId 操作者 ID。会议创建者可以导入报名信息。 operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。  operator_id_type&#x3D;2，operator_id必须和公共参数的openid一致。  operator_id和userid至少填写一个，两个参数如果都传了以operator_id为准。  使用OAuth公参鉴权后不能使用userid为入参。
     **/
    public String getOperatorId() {
        return operatorId;
    }

    /**
     * @param operatorId 操作者 ID。会议创建者可以导入报名信息。 operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。  operator_id_type&#x3D;2，operator_id必须和公共参数的openid一致。  operator_id和userid至少填写一个，两个参数如果都传了以operator_id为准。  使用OAuth公参鉴权后不能使用userid为入参。 (required)
     */
    public void setOperatorId(String operatorId) {
        this.operatorId = operatorId;
    }
    /**
     * @param operatorIdType 操作者 ID 的类型：  1: userid 2: open_id  如果operator_id和userid具有值，则以operator_id为准； (required)
     */
    public V1MeetingsMeetingIdEnrollConfigPutRequest operatorIdType(@NotNull Long operatorIdType) {
        this.operatorIdType = operatorIdType;
        return this;
    }
    /**
     * @return operatorIdType 操作者 ID 的类型：  1: userid 2: open_id  如果operator_id和userid具有值，则以operator_id为准；
     **/
    public Long getOperatorIdType() {
        return operatorIdType;
    }

    /**
     * @param operatorIdType 操作者 ID 的类型：  1: userid 2: open_id  如果operator_id和userid具有值，则以operator_id为准； (required)
     */
    public void setOperatorIdType(Long operatorIdType) {
        this.operatorIdType = operatorIdType;
    }
    /**
     * @param questionList 报名问题列表，非特殊问题按传入的顺序排序，特殊问题会优先放在最前面，仅开启收集问题时有效
     */
    public V1MeetingsMeetingIdEnrollConfigPutRequest questionList(List<V1MeetingsMeetingIdEnrollConfigPutRequestQuestionListInner> questionList) {
        this.questionList = questionList;
        return this;
    }
    /**
     * @return questionList 报名问题列表，非特殊问题按传入的顺序排序，特殊问题会优先放在最前面，仅开启收集问题时有效
     **/
    public List<V1MeetingsMeetingIdEnrollConfigPutRequestQuestionListInner> getQuestionList() {
        return questionList;
    }

    /**
     * @param questionList 报名问题列表，非特殊问题按传入的顺序排序，特殊问题会优先放在最前面，仅开启收集问题时有效
     */
    public void setQuestionList(List<V1MeetingsMeetingIdEnrollConfigPutRequestQuestionListInner> questionList) {
        this.questionList = questionList;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V1MeetingsMeetingIdEnrollConfigPutRequest v1MeetingsMeetingIdEnrollConfigPutRequest = (V1MeetingsMeetingIdEnrollConfigPutRequest) o;
        return Objects.equals(this.approveType, v1MeetingsMeetingIdEnrollConfigPutRequest.approveType) &&
            Objects.equals(this.coverImage, v1MeetingsMeetingIdEnrollConfigPutRequest.coverImage) &&
            Objects.equals(this.displayNumberOfParticipants, v1MeetingsMeetingIdEnrollConfigPutRequest.displayNumberOfParticipants) &&
            Objects.equals(this.enrollDeadline, v1MeetingsMeetingIdEnrollConfigPutRequest.enrollDeadline) &&
            Objects.equals(this.enrollDescription, v1MeetingsMeetingIdEnrollConfigPutRequest.enrollDescription) &&
            Objects.equals(this.enrollNumber, v1MeetingsMeetingIdEnrollConfigPutRequest.enrollNumber) &&
            Objects.equals(this.enrollPushType, v1MeetingsMeetingIdEnrollConfigPutRequest.enrollPushType) &&
            Objects.equals(this.instanceid, v1MeetingsMeetingIdEnrollConfigPutRequest.instanceid) &&
            Objects.equals(this.isCollectQuestion, v1MeetingsMeetingIdEnrollConfigPutRequest.isCollectQuestion) &&
            Objects.equals(this.noRegistrationNeededForStaff, v1MeetingsMeetingIdEnrollConfigPutRequest.noRegistrationNeededForStaff) &&
            Objects.equals(this.operatorId, v1MeetingsMeetingIdEnrollConfigPutRequest.operatorId) &&
            Objects.equals(this.operatorIdType, v1MeetingsMeetingIdEnrollConfigPutRequest.operatorIdType) &&
            Objects.equals(this.questionList, v1MeetingsMeetingIdEnrollConfigPutRequest.questionList);
    }

    @Override
    public int hashCode() {
        return Objects.hash(approveType, coverImage, displayNumberOfParticipants, enrollDeadline, enrollDescription, enrollNumber, enrollPushType, instanceid, isCollectQuestion, noRegistrationNeededForStaff, operatorId, operatorIdType, questionList);
    }

    /**
    * Convert the given object to string with each line indented by 4 spaces
    * (except the first line).
    */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class V1MeetingsMeetingIdEnrollConfigPutRequest {\n");
        sb.append("    approveType: ").append(toIndentedString(approveType)).append("\n");
        sb.append("    coverImage: ").append(toIndentedString(coverImage)).append("\n");
        sb.append("    displayNumberOfParticipants: ").append(toIndentedString(displayNumberOfParticipants)).append("\n");
        sb.append("    enrollDeadline: ").append(toIndentedString(enrollDeadline)).append("\n");
        sb.append("    enrollDescription: ").append(toIndentedString(enrollDescription)).append("\n");
        sb.append("    enrollNumber: ").append(toIndentedString(enrollNumber)).append("\n");
        sb.append("    enrollPushType: ").append(toIndentedString(enrollPushType)).append("\n");
        sb.append("    instanceid: ").append(toIndentedString(instanceid)).append("\n");
        sb.append("    isCollectQuestion: ").append(toIndentedString(isCollectQuestion)).append("\n");
        sb.append("    noRegistrationNeededForStaff: ").append(toIndentedString(noRegistrationNeededForStaff)).append("\n");
        sb.append("    operatorId: ").append(toIndentedString(operatorId)).append("\n");
        sb.append("    operatorIdType: ").append(toIndentedString(operatorIdType)).append("\n");
        sb.append("    questionList: ").append(toIndentedString(questionList)).append("\n");
        sb.append("}");
        return sb.toString();
    }
}

