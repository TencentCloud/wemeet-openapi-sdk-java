/*
 * 腾讯会议OpenAPI
 * SAAS版RESTFUL风格API
 *
 * The version of the OpenAPI document: v1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.tencentcloudapi.wemeet.service.user_manager.model;

import java.util.*;
import java.math.BigDecimal;

import com.fasterxml.jackson.annotation.*;
import org.jetbrains.annotations.NotNull;

/**
 * V1PmiMeetingsPmiConfigPutRequest
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
public class V1PmiMeetingsPmiConfigPutRequest {
    @JsonProperty(value = "allow_in_before_host")
    private Boolean allowInBeforeHost;

    @JsonProperty(value = "allow_multi_device")
    private Boolean allowMultiDevice;

    @JsonProperty(value = "auto_in_waiting_room")
    private Boolean autoInWaitingRoom;

    @JsonProperty(value = "disable_note_capture")
    private Boolean disableNoteCapture;

    @JsonProperty(value = "enable_password")
    private Boolean enablePassword;

    @JsonProperty(value = "hosts")
    private List<V1PmiMeetingsPmiConfigPutRequestHostsInner> hosts;

    @JsonProperty(value = "instanceid", required = true)
    private Long instanceid;

    @JsonProperty(value = "mute_enable_type_join")
    private Long muteEnableTypeJoin;

    @JsonProperty(value = "only_enterprise_user_allowed")
    private Boolean onlyEnterpriseUserAllowed;

    @JsonProperty(value = "operator_id", required = true)
    private String operatorId;

    @JsonProperty(value = "operator_id_type", required = true)
    private Long operatorIdType;

    @JsonProperty(value = "pmi_name")
    private String pmiName;

    @JsonProperty(value = "pmi_password")
    private String pmiPassword;

    @JsonProperty(value = "water_mark_type")
    private Long waterMarkType;

    @JsonProperty(value = "watermark")
    private Boolean watermark;

    /**
     * @param instanceid 设备id (required)
     * @param operatorId 根据type类型传相应内容 (required)
     * @param operatorIdType 操作者ID类型，1 - userid (required)
     */
    public V1PmiMeetingsPmiConfigPutRequest(@NotNull Long instanceid, @NotNull String operatorId, @NotNull Long operatorIdType) {
        this.instanceid = instanceid;
        this.operatorId = operatorId;
        this.operatorIdType = operatorIdType;
    }

    /**
     * @param allowInBeforeHost 是否允许成员在主持人进会前加入会议
     */
    public V1PmiMeetingsPmiConfigPutRequest allowInBeforeHost(Boolean allowInBeforeHost) {
        this.allowInBeforeHost = allowInBeforeHost;
        return this;
    }
    /**
     * @return allowInBeforeHost 是否允许成员在主持人进会前加入会议
     **/
    public Boolean getAllowInBeforeHost() {
        return allowInBeforeHost;
    }

    /**
     * @param allowInBeforeHost 是否允许成员在主持人进会前加入会议
     */
    public void setAllowInBeforeHost(Boolean allowInBeforeHost) {
        this.allowInBeforeHost = allowInBeforeHost;
    }
    /**
     * @param allowMultiDevice 是否允许成员多端入会
     */
    public V1PmiMeetingsPmiConfigPutRequest allowMultiDevice(Boolean allowMultiDevice) {
        this.allowMultiDevice = allowMultiDevice;
        return this;
    }
    /**
     * @return allowMultiDevice 是否允许成员多端入会
     **/
    public Boolean getAllowMultiDevice() {
        return allowMultiDevice;
    }

    /**
     * @param allowMultiDevice 是否允许成员多端入会
     */
    public void setAllowMultiDevice(Boolean allowMultiDevice) {
        this.allowMultiDevice = allowMultiDevice;
    }
    /**
     * @param autoInWaitingRoom 是否开启等候室
     */
    public V1PmiMeetingsPmiConfigPutRequest autoInWaitingRoom(Boolean autoInWaitingRoom) {
        this.autoInWaitingRoom = autoInWaitingRoom;
        return this;
    }
    /**
     * @return autoInWaitingRoom 是否开启等候室
     **/
    public Boolean getAutoInWaitingRoom() {
        return autoInWaitingRoom;
    }

    /**
     * @param autoInWaitingRoom 是否开启等候室
     */
    public void setAutoInWaitingRoom(Boolean autoInWaitingRoom) {
        this.autoInWaitingRoom = autoInWaitingRoom;
    }
    /**
     * @param disableNoteCapture 禁止笔记截屏，true-禁止，false-不禁止。当水印参数开启时生效
     */
    public V1PmiMeetingsPmiConfigPutRequest disableNoteCapture(Boolean disableNoteCapture) {
        this.disableNoteCapture = disableNoteCapture;
        return this;
    }
    /**
     * @return disableNoteCapture 禁止笔记截屏，true-禁止，false-不禁止。当水印参数开启时生效
     **/
    public Boolean getDisableNoteCapture() {
        return disableNoteCapture;
    }

    /**
     * @param disableNoteCapture 禁止笔记截屏，true-禁止，false-不禁止。当水印参数开启时生效
     */
    public void setDisableNoteCapture(Boolean disableNoteCapture) {
        this.disableNoteCapture = disableNoteCapture;
    }
    /**
     * @param enablePassword 是否需要密码
     */
    public V1PmiMeetingsPmiConfigPutRequest enablePassword(Boolean enablePassword) {
        this.enablePassword = enablePassword;
        return this;
    }
    /**
     * @return enablePassword 是否需要密码
     **/
    public Boolean getEnablePassword() {
        return enablePassword;
    }

    /**
     * @param enablePassword 是否需要密码
     */
    public void setEnablePassword(Boolean enablePassword) {
        this.enablePassword = enablePassword;
    }
    /**
     * @param hosts 指定主持人列表
     */
    public V1PmiMeetingsPmiConfigPutRequest hosts(List<V1PmiMeetingsPmiConfigPutRequestHostsInner> hosts) {
        this.hosts = hosts;
        return this;
    }
    /**
     * @return hosts 指定主持人列表
     **/
    public List<V1PmiMeetingsPmiConfigPutRequestHostsInner> getHosts() {
        return hosts;
    }

    /**
     * @param hosts 指定主持人列表
     */
    public void setHosts(List<V1PmiMeetingsPmiConfigPutRequestHostsInner> hosts) {
        this.hosts = hosts;
    }
    /**
     * @param instanceid 设备id (required)
     */
    public V1PmiMeetingsPmiConfigPutRequest instanceid(@NotNull Long instanceid) {
        this.instanceid = instanceid;
        return this;
    }
    /**
     * @return instanceid 设备id
     **/
    public Long getInstanceid() {
        return instanceid;
    }

    /**
     * @param instanceid 设备id (required)
     */
    public void setInstanceid(Long instanceid) {
        this.instanceid = instanceid;
    }
    /**
     * @param muteEnableTypeJoin 成员入会静音选项，0-关闭，1-开启，2-超过6人开启
     */
    public V1PmiMeetingsPmiConfigPutRequest muteEnableTypeJoin(Long muteEnableTypeJoin) {
        this.muteEnableTypeJoin = muteEnableTypeJoin;
        return this;
    }
    /**
     * @return muteEnableTypeJoin 成员入会静音选项，0-关闭，1-开启，2-超过6人开启
     **/
    public Long getMuteEnableTypeJoin() {
        return muteEnableTypeJoin;
    }

    /**
     * @param muteEnableTypeJoin 成员入会静音选项，0-关闭，1-开启，2-超过6人开启
     */
    public void setMuteEnableTypeJoin(Long muteEnableTypeJoin) {
        this.muteEnableTypeJoin = muteEnableTypeJoin;
    }
    /**
     * @param onlyEnterpriseUserAllowed 是否仅企业内部成员可入会
     */
    public V1PmiMeetingsPmiConfigPutRequest onlyEnterpriseUserAllowed(Boolean onlyEnterpriseUserAllowed) {
        this.onlyEnterpriseUserAllowed = onlyEnterpriseUserAllowed;
        return this;
    }
    /**
     * @return onlyEnterpriseUserAllowed 是否仅企业内部成员可入会
     **/
    public Boolean getOnlyEnterpriseUserAllowed() {
        return onlyEnterpriseUserAllowed;
    }

    /**
     * @param onlyEnterpriseUserAllowed 是否仅企业内部成员可入会
     */
    public void setOnlyEnterpriseUserAllowed(Boolean onlyEnterpriseUserAllowed) {
        this.onlyEnterpriseUserAllowed = onlyEnterpriseUserAllowed;
    }
    /**
     * @param operatorId 根据type类型传相应内容 (required)
     */
    public V1PmiMeetingsPmiConfigPutRequest operatorId(@NotNull String operatorId) {
        this.operatorId = operatorId;
        return this;
    }
    /**
     * @return operatorId 根据type类型传相应内容
     **/
    public String getOperatorId() {
        return operatorId;
    }

    /**
     * @param operatorId 根据type类型传相应内容 (required)
     */
    public void setOperatorId(String operatorId) {
        this.operatorId = operatorId;
    }
    /**
     * @param operatorIdType 操作者ID类型，1 - userid (required)
     */
    public V1PmiMeetingsPmiConfigPutRequest operatorIdType(@NotNull Long operatorIdType) {
        this.operatorIdType = operatorIdType;
        return this;
    }
    /**
     * @return operatorIdType 操作者ID类型，1 - userid
     **/
    public Long getOperatorIdType() {
        return operatorIdType;
    }

    /**
     * @param operatorIdType 操作者ID类型，1 - userid (required)
     */
    public void setOperatorIdType(Long operatorIdType) {
        this.operatorIdType = operatorIdType;
    }
    /**
     * @param pmiName 个人会议室名称，最大支持18个汉字或36个英文字母。
     */
    public V1PmiMeetingsPmiConfigPutRequest pmiName(String pmiName) {
        this.pmiName = pmiName;
        return this;
    }
    /**
     * @return pmiName 个人会议室名称，最大支持18个汉字或36个英文字母。
     **/
    public String getPmiName() {
        return pmiName;
    }

    /**
     * @param pmiName 个人会议室名称，最大支持18个汉字或36个英文字母。
     */
    public void setPmiName(String pmiName) {
        this.pmiName = pmiName;
    }
    /**
     * @param pmiPassword 入会密码
     */
    public V1PmiMeetingsPmiConfigPutRequest pmiPassword(String pmiPassword) {
        this.pmiPassword = pmiPassword;
        return this;
    }
    /**
     * @return pmiPassword 入会密码
     **/
    public String getPmiPassword() {
        return pmiPassword;
    }

    /**
     * @param pmiPassword 入会密码
     */
    public void setPmiPassword(String pmiPassword) {
        this.pmiPassword = pmiPassword;
    }
    /**
     * @param waterMarkType 水印样式。当水印参数为开启时，此参数才生效。 0：单排 1：多排
     */
    public V1PmiMeetingsPmiConfigPutRequest waterMarkType(Long waterMarkType) {
        this.waterMarkType = waterMarkType;
        return this;
    }
    /**
     * @return waterMarkType 水印样式。当水印参数为开启时，此参数才生效。 0：单排 1：多排
     **/
    public Long getWaterMarkType() {
        return waterMarkType;
    }

    /**
     * @param waterMarkType 水印样式。当水印参数为开启时，此参数才生效。 0：单排 1：多排
     */
    public void setWaterMarkType(Long waterMarkType) {
        this.waterMarkType = waterMarkType;
    }
    /**
     * @param watermark 是否开启会议水印
     */
    public V1PmiMeetingsPmiConfigPutRequest watermark(Boolean watermark) {
        this.watermark = watermark;
        return this;
    }
    /**
     * @return watermark 是否开启会议水印
     **/
    public Boolean getWatermark() {
        return watermark;
    }

    /**
     * @param watermark 是否开启会议水印
     */
    public void setWatermark(Boolean watermark) {
        this.watermark = watermark;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V1PmiMeetingsPmiConfigPutRequest v1PmiMeetingsPmiConfigPutRequest = (V1PmiMeetingsPmiConfigPutRequest) o;
        return Objects.equals(this.allowInBeforeHost, v1PmiMeetingsPmiConfigPutRequest.allowInBeforeHost) &&
            Objects.equals(this.allowMultiDevice, v1PmiMeetingsPmiConfigPutRequest.allowMultiDevice) &&
            Objects.equals(this.autoInWaitingRoom, v1PmiMeetingsPmiConfigPutRequest.autoInWaitingRoom) &&
            Objects.equals(this.disableNoteCapture, v1PmiMeetingsPmiConfigPutRequest.disableNoteCapture) &&
            Objects.equals(this.enablePassword, v1PmiMeetingsPmiConfigPutRequest.enablePassword) &&
            Objects.equals(this.hosts, v1PmiMeetingsPmiConfigPutRequest.hosts) &&
            Objects.equals(this.instanceid, v1PmiMeetingsPmiConfigPutRequest.instanceid) &&
            Objects.equals(this.muteEnableTypeJoin, v1PmiMeetingsPmiConfigPutRequest.muteEnableTypeJoin) &&
            Objects.equals(this.onlyEnterpriseUserAllowed, v1PmiMeetingsPmiConfigPutRequest.onlyEnterpriseUserAllowed) &&
            Objects.equals(this.operatorId, v1PmiMeetingsPmiConfigPutRequest.operatorId) &&
            Objects.equals(this.operatorIdType, v1PmiMeetingsPmiConfigPutRequest.operatorIdType) &&
            Objects.equals(this.pmiName, v1PmiMeetingsPmiConfigPutRequest.pmiName) &&
            Objects.equals(this.pmiPassword, v1PmiMeetingsPmiConfigPutRequest.pmiPassword) &&
            Objects.equals(this.waterMarkType, v1PmiMeetingsPmiConfigPutRequest.waterMarkType) &&
            Objects.equals(this.watermark, v1PmiMeetingsPmiConfigPutRequest.watermark);
    }

    @Override
    public int hashCode() {
        return Objects.hash(allowInBeforeHost, allowMultiDevice, autoInWaitingRoom, disableNoteCapture, enablePassword, hosts, instanceid, muteEnableTypeJoin, onlyEnterpriseUserAllowed, operatorId, operatorIdType, pmiName, pmiPassword, waterMarkType, watermark);
    }

    /**
    * Convert the given object to string with each line indented by 4 spaces
    * (except the first line).
    */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class V1PmiMeetingsPmiConfigPutRequest {\n");
        sb.append("    allowInBeforeHost: ").append(toIndentedString(allowInBeforeHost)).append("\n");
        sb.append("    allowMultiDevice: ").append(toIndentedString(allowMultiDevice)).append("\n");
        sb.append("    autoInWaitingRoom: ").append(toIndentedString(autoInWaitingRoom)).append("\n");
        sb.append("    disableNoteCapture: ").append(toIndentedString(disableNoteCapture)).append("\n");
        sb.append("    enablePassword: ").append(toIndentedString(enablePassword)).append("\n");
        sb.append("    hosts: ").append(toIndentedString(hosts)).append("\n");
        sb.append("    instanceid: ").append(toIndentedString(instanceid)).append("\n");
        sb.append("    muteEnableTypeJoin: ").append(toIndentedString(muteEnableTypeJoin)).append("\n");
        sb.append("    onlyEnterpriseUserAllowed: ").append(toIndentedString(onlyEnterpriseUserAllowed)).append("\n");
        sb.append("    operatorId: ").append(toIndentedString(operatorId)).append("\n");
        sb.append("    operatorIdType: ").append(toIndentedString(operatorIdType)).append("\n");
        sb.append("    pmiName: ").append(toIndentedString(pmiName)).append("\n");
        sb.append("    pmiPassword: ").append(toIndentedString(pmiPassword)).append("\n");
        sb.append("    waterMarkType: ").append(toIndentedString(waterMarkType)).append("\n");
        sb.append("    watermark: ").append(toIndentedString(watermark)).append("\n");
        sb.append("}");
        return sb.toString();
    }
}

