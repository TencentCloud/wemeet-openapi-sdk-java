/*
 * 腾讯会议OpenAPI
 * SAAS版RESTFUL风格API
 *
 * The version of the OpenAPI document: v1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.tencentcloudapi.wemeet.service.meetings.model;

import java.util.*;

import com.fasterxml.jackson.annotation.*;

/**
 * V1MeetingsGet200Response
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
public class V1MeetingsGet200Response {
    @JsonProperty(value = "meeting_info_list")
    private List<V1MeetingsGet200ResponseMeetingInfoListInner> meetingInfoList;

    @JsonProperty(value = "meeting_number")
    private Long meetingNumber;

    @JsonProperty(value = "next_cursory")
    private Long nextCursory;

    @JsonProperty(value = "next_pos")
    private Long nextPos;

    @JsonProperty(value = "remaining")
    private Long remaining;

    /**
     */
    public V1MeetingsGet200Response() {
    }

    /**
     * @param meetingInfoList 
     */
    public V1MeetingsGet200Response meetingInfoList(List<V1MeetingsGet200ResponseMeetingInfoListInner> meetingInfoList) {
        this.meetingInfoList = meetingInfoList;
        return this;
    }
    /**
     * @return meetingInfoList 
     **/
    public List<V1MeetingsGet200ResponseMeetingInfoListInner> getMeetingInfoList() {
        return meetingInfoList;
    }

    /**
     * @param meetingInfoList 
     */
    public void setMeetingInfoList(List<V1MeetingsGet200ResponseMeetingInfoListInner> meetingInfoList) {
        this.meetingInfoList = meetingInfoList;
    }
    /**
     * @param meetingNumber 会议数量。
     */
    public V1MeetingsGet200Response meetingNumber(Long meetingNumber) {
        this.meetingNumber = meetingNumber;
        return this;
    }
    /**
     * @return meetingNumber 会议数量。
     **/
    public Long getMeetingNumber() {
        return meetingNumber;
    }

    /**
     * @param meetingNumber 会议数量。
     */
    public void setMeetingNumber(Long meetingNumber) {
        this.meetingNumber = meetingNumber;
    }
    /**
     * @param nextCursory 分页获取用户会议列表，查询的会议的最后一次修改时间值，UNIX 毫秒级时间戳，分页游标。 因目前一次查询返回会议数量最多为20，当用户会议较多时，如果会议总数量超过20，则需要再次查询。此参数为非必选参数，默认值为0，表示第一次查询利用会议开始时间北京时间当日零点进行查询。 查询返回输出参数“remaining”不为0时，表示还有会议需要继续查询。返回参数“next_cursory”的值即为下一次查询的 cursory 的值。 多次调用该查询接口直到输出参数“remaining”值为0。 当只使用 pos 作为分页条件时,可能会出现查询不到第二页,数据排序出现重复数据等情况与 pos 配合使用。
     */
    public V1MeetingsGet200Response nextCursory(Long nextCursory) {
        this.nextCursory = nextCursory;
        return this;
    }
    /**
     * @return nextCursory 分页获取用户会议列表，查询的会议的最后一次修改时间值，UNIX 毫秒级时间戳，分页游标。 因目前一次查询返回会议数量最多为20，当用户会议较多时，如果会议总数量超过20，则需要再次查询。此参数为非必选参数，默认值为0，表示第一次查询利用会议开始时间北京时间当日零点进行查询。 查询返回输出参数“remaining”不为0时，表示还有会议需要继续查询。返回参数“next_cursory”的值即为下一次查询的 cursory 的值。 多次调用该查询接口直到输出参数“remaining”值为0。 当只使用 pos 作为分页条件时,可能会出现查询不到第二页,数据排序出现重复数据等情况与 pos 配合使用。
     **/
    public Long getNextCursory() {
        return nextCursory;
    }

    /**
     * @param nextCursory 分页获取用户会议列表，查询的会议的最后一次修改时间值，UNIX 毫秒级时间戳，分页游标。 因目前一次查询返回会议数量最多为20，当用户会议较多时，如果会议总数量超过20，则需要再次查询。此参数为非必选参数，默认值为0，表示第一次查询利用会议开始时间北京时间当日零点进行查询。 查询返回输出参数“remaining”不为0时，表示还有会议需要继续查询。返回参数“next_cursory”的值即为下一次查询的 cursory 的值。 多次调用该查询接口直到输出参数“remaining”值为0。 当只使用 pos 作为分页条件时,可能会出现查询不到第二页,数据排序出现重复数据等情况与 pos 配合使用。
     */
    public void setNextCursory(Long nextCursory) {
        this.nextCursory = nextCursory;
    }
    /**
     * @param nextPos 下次查询时请求里需要携带的 pos 参数。
     */
    public V1MeetingsGet200Response nextPos(Long nextPos) {
        this.nextPos = nextPos;
        return this;
    }
    /**
     * @return nextPos 下次查询时请求里需要携带的 pos 参数。
     **/
    public Long getNextPos() {
        return nextPos;
    }

    /**
     * @param nextPos 下次查询时请求里需要携带的 pos 参数。
     */
    public void setNextPos(Long nextPos) {
        this.nextPos = nextPos;
    }
    /**
     * @param remaining 是否还剩下会议；因目前一次查询返回会议数量最多为20，如果会议总数量超过20则此字段被置为非0，表示需要再次查询，且下次查询的“pos”参数需从本次响应的“next_pos”字段取值
     */
    public V1MeetingsGet200Response remaining(Long remaining) {
        this.remaining = remaining;
        return this;
    }
    /**
     * @return remaining 是否还剩下会议；因目前一次查询返回会议数量最多为20，如果会议总数量超过20则此字段被置为非0，表示需要再次查询，且下次查询的“pos”参数需从本次响应的“next_pos”字段取值
     **/
    public Long getRemaining() {
        return remaining;
    }

    /**
     * @param remaining 是否还剩下会议；因目前一次查询返回会议数量最多为20，如果会议总数量超过20则此字段被置为非0，表示需要再次查询，且下次查询的“pos”参数需从本次响应的“next_pos”字段取值
     */
    public void setRemaining(Long remaining) {
        this.remaining = remaining;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V1MeetingsGet200Response v1MeetingsGet200Response = (V1MeetingsGet200Response) o;
        return Objects.equals(this.meetingInfoList, v1MeetingsGet200Response.meetingInfoList) &&
            Objects.equals(this.meetingNumber, v1MeetingsGet200Response.meetingNumber) &&
            Objects.equals(this.nextCursory, v1MeetingsGet200Response.nextCursory) &&
            Objects.equals(this.nextPos, v1MeetingsGet200Response.nextPos) &&
            Objects.equals(this.remaining, v1MeetingsGet200Response.remaining);
    }

    @Override
    public int hashCode() {
        return Objects.hash(meetingInfoList, meetingNumber, nextCursory, nextPos, remaining);
    }

    /**
    * Convert the given object to string with each line indented by 4 spaces
    * (except the first line).
    */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class V1MeetingsGet200Response {\n");
        sb.append("    meetingInfoList: ").append(toIndentedString(meetingInfoList)).append("\n");
        sb.append("    meetingNumber: ").append(toIndentedString(meetingNumber)).append("\n");
        sb.append("    nextCursory: ").append(toIndentedString(nextCursory)).append("\n");
        sb.append("    nextPos: ").append(toIndentedString(nextPos)).append("\n");
        sb.append("    remaining: ").append(toIndentedString(remaining)).append("\n");
        sb.append("}");
        return sb.toString();
    }
}

