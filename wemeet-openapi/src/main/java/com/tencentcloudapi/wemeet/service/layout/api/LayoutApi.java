/*
 * 腾讯会议OpenAPI
 * SAAS版RESTFUL风格API
 *
 * The version of the OpenAPI document: v1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.tencentcloudapi.wemeet.service.layout.api;

import com.tencentcloudapi.wemeet.core.Config;
import com.tencentcloudapi.wemeet.core.Constants;
import com.tencentcloudapi.wemeet.core.authenticator.AuthenticatorBuilder;
import com.tencentcloudapi.wemeet.core.xhttp.*;
import com.tencentcloudapi.wemeet.core.exception.*;
import com.tencentcloudapi.wemeet.service.layout.model.*;


public class LayoutApi {

    private final Config config;

    public LayoutApi(Config config) {
        this.config = config;
    }

    public static class ApiV1MeetingsMeetingIdAdvancedLayoutsPostRequest {
    
        /**
         * meetingId 会议ID (required)
         */
        private String meetingId;
        private V1MeetingsMeetingIdAdvancedLayoutsPostRequest body;

        private ApiV1MeetingsMeetingIdAdvancedLayoutsPostRequest() {}

        private ApiV1MeetingsMeetingIdAdvancedLayoutsPostRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId 会议ID (required)
             */
            private final String meetingId;
            

            private V1MeetingsMeetingIdAdvancedLayoutsPostRequest body;

            /**
             * @param meetingId 会议ID
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
                        public Builder body(V1MeetingsMeetingIdAdvancedLayoutsPostRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingsMeetingIdAdvancedLayoutsPostRequest build() {
                return new ApiV1MeetingsMeetingIdAdvancedLayoutsPostRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public V1MeetingsMeetingIdAdvancedLayoutsPostRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingsMeetingIdAdvancedLayoutsPostResponse extends ApiResponse {
        private final V1MeetingsMeetingIdAdvancedLayoutsPost200Response data;
        public ApiV1MeetingsMeetingIdAdvancedLayoutsPostResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingsMeetingIdAdvancedLayoutsPost200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingsMeetingIdAdvancedLayoutsPost200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingsMeetingIdApplyingLayoutPutRequest {
    
        /**
         * meetingId 会议ID (required)
         */
        private String meetingId;
        private V1MeetingsMeetingIdApplyingLayoutPutRequest body;

        private ApiV1MeetingsMeetingIdApplyingLayoutPutRequest() {}

        private ApiV1MeetingsMeetingIdApplyingLayoutPutRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId 会议ID (required)
             */
            private final String meetingId;
            

            private V1MeetingsMeetingIdApplyingLayoutPutRequest body;

            /**
             * @param meetingId 会议ID
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
                        public Builder body(V1MeetingsMeetingIdApplyingLayoutPutRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingsMeetingIdApplyingLayoutPutRequest build() {
                return new ApiV1MeetingsMeetingIdApplyingLayoutPutRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public V1MeetingsMeetingIdApplyingLayoutPutRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingsMeetingIdApplyingLayoutPutResponse extends ApiResponse {
        private final Object data;
        public ApiV1MeetingsMeetingIdApplyingLayoutPutResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingsMeetingIdLayoutsPostRequest {
    
        /**
         * meetingId 会议ID (required)
         */
        private String meetingId;
        private V1MeetingsMeetingIdLayoutsPostRequest body;

        private ApiV1MeetingsMeetingIdLayoutsPostRequest() {}

        private ApiV1MeetingsMeetingIdLayoutsPostRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId 会议ID (required)
             */
            private final String meetingId;
            

            private V1MeetingsMeetingIdLayoutsPostRequest body;

            /**
             * @param meetingId 会议ID
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
                        public Builder body(V1MeetingsMeetingIdLayoutsPostRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingsMeetingIdLayoutsPostRequest build() {
                return new ApiV1MeetingsMeetingIdLayoutsPostRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public V1MeetingsMeetingIdLayoutsPostRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingsMeetingIdLayoutsPostResponse extends ApiResponse {
        private final V1MeetingsMeetingIdLayoutsPost200Response data;
        public ApiV1MeetingsMeetingIdLayoutsPostResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingsMeetingIdLayoutsPost200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingsMeetingIdLayoutsPost200Response getData() {
            return this.data;
        }
    }

    /**
     * v1MeetingsMeetingIdAdvancedLayoutsPost 添加自定义布局[/v1/meetings/{meeting_id}/advanced-layouts - POST]
     * <p>**描述：**  * 对当前会议添加高级自定义布局，支持批量添加。 * 用户座次设置需设置参会成员。 * 单个会议最多允许添加20个布局。 * 目前暂不支持 OAuth2.0 鉴权访问。 * 目前仅会应用于 H.323/SIP 终端<p/>
     * @param req ApiV1MeetingsMeetingIdAdvancedLayoutsPostRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingsMeetingIdAdvancedLayoutsPostResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingsMeetingIdAdvancedLayoutsPostResponse v1MeetingsMeetingIdAdvancedLayoutsPost(ApiV1MeetingsMeetingIdAdvancedLayoutsPostRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meetings/{meeting_id}/advanced-layouts")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().post(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingsMeetingIdAdvancedLayoutsPostResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingsMeetingIdAdvancedLayoutsPost 添加自定义布局[/v1/meetings/{meeting_id}/advanced-layouts - POST]
    * <p>**描述：**  * 对当前会议添加高级自定义布局，支持批量添加。 * 用户座次设置需设置参会成员。 * 单个会议最多允许添加20个布局。 * 目前暂不支持 OAuth2.0 鉴权访问。 * 目前仅会应用于 H.323/SIP 终端<p/>
    * @param req ApiV1MeetingsMeetingIdAdvancedLayoutsPostRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingsMeetingIdAdvancedLayoutsPostResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingsMeetingIdAdvancedLayoutsPostResponse v1MeetingsMeetingIdAdvancedLayoutsPost(ApiV1MeetingsMeetingIdAdvancedLayoutsPostRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingsMeetingIdAdvancedLayoutsPost(req, null, builders);
    }
    /**
     * v1MeetingsMeetingIdApplyingLayoutPut 应用布局[/v1/meetings/{meeting_id}/applying-layout - PUT]
     * <p>**描述：**  * 将会议中的高级自定义布局应用到指定成员或者整个会议。 * 恢复指定成员或整个会议的默认布局。 * 目前暂不支持 OAuth2.0 鉴权访问。 * 目前仅会应用于 H.323/SIP 终端。  &lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(51, 51, 51)\&quot;&gt;&lt;/span&gt;<p/>
     * @param req ApiV1MeetingsMeetingIdApplyingLayoutPutRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingsMeetingIdApplyingLayoutPutResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingsMeetingIdApplyingLayoutPutResponse v1MeetingsMeetingIdApplyingLayoutPut(ApiV1MeetingsMeetingIdApplyingLayoutPutRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meetings/{meeting_id}/applying-layout")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().put(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingsMeetingIdApplyingLayoutPutResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingsMeetingIdApplyingLayoutPut 应用布局[/v1/meetings/{meeting_id}/applying-layout - PUT]
    * <p>**描述：**  * 将会议中的高级自定义布局应用到指定成员或者整个会议。 * 恢复指定成员或整个会议的默认布局。 * 目前暂不支持 OAuth2.0 鉴权访问。 * 目前仅会应用于 H.323/SIP 终端。  &lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(51, 51, 51)\&quot;&gt;&lt;/span&gt;<p/>
    * @param req ApiV1MeetingsMeetingIdApplyingLayoutPutRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingsMeetingIdApplyingLayoutPutResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingsMeetingIdApplyingLayoutPutResponse v1MeetingsMeetingIdApplyingLayoutPut(ApiV1MeetingsMeetingIdApplyingLayoutPutRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingsMeetingIdApplyingLayoutPut(req, null, builders);
    }
    /**
     * v1MeetingsMeetingIdLayoutsPost 添加会议布局[/v1/meetings/{meeting_id}/layouts - POST]
     * <p>对成功预定的会议添加会议布局，支持多个布局的添加，每个布局支持多页模板，默认选中第一页模板作为该布局的首页进行展示。  * 用户座次设置区分会前和会中两种方式：会前只允许设置邀请者成员，会中只允许设置参会成员。 * 一场会议最多添加10个布局，添加成功返回新增的会议布局信息。 * 目前暂不支持 OAuth2.0 鉴权访问。<p/>
     * @param req ApiV1MeetingsMeetingIdLayoutsPostRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingsMeetingIdLayoutsPostResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingsMeetingIdLayoutsPostResponse v1MeetingsMeetingIdLayoutsPost(ApiV1MeetingsMeetingIdLayoutsPostRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meetings/{meeting_id}/layouts")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().post(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingsMeetingIdLayoutsPostResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingsMeetingIdLayoutsPost 添加会议布局[/v1/meetings/{meeting_id}/layouts - POST]
    * <p>对成功预定的会议添加会议布局，支持多个布局的添加，每个布局支持多页模板，默认选中第一页模板作为该布局的首页进行展示。  * 用户座次设置区分会前和会中两种方式：会前只允许设置邀请者成员，会中只允许设置参会成员。 * 一场会议最多添加10个布局，添加成功返回新增的会议布局信息。 * 目前暂不支持 OAuth2.0 鉴权访问。<p/>
    * @param req ApiV1MeetingsMeetingIdLayoutsPostRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingsMeetingIdLayoutsPostResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingsMeetingIdLayoutsPostResponse v1MeetingsMeetingIdLayoutsPost(ApiV1MeetingsMeetingIdLayoutsPostRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingsMeetingIdLayoutsPost(req, null, builders);
    }
}

