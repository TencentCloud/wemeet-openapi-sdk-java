/*
 * 腾讯会议OpenAPI
 * SAAS版RESTFUL风格API
 *
 * The version of the OpenAPI document: v1.0.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.tencentcloudapi.wemeet.service.pstn.model;

import java.util.*;
import java.math.BigDecimal;

import com.fasterxml.jackson.annotation.*;
import org.jetbrains.annotations.NotNull;

/**
 * V1MeetingMeetingIdPhoneCancelcallPostRequest
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
public class V1MeetingMeetingIdPhoneCancelcallPostRequest {
    @JsonProperty(value = "operator_id", required = true)
    private String operatorId;

    @JsonProperty(value = "operator_id_type", required = true)
    private Long operatorIdType;

    @JsonProperty(value = "phone_numbers", required = true)
    private List<V1MeetingMeetingIdPhoneCancelcallPostRequestPhoneNumbersInner> phoneNumbers;

    /**
     * @param operatorId 操作者 ID。会议创建者、主持人、联席主持人可以调用该接口。 operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
     * @param operatorIdType 操作者 ID 的类型： 1：企业内用户 userid。  (required)
     * @param phoneNumbers 电话号码对象数组 (required)
     */
    public V1MeetingMeetingIdPhoneCancelcallPostRequest(@NotNull String operatorId, @NotNull Long operatorIdType, @NotNull List<V1MeetingMeetingIdPhoneCancelcallPostRequestPhoneNumbersInner> phoneNumbers) {
        this.operatorId = operatorId;
        this.operatorIdType = operatorIdType;
        this.phoneNumbers = phoneNumbers;
    }

    /**
     * @param operatorId 操作者 ID。会议创建者、主持人、联席主持人可以调用该接口。 operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
     */
    public V1MeetingMeetingIdPhoneCancelcallPostRequest operatorId(@NotNull String operatorId) {
        this.operatorId = operatorId;
        return this;
    }
    /**
     * @return operatorId 操作者 ID。会议创建者、主持人、联席主持人可以调用该接口。 operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。
     **/
    public String getOperatorId() {
        return operatorId;
    }

    /**
     * @param operatorId 操作者 ID。会议创建者、主持人、联席主持人可以调用该接口。 operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
     */
    public void setOperatorId(String operatorId) {
        this.operatorId = operatorId;
    }
    /**
     * @param operatorIdType 操作者 ID 的类型： 1：企业内用户 userid。  (required)
     */
    public V1MeetingMeetingIdPhoneCancelcallPostRequest operatorIdType(@NotNull Long operatorIdType) {
        this.operatorIdType = operatorIdType;
        return this;
    }
    /**
     * @return operatorIdType 操作者 ID 的类型： 1：企业内用户 userid。 
     **/
    public Long getOperatorIdType() {
        return operatorIdType;
    }

    /**
     * @param operatorIdType 操作者 ID 的类型： 1：企业内用户 userid。  (required)
     */
    public void setOperatorIdType(Long operatorIdType) {
        this.operatorIdType = operatorIdType;
    }
    /**
     * @param phoneNumbers 电话号码对象数组 (required)
     */
    public V1MeetingMeetingIdPhoneCancelcallPostRequest phoneNumbers(@NotNull List<V1MeetingMeetingIdPhoneCancelcallPostRequestPhoneNumbersInner> phoneNumbers) {
        this.phoneNumbers = phoneNumbers;
        return this;
    }
    /**
     * @return phoneNumbers 电话号码对象数组
     **/
    public List<V1MeetingMeetingIdPhoneCancelcallPostRequestPhoneNumbersInner> getPhoneNumbers() {
        return phoneNumbers;
    }

    /**
     * @param phoneNumbers 电话号码对象数组 (required)
     */
    public void setPhoneNumbers(List<V1MeetingMeetingIdPhoneCancelcallPostRequestPhoneNumbersInner> phoneNumbers) {
        this.phoneNumbers = phoneNumbers;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V1MeetingMeetingIdPhoneCancelcallPostRequest v1MeetingMeetingIdPhoneCancelcallPostRequest = (V1MeetingMeetingIdPhoneCancelcallPostRequest) o;
        return Objects.equals(this.operatorId, v1MeetingMeetingIdPhoneCancelcallPostRequest.operatorId) &&
            Objects.equals(this.operatorIdType, v1MeetingMeetingIdPhoneCancelcallPostRequest.operatorIdType) &&
            Objects.equals(this.phoneNumbers, v1MeetingMeetingIdPhoneCancelcallPostRequest.phoneNumbers);
    }

    @Override
    public int hashCode() {
        return Objects.hash(operatorId, operatorIdType, phoneNumbers);
    }

    /**
    * Convert the given object to string with each line indented by 4 spaces
    * (except the first line).
    */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class V1MeetingMeetingIdPhoneCancelcallPostRequest {\n");
        sb.append("    operatorId: ").append(toIndentedString(operatorId)).append("\n");
        sb.append("    operatorIdType: ").append(toIndentedString(operatorIdType)).append("\n");
        sb.append("    phoneNumbers: ").append(toIndentedString(phoneNumbers)).append("\n");
        sb.append("}");
        return sb.toString();
    }
}

