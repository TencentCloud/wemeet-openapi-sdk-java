/*
 * 腾讯会议OpenAPI
 * SAAS版RESTFUL风格API
 *
 * The version of the OpenAPI document: v1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.tencentcloudapi.wemeet.service.meetings.model;

import java.util.*;

import com.fasterxml.jackson.annotation.*;
import org.jetbrains.annotations.NotNull;

/**
 * V1MeetingsPostRequest
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
public class V1MeetingsPostRequest {
    @JsonProperty(value = "allow_enterprise_intranet_only")
    private Boolean allowEnterpriseIntranetOnly;

    @JsonProperty(value = "enable_doc_upload_permission")
    private Boolean enableDocUploadPermission;

    @JsonProperty(value = "enable_enroll")
    private Boolean enableEnroll;

    @JsonProperty(value = "enable_host_key")
    private Boolean enableHostKey;

    @JsonProperty(value = "enable_interpreter")
    private Boolean enableInterpreter;

    @JsonProperty(value = "enable_live")
    private Boolean enableLive;

    @JsonProperty(value = "end_time", required = true)
    private String endTime;

    @JsonProperty(value = "guests")
    private List<V1MeetingsPostRequestGuestsInner> guests;

    @JsonProperty(value = "host_key")
    private String hostKey;

    @JsonProperty(value = "hosts")
    private List<V1MeetingsPostRequestHostsInner> hosts;

    @JsonProperty(value = "instanceid", required = true)
    private Long instanceid;

    @JsonProperty(value = "invitees")
    private List<V1MeetingsPostRequestInviteesInner> invitees;

    @JsonProperty(value = "live_config")
    private V1MeetingsPostRequestLiveConfig liveConfig;

    @JsonProperty(value = "location")
    private String location;

    @JsonProperty(value = "media_set_type")
    private Long mediaSetType;

    @JsonProperty(value = "meeting_type")
    private Long meetingType;

    @JsonProperty(value = "password")
    private String password;

    @JsonProperty(value = "recurring_rule")
    private V1MeetingsPostRequestRecurringRule recurringRule;

    @JsonProperty(value = "settings")
    private V1MeetingsPostRequestSettings settings;

    @JsonProperty(value = "start_time", required = true)
    private String startTime;

    @JsonProperty(value = "subject", required = true)
    private String subject;

    @JsonProperty(value = "sync_to_wework")
    private Boolean syncToWework;

    @JsonProperty(value = "time_zone")
    private String timeZone;

    @JsonProperty(value = "type", required = true)
    private Long type;

    @JsonProperty(value = "userid", required = true)
    private String userid;

    /**
     * @param endTime 会议结束时间戳（单位秒） (required)
     * @param instanceid 用户的终端设备类型： 0：PSTN 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：linux 20：Rooms for Touch Windows 21：Rooms for Touch MacOS 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch iOS 创建会议时 userid 对应的设备类型，不影响入会时使用的设备类型，缺省可填1。 (required)
     * @param startTime 会议开始时间戳（单位秒） (required)
     * @param subject 会议主题 (required)
     * @param type 会议类型 0：预约会议 1：快速会议  (required)
     * @param userid 调用方用于标示用户的唯一 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 企业唯一用户标识说明： 1. 企业对接 SSO 时使用的员工唯一标识 ID； 2. 企业调用创建用户接口时传递的 userid 参数。 (required)
     */
    public V1MeetingsPostRequest(@NotNull String endTime, @NotNull Long instanceid, @NotNull String startTime, @NotNull String subject, @NotNull Long type, @NotNull String userid) {
        this.endTime = endTime;
        this.instanceid = instanceid;
        this.startTime = startTime;
        this.subject = subject;
        this.type = type;
        this.userid = userid;
    }

    /**
     * @param allowEnterpriseIntranetOnly 默认是false, 如果操作者无创建转网会议的权限，则该字段忽略
     */
    public V1MeetingsPostRequest allowEnterpriseIntranetOnly(Boolean allowEnterpriseIntranetOnly) {
        this.allowEnterpriseIntranetOnly = allowEnterpriseIntranetOnly;
        return this;
    }
    /**
     * @return allowEnterpriseIntranetOnly 默认是false, 如果操作者无创建转网会议的权限，则该字段忽略
     **/
    public Boolean getAllowEnterpriseIntranetOnly() {
        return allowEnterpriseIntranetOnly;
    }

    /**
     * @param allowEnterpriseIntranetOnly 默认是false, 如果操作者无创建转网会议的权限，则该字段忽略
     */
    public void setAllowEnterpriseIntranetOnly(Boolean allowEnterpriseIntranetOnly) {
        this.allowEnterpriseIntranetOnly = allowEnterpriseIntranetOnly;
    }
    /**
     * @param enableDocUploadPermission 是否允许成员上传文档，默认为允许 true：允许 false：不允许
     */
    public V1MeetingsPostRequest enableDocUploadPermission(Boolean enableDocUploadPermission) {
        this.enableDocUploadPermission = enableDocUploadPermission;
        return this;
    }
    /**
     * @return enableDocUploadPermission 是否允许成员上传文档，默认为允许 true：允许 false：不允许
     **/
    public Boolean getEnableDocUploadPermission() {
        return enableDocUploadPermission;
    }

    /**
     * @param enableDocUploadPermission 是否允许成员上传文档，默认为允许 true：允许 false：不允许
     */
    public void setEnableDocUploadPermission(Boolean enableDocUploadPermission) {
        this.enableDocUploadPermission = enableDocUploadPermission;
    }
    /**
     * @param enableEnroll 是否开启报名开关，默认不开启 true：开启 false：不开启
     */
    public V1MeetingsPostRequest enableEnroll(Boolean enableEnroll) {
        this.enableEnroll = enableEnroll;
        return this;
    }
    /**
     * @return enableEnroll 是否开启报名开关，默认不开启 true：开启 false：不开启
     **/
    public Boolean getEnableEnroll() {
        return enableEnroll;
    }

    /**
     * @param enableEnroll 是否开启报名开关，默认不开启 true：开启 false：不开启
     */
    public void setEnableEnroll(Boolean enableEnroll) {
        this.enableEnroll = enableEnroll;
    }
    /**
     * @param enableHostKey 是否开启主持人密钥，默认为false。 true：开启 false：关闭
     */
    public V1MeetingsPostRequest enableHostKey(Boolean enableHostKey) {
        this.enableHostKey = enableHostKey;
        return this;
    }
    /**
     * @return enableHostKey 是否开启主持人密钥，默认为false。 true：开启 false：关闭
     **/
    public Boolean getEnableHostKey() {
        return enableHostKey;
    }

    /**
     * @param enableHostKey 是否开启主持人密钥，默认为false。 true：开启 false：关闭
     */
    public void setEnableHostKey(Boolean enableHostKey) {
        this.enableHostKey = enableHostKey;
    }
    /**
     * @param enableInterpreter 是否开启同声传译，默认不开启 false：不开启 true：开启同声传译
     */
    public V1MeetingsPostRequest enableInterpreter(Boolean enableInterpreter) {
        this.enableInterpreter = enableInterpreter;
        return this;
    }
    /**
     * @return enableInterpreter 是否开启同声传译，默认不开启 false：不开启 true：开启同声传译
     **/
    public Boolean getEnableInterpreter() {
        return enableInterpreter;
    }

    /**
     * @param enableInterpreter 是否开启同声传译，默认不开启 false：不开启 true：开启同声传译
     */
    public void setEnableInterpreter(Boolean enableInterpreter) {
        this.enableInterpreter = enableInterpreter;
    }
    /**
     * @param enableLive 是否开启直播
     */
    public V1MeetingsPostRequest enableLive(Boolean enableLive) {
        this.enableLive = enableLive;
        return this;
    }
    /**
     * @return enableLive 是否开启直播
     **/
    public Boolean getEnableLive() {
        return enableLive;
    }

    /**
     * @param enableLive 是否开启直播
     */
    public void setEnableLive(Boolean enableLive) {
        this.enableLive = enableLive;
    }
    /**
     * @param endTime 会议结束时间戳（单位秒） (required)
     */
    public V1MeetingsPostRequest endTime(@NotNull String endTime) {
        this.endTime = endTime;
        return this;
    }
    /**
     * @return endTime 会议结束时间戳（单位秒）
     **/
    public String getEndTime() {
        return endTime;
    }

    /**
     * @param endTime 会议结束时间戳（单位秒） (required)
     */
    public void setEndTime(String endTime) {
        this.endTime = endTime;
    }
    /**
     * @param guests 会议嘉宾列表，会议嘉宾不受会议密码和等候室的限制
     */
    public V1MeetingsPostRequest guests(List<V1MeetingsPostRequestGuestsInner> guests) {
        this.guests = guests;
        return this;
    }
    /**
     * @return guests 会议嘉宾列表，会议嘉宾不受会议密码和等候室的限制
     **/
    public List<V1MeetingsPostRequestGuestsInner> getGuests() {
        return guests;
    }

    /**
     * @param guests 会议嘉宾列表，会议嘉宾不受会议密码和等候室的限制
     */
    public void setGuests(List<V1MeetingsPostRequestGuestsInner> guests) {
        this.guests = guests;
    }
    /**
     * @param hostKey 主持人密钥，仅支持6位数字。 如开启主持人密钥后没有填写此项，将自动分配一个6位数字的密钥。
     */
    public V1MeetingsPostRequest hostKey(String hostKey) {
        this.hostKey = hostKey;
        return this;
    }
    /**
     * @return hostKey 主持人密钥，仅支持6位数字。 如开启主持人密钥后没有填写此项，将自动分配一个6位数字的密钥。
     **/
    public String getHostKey() {
        return hostKey;
    }

    /**
     * @param hostKey 主持人密钥，仅支持6位数字。 如开启主持人密钥后没有填写此项，将自动分配一个6位数字的密钥。
     */
    public void setHostKey(String hostKey) {
        this.hostKey = hostKey;
    }
    /**
     * @param hosts 主持人列表，会议指定主持人的用户 ID，如果无指定，主持人将被设定为参数 userid 的用户，即 API 调用者。 注意：仅腾讯会议商业版和企业版可指定主持人。
     */
    public V1MeetingsPostRequest hosts(List<V1MeetingsPostRequestHostsInner> hosts) {
        this.hosts = hosts;
        return this;
    }
    /**
     * @return hosts 主持人列表，会议指定主持人的用户 ID，如果无指定，主持人将被设定为参数 userid 的用户，即 API 调用者。 注意：仅腾讯会议商业版和企业版可指定主持人。
     **/
    public List<V1MeetingsPostRequestHostsInner> getHosts() {
        return hosts;
    }

    /**
     * @param hosts 主持人列表，会议指定主持人的用户 ID，如果无指定，主持人将被设定为参数 userid 的用户，即 API 调用者。 注意：仅腾讯会议商业版和企业版可指定主持人。
     */
    public void setHosts(List<V1MeetingsPostRequestHostsInner> hosts) {
        this.hosts = hosts;
    }
    /**
     * @param instanceid 用户的终端设备类型： 0：PSTN 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：linux 20：Rooms for Touch Windows 21：Rooms for Touch MacOS 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch iOS 创建会议时 userid 对应的设备类型，不影响入会时使用的设备类型，缺省可填1。 (required)
     */
    public V1MeetingsPostRequest instanceid(@NotNull Long instanceid) {
        this.instanceid = instanceid;
        return this;
    }
    /**
     * @return instanceid 用户的终端设备类型： 0：PSTN 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：linux 20：Rooms for Touch Windows 21：Rooms for Touch MacOS 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch iOS 创建会议时 userid 对应的设备类型，不影响入会时使用的设备类型，缺省可填1。
     **/
    public Long getInstanceid() {
        return instanceid;
    }

    /**
     * @param instanceid 用户的终端设备类型： 0：PSTN 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：linux 20：Rooms for Touch Windows 21：Rooms for Touch MacOS 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch iOS 创建会议时 userid 对应的设备类型，不影响入会时使用的设备类型，缺省可填1。 (required)
     */
    public void setInstanceid(Long instanceid) {
        this.instanceid = instanceid;
    }
    /**
     * @param invitees 邀请人列表 仅支持邀请与会议创建者同企业的成员（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId），该会议将添加至邀请成员的会议列表中。 企业唯一用户标识说明： 企业对接 SSO 时使用的员工唯一标识 ID。 企业调用创建用户接口时传递的 userid 参数。 注意：仅腾讯会议商业版和企业版可邀请参会者，邀请者列表仅支持300人；需要邀请超过300人的场景请调用 设置会议邀请成员 接口。
     */
    public V1MeetingsPostRequest invitees(List<V1MeetingsPostRequestInviteesInner> invitees) {
        this.invitees = invitees;
        return this;
    }
    /**
     * @return invitees 邀请人列表 仅支持邀请与会议创建者同企业的成员（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId），该会议将添加至邀请成员的会议列表中。 企业唯一用户标识说明： 企业对接 SSO 时使用的员工唯一标识 ID。 企业调用创建用户接口时传递的 userid 参数。 注意：仅腾讯会议商业版和企业版可邀请参会者，邀请者列表仅支持300人；需要邀请超过300人的场景请调用 设置会议邀请成员 接口。
     **/
    public List<V1MeetingsPostRequestInviteesInner> getInvitees() {
        return invitees;
    }

    /**
     * @param invitees 邀请人列表 仅支持邀请与会议创建者同企业的成员（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId），该会议将添加至邀请成员的会议列表中。 企业唯一用户标识说明： 企业对接 SSO 时使用的员工唯一标识 ID。 企业调用创建用户接口时传递的 userid 参数。 注意：仅腾讯会议商业版和企业版可邀请参会者，邀请者列表仅支持300人；需要邀请超过300人的场景请调用 设置会议邀请成员 接口。
     */
    public void setInvitees(List<V1MeetingsPostRequestInviteesInner> invitees) {
        this.invitees = invitees;
    }
    /**
     * @param liveConfig 
     */
    public V1MeetingsPostRequest liveConfig(V1MeetingsPostRequestLiveConfig liveConfig) {
        this.liveConfig = liveConfig;
        return this;
    }
    /**
     * @return liveConfig 
     **/
    public V1MeetingsPostRequestLiveConfig getLiveConfig() {
        return liveConfig;
    }

    /**
     * @param liveConfig 
     */
    public void setLiveConfig(V1MeetingsPostRequestLiveConfig liveConfig) {
        this.liveConfig = liveConfig;
    }
    /**
     * @param location 会议地点。最长支持18个汉字或36个英文字母
     */
    public V1MeetingsPostRequest location(String location) {
        this.location = location;
        return this;
    }
    /**
     * @return location 会议地点。最长支持18个汉字或36个英文字母
     **/
    public String getLocation() {
        return location;
    }

    /**
     * @param location 会议地点。最长支持18个汉字或36个英文字母
     */
    public void setLocation(String location) {
        this.location = location;
    }
    /**
     * @param mediaSetType 该参数仅提供给支持混合云的企业可见，默认值为0 0：外部会议 1：内部会议
     */
    public V1MeetingsPostRequest mediaSetType(Long mediaSetType) {
        this.mediaSetType = mediaSetType;
        return this;
    }
    /**
     * @return mediaSetType 该参数仅提供给支持混合云的企业可见，默认值为0 0：外部会议 1：内部会议
     **/
    public Long getMediaSetType() {
        return mediaSetType;
    }

    /**
     * @param mediaSetType 该参数仅提供给支持混合云的企业可见，默认值为0 0：外部会议 1：内部会议
     */
    public void setMediaSetType(Long mediaSetType) {
        this.mediaSetType = mediaSetType;
    }
    /**
     * @param meetingType 默认值为0。 0：普通会议 1：周期性会议（周期性会议时 type 不能为快速会议，同一账号同时最多可预定50场周期性会议）
     */
    public V1MeetingsPostRequest meetingType(Long meetingType) {
        this.meetingType = meetingType;
        return this;
    }
    /**
     * @return meetingType 默认值为0。 0：普通会议 1：周期性会议（周期性会议时 type 不能为快速会议，同一账号同时最多可预定50场周期性会议）
     **/
    public Long getMeetingType() {
        return meetingType;
    }

    /**
     * @param meetingType 默认值为0。 0：普通会议 1：周期性会议（周期性会议时 type 不能为快速会议，同一账号同时最多可预定50场周期性会议）
     */
    public void setMeetingType(Long meetingType) {
        this.meetingType = meetingType;
    }
    /**
     * @param password 会议密码（4~6位数字），可不填
     */
    public V1MeetingsPostRequest password(String password) {
        this.password = password;
        return this;
    }
    /**
     * @return password 会议密码（4~6位数字），可不填
     **/
    public String getPassword() {
        return password;
    }

    /**
     * @param password 会议密码（4~6位数字），可不填
     */
    public void setPassword(String password) {
        this.password = password;
    }
    /**
     * @param recurringRule 
     */
    public V1MeetingsPostRequest recurringRule(V1MeetingsPostRequestRecurringRule recurringRule) {
        this.recurringRule = recurringRule;
        return this;
    }
    /**
     * @return recurringRule 
     **/
    public V1MeetingsPostRequestRecurringRule getRecurringRule() {
        return recurringRule;
    }

    /**
     * @param recurringRule 
     */
    public void setRecurringRule(V1MeetingsPostRequestRecurringRule recurringRule) {
        this.recurringRule = recurringRule;
    }
    /**
     * @param settings 
     */
    public V1MeetingsPostRequest settings(V1MeetingsPostRequestSettings settings) {
        this.settings = settings;
        return this;
    }
    /**
     * @return settings 
     **/
    public V1MeetingsPostRequestSettings getSettings() {
        return settings;
    }

    /**
     * @param settings 
     */
    public void setSettings(V1MeetingsPostRequestSettings settings) {
        this.settings = settings;
    }
    /**
     * @param startTime 会议开始时间戳（单位秒） (required)
     */
    public V1MeetingsPostRequest startTime(@NotNull String startTime) {
        this.startTime = startTime;
        return this;
    }
    /**
     * @return startTime 会议开始时间戳（单位秒）
     **/
    public String getStartTime() {
        return startTime;
    }

    /**
     * @param startTime 会议开始时间戳（单位秒） (required)
     */
    public void setStartTime(String startTime) {
        this.startTime = startTime;
    }
    /**
     * @param subject 会议主题 (required)
     */
    public V1MeetingsPostRequest subject(@NotNull String subject) {
        this.subject = subject;
        return this;
    }
    /**
     * @return subject 会议主题
     **/
    public String getSubject() {
        return subject;
    }

    /**
     * @param subject 会议主题 (required)
     */
    public void setSubject(String subject) {
        this.subject = subject;
    }
    /**
     * @param syncToWework 会议是否同步至企业微信，该字段仅支持创建会议时设置，创建后无法修改。 true: 同步，默认同步  false: 不同步
     */
    public V1MeetingsPostRequest syncToWework(Boolean syncToWework) {
        this.syncToWework = syncToWework;
        return this;
    }
    /**
     * @return syncToWework 会议是否同步至企业微信，该字段仅支持创建会议时设置，创建后无法修改。 true: 同步，默认同步  false: 不同步
     **/
    public Boolean getSyncToWework() {
        return syncToWework;
    }

    /**
     * @param syncToWework 会议是否同步至企业微信，该字段仅支持创建会议时设置，创建后无法修改。 true: 同步，默认同步  false: 不同步
     */
    public void setSyncToWework(Boolean syncToWework) {
        this.syncToWework = syncToWework;
    }
    /**
     * @param timeZone 时区，可参见 Oracle-TimeZone 标准
     */
    public V1MeetingsPostRequest timeZone(String timeZone) {
        this.timeZone = timeZone;
        return this;
    }
    /**
     * @return timeZone 时区，可参见 Oracle-TimeZone 标准
     **/
    public String getTimeZone() {
        return timeZone;
    }

    /**
     * @param timeZone 时区，可参见 Oracle-TimeZone 标准
     */
    public void setTimeZone(String timeZone) {
        this.timeZone = timeZone;
    }
    /**
     * @param type 会议类型 0：预约会议 1：快速会议  (required)
     */
    public V1MeetingsPostRequest type(@NotNull Long type) {
        this.type = type;
        return this;
    }
    /**
     * @return type 会议类型 0：预约会议 1：快速会议 
     **/
    public Long getType() {
        return type;
    }

    /**
     * @param type 会议类型 0：预约会议 1：快速会议  (required)
     */
    public void setType(Long type) {
        this.type = type;
    }
    /**
     * @param userid 调用方用于标示用户的唯一 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 企业唯一用户标识说明： 1. 企业对接 SSO 时使用的员工唯一标识 ID； 2. 企业调用创建用户接口时传递的 userid 参数。 (required)
     */
    public V1MeetingsPostRequest userid(@NotNull String userid) {
        this.userid = userid;
        return this;
    }
    /**
     * @return userid 调用方用于标示用户的唯一 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 企业唯一用户标识说明： 1. 企业对接 SSO 时使用的员工唯一标识 ID； 2. 企业调用创建用户接口时传递的 userid 参数。
     **/
    public String getUserid() {
        return userid;
    }

    /**
     * @param userid 调用方用于标示用户的唯一 ID（企业内部请使用企业唯一用户标识；OAuth2.0 鉴权用户请使用 openId）。 企业唯一用户标识说明： 1. 企业对接 SSO 时使用的员工唯一标识 ID； 2. 企业调用创建用户接口时传递的 userid 参数。 (required)
     */
    public void setUserid(String userid) {
        this.userid = userid;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V1MeetingsPostRequest v1MeetingsPostRequest = (V1MeetingsPostRequest) o;
        return Objects.equals(this.allowEnterpriseIntranetOnly, v1MeetingsPostRequest.allowEnterpriseIntranetOnly) &&
            Objects.equals(this.enableDocUploadPermission, v1MeetingsPostRequest.enableDocUploadPermission) &&
            Objects.equals(this.enableEnroll, v1MeetingsPostRequest.enableEnroll) &&
            Objects.equals(this.enableHostKey, v1MeetingsPostRequest.enableHostKey) &&
            Objects.equals(this.enableInterpreter, v1MeetingsPostRequest.enableInterpreter) &&
            Objects.equals(this.enableLive, v1MeetingsPostRequest.enableLive) &&
            Objects.equals(this.endTime, v1MeetingsPostRequest.endTime) &&
            Objects.equals(this.guests, v1MeetingsPostRequest.guests) &&
            Objects.equals(this.hostKey, v1MeetingsPostRequest.hostKey) &&
            Objects.equals(this.hosts, v1MeetingsPostRequest.hosts) &&
            Objects.equals(this.instanceid, v1MeetingsPostRequest.instanceid) &&
            Objects.equals(this.invitees, v1MeetingsPostRequest.invitees) &&
            Objects.equals(this.liveConfig, v1MeetingsPostRequest.liveConfig) &&
            Objects.equals(this.location, v1MeetingsPostRequest.location) &&
            Objects.equals(this.mediaSetType, v1MeetingsPostRequest.mediaSetType) &&
            Objects.equals(this.meetingType, v1MeetingsPostRequest.meetingType) &&
            Objects.equals(this.password, v1MeetingsPostRequest.password) &&
            Objects.equals(this.recurringRule, v1MeetingsPostRequest.recurringRule) &&
            Objects.equals(this.settings, v1MeetingsPostRequest.settings) &&
            Objects.equals(this.startTime, v1MeetingsPostRequest.startTime) &&
            Objects.equals(this.subject, v1MeetingsPostRequest.subject) &&
            Objects.equals(this.syncToWework, v1MeetingsPostRequest.syncToWework) &&
            Objects.equals(this.timeZone, v1MeetingsPostRequest.timeZone) &&
            Objects.equals(this.type, v1MeetingsPostRequest.type) &&
            Objects.equals(this.userid, v1MeetingsPostRequest.userid);
    }

    @Override
    public int hashCode() {
        return Objects.hash(allowEnterpriseIntranetOnly, enableDocUploadPermission, enableEnroll, enableHostKey, enableInterpreter, enableLive, endTime, guests, hostKey, hosts, instanceid, invitees, liveConfig, location, mediaSetType, meetingType, password, recurringRule, settings, startTime, subject, syncToWework, timeZone, type, userid);
    }

    /**
    * Convert the given object to string with each line indented by 4 spaces
    * (except the first line).
    */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class V1MeetingsPostRequest {\n");
        sb.append("    allowEnterpriseIntranetOnly: ").append(toIndentedString(allowEnterpriseIntranetOnly)).append("\n");
        sb.append("    enableDocUploadPermission: ").append(toIndentedString(enableDocUploadPermission)).append("\n");
        sb.append("    enableEnroll: ").append(toIndentedString(enableEnroll)).append("\n");
        sb.append("    enableHostKey: ").append(toIndentedString(enableHostKey)).append("\n");
        sb.append("    enableInterpreter: ").append(toIndentedString(enableInterpreter)).append("\n");
        sb.append("    enableLive: ").append(toIndentedString(enableLive)).append("\n");
        sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
        sb.append("    guests: ").append(toIndentedString(guests)).append("\n");
        sb.append("    hostKey: ").append(toIndentedString(hostKey)).append("\n");
        sb.append("    hosts: ").append(toIndentedString(hosts)).append("\n");
        sb.append("    instanceid: ").append(toIndentedString(instanceid)).append("\n");
        sb.append("    invitees: ").append(toIndentedString(invitees)).append("\n");
        sb.append("    liveConfig: ").append(toIndentedString(liveConfig)).append("\n");
        sb.append("    location: ").append(toIndentedString(location)).append("\n");
        sb.append("    mediaSetType: ").append(toIndentedString(mediaSetType)).append("\n");
        sb.append("    meetingType: ").append(toIndentedString(meetingType)).append("\n");
        sb.append("    password: ").append(toIndentedString(password)).append("\n");
        sb.append("    recurringRule: ").append(toIndentedString(recurringRule)).append("\n");
        sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
        sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
        sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
        sb.append("    syncToWework: ").append(toIndentedString(syncToWework)).append("\n");
        sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    userid: ").append(toIndentedString(userid)).append("\n");
        sb.append("}");
        return sb.toString();
    }
}

