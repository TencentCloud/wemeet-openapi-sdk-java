/*
 * 腾讯会议OpenAPI
 * SAAS版RESTFUL风格API
 *
 * The version of the OpenAPI document: v1.0.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.tencentcloudapi.wemeet.service.meetings.model;

import java.util.*;
import java.math.BigDecimal;

import com.fasterxml.jackson.annotation.*;
import org.jetbrains.annotations.NotNull;

/**
 * V1MeetingsQueryMeetingidForDevicePostRequest
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
public class V1MeetingsQueryMeetingidForDevicePostRequest {
    @JsonProperty(value = "instanceids")
    private List<Long> instanceids;

    @JsonProperty(value = "meeting_id", required = true)
    private List<String> meetingId;

    @JsonProperty(value = "operator_id", required = true)
    private String operatorId;

    @JsonProperty(value = "operator_id_type", required = true)
    private Long operatorIdType;

    /**
     * @param meetingId 会议ID。查询用户是否有设备在指定的会中。  企业自建鉴权方式，该参数必填且必须为本企业创建的会议。只能查询某个用户是否在某场本企业的会中。 (required)
     * @param operatorId 操作者 ID，即查询者的信息。 operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
     * @param operatorIdType 操作者 ID 的类型：  1：企业内用户 userid。JWT鉴权仅支持userid  (required)
     */
    public V1MeetingsQueryMeetingidForDevicePostRequest(@NotNull List<String> meetingId, @NotNull String operatorId, @NotNull Long operatorIdType) {
        this.meetingId = meetingId;
        this.operatorId = operatorId;
        this.operatorIdType = operatorIdType;
    }

    /**
     * @param instanceids 终端设备类型列表，该参数不带，则会查询所有设备上的会议信息，带则表示查询指定设备。 用户的终端设备类型： 0：PSTN 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：linux 20：Rooms for Touch Windows 21：Rooms for Touch MacOS 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch iOS
     */
    public V1MeetingsQueryMeetingidForDevicePostRequest instanceids(List<Long> instanceids) {
        this.instanceids = instanceids;
        return this;
    }
    /**
     * @return instanceids 终端设备类型列表，该参数不带，则会查询所有设备上的会议信息，带则表示查询指定设备。 用户的终端设备类型： 0：PSTN 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：linux 20：Rooms for Touch Windows 21：Rooms for Touch MacOS 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch iOS
     **/
    public List<Long> getInstanceids() {
        return instanceids;
    }

    /**
     * @param instanceids 终端设备类型列表，该参数不带，则会查询所有设备上的会议信息，带则表示查询指定设备。 用户的终端设备类型： 0：PSTN 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：linux 20：Rooms for Touch Windows 21：Rooms for Touch MacOS 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch iOS
     */
    public void setInstanceids(List<Long> instanceids) {
        this.instanceids = instanceids;
    }
    /**
     * @param meetingId 会议ID。查询用户是否有设备在指定的会中。  企业自建鉴权方式，该参数必填且必须为本企业创建的会议。只能查询某个用户是否在某场本企业的会中。 (required)
     */
    public V1MeetingsQueryMeetingidForDevicePostRequest meetingId(@NotNull List<String> meetingId) {
        this.meetingId = meetingId;
        return this;
    }
    /**
     * @return meetingId 会议ID。查询用户是否有设备在指定的会中。  企业自建鉴权方式，该参数必填且必须为本企业创建的会议。只能查询某个用户是否在某场本企业的会中。
     **/
    public List<String> getMeetingId() {
        return meetingId;
    }

    /**
     * @param meetingId 会议ID。查询用户是否有设备在指定的会中。  企业自建鉴权方式，该参数必填且必须为本企业创建的会议。只能查询某个用户是否在某场本企业的会中。 (required)
     */
    public void setMeetingId(List<String> meetingId) {
        this.meetingId = meetingId;
    }
    /**
     * @param operatorId 操作者 ID，即查询者的信息。 operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
     */
    public V1MeetingsQueryMeetingidForDevicePostRequest operatorId(@NotNull String operatorId) {
        this.operatorId = operatorId;
        return this;
    }
    /**
     * @return operatorId 操作者 ID，即查询者的信息。 operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。
     **/
    public String getOperatorId() {
        return operatorId;
    }

    /**
     * @param operatorId 操作者 ID，即查询者的信息。 operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
     */
    public void setOperatorId(String operatorId) {
        this.operatorId = operatorId;
    }
    /**
     * @param operatorIdType 操作者 ID 的类型：  1：企业内用户 userid。JWT鉴权仅支持userid  (required)
     */
    public V1MeetingsQueryMeetingidForDevicePostRequest operatorIdType(@NotNull Long operatorIdType) {
        this.operatorIdType = operatorIdType;
        return this;
    }
    /**
     * @return operatorIdType 操作者 ID 的类型：  1：企业内用户 userid。JWT鉴权仅支持userid 
     **/
    public Long getOperatorIdType() {
        return operatorIdType;
    }

    /**
     * @param operatorIdType 操作者 ID 的类型：  1：企业内用户 userid。JWT鉴权仅支持userid  (required)
     */
    public void setOperatorIdType(Long operatorIdType) {
        this.operatorIdType = operatorIdType;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V1MeetingsQueryMeetingidForDevicePostRequest v1MeetingsQueryMeetingidForDevicePostRequest = (V1MeetingsQueryMeetingidForDevicePostRequest) o;
        return Objects.equals(this.instanceids, v1MeetingsQueryMeetingidForDevicePostRequest.instanceids) &&
            Objects.equals(this.meetingId, v1MeetingsQueryMeetingidForDevicePostRequest.meetingId) &&
            Objects.equals(this.operatorId, v1MeetingsQueryMeetingidForDevicePostRequest.operatorId) &&
            Objects.equals(this.operatorIdType, v1MeetingsQueryMeetingidForDevicePostRequest.operatorIdType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(instanceids, meetingId, operatorId, operatorIdType);
    }

    /**
    * Convert the given object to string with each line indented by 4 spaces
    * (except the first line).
    */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class V1MeetingsQueryMeetingidForDevicePostRequest {\n");
        sb.append("    instanceids: ").append(toIndentedString(instanceids)).append("\n");
        sb.append("    meetingId: ").append(toIndentedString(meetingId)).append("\n");
        sb.append("    operatorId: ").append(toIndentedString(operatorId)).append("\n");
        sb.append("    operatorIdType: ").append(toIndentedString(operatorIdType)).append("\n");
        sb.append("}");
        return sb.toString();
    }
}

