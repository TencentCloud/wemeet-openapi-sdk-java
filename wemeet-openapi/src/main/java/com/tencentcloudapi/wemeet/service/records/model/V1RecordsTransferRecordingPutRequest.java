/*
 * 腾讯会议OpenAPI
 * SAAS版RESTFUL风格API
 *
 * The version of the OpenAPI document: v1.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.tencentcloudapi.wemeet.service.records.model;

import java.util.*;
import java.math.BigDecimal;

import com.fasterxml.jackson.annotation.*;
import org.jetbrains.annotations.NotNull;

/**
 * V1RecordsTransferRecordingPutRequest
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
public class V1RecordsTransferRecordingPutRequest {
    @JsonProperty(value = "delete_recording_after_transfer")
    private String deleteRecordingAfterTransfer;

    @JsonProperty(value = "instanceid", required = true)
    private Long instanceid;

    @JsonProperty(value = "operator_id", required = true)
    private String operatorId;

    @JsonProperty(value = "operator_id_type", required = true)
    private Long operatorIdType;

    /**
     * @param instanceid  (required)
     * @param operatorId 操作者 ID，根据 operator_id_type 的值，使用不同的类型。 (required)
     * @param operatorIdType 操作者 ID 的类型： 1：userid (required)
     */
    public V1RecordsTransferRecordingPutRequest(@NotNull Long instanceid, @NotNull String operatorId, @NotNull Long operatorIdType) {
        this.instanceid = instanceid;
        this.operatorId = operatorId;
        this.operatorIdType = operatorIdType;
    }

    /**
     * @param deleteRecordingAfterTransfer 如果参数未带， 则按集群删除策略对指定录制删除操作。    转存完成后删除录制策略：  0 - 转存完成后立刻删除录制文件  1～30 - 转存完成后1～30天后删除录制文件  不删除 - 转存完成后不删除录制文件
     */
    public V1RecordsTransferRecordingPutRequest deleteRecordingAfterTransfer(String deleteRecordingAfterTransfer) {
        this.deleteRecordingAfterTransfer = deleteRecordingAfterTransfer;
        return this;
    }
    /**
     * @return deleteRecordingAfterTransfer 如果参数未带， 则按集群删除策略对指定录制删除操作。    转存完成后删除录制策略：  0 - 转存完成后立刻删除录制文件  1～30 - 转存完成后1～30天后删除录制文件  不删除 - 转存完成后不删除录制文件
     **/
    public String getDeleteRecordingAfterTransfer() {
        return deleteRecordingAfterTransfer;
    }

    /**
     * @param deleteRecordingAfterTransfer 如果参数未带， 则按集群删除策略对指定录制删除操作。    转存完成后删除录制策略：  0 - 转存完成后立刻删除录制文件  1～30 - 转存完成后1～30天后删除录制文件  不删除 - 转存完成后不删除录制文件
     */
    public void setDeleteRecordingAfterTransfer(String deleteRecordingAfterTransfer) {
        this.deleteRecordingAfterTransfer = deleteRecordingAfterTransfer;
    }
    /**
     * @param instanceid  (required)
     */
    public V1RecordsTransferRecordingPutRequest instanceid(@NotNull Long instanceid) {
        this.instanceid = instanceid;
        return this;
    }
    /**
     * @return instanceid 
     **/
    public Long getInstanceid() {
        return instanceid;
    }

    /**
     * @param instanceid  (required)
     */
    public void setInstanceid(Long instanceid) {
        this.instanceid = instanceid;
    }
    /**
     * @param operatorId 操作者 ID，根据 operator_id_type 的值，使用不同的类型。 (required)
     */
    public V1RecordsTransferRecordingPutRequest operatorId(@NotNull String operatorId) {
        this.operatorId = operatorId;
        return this;
    }
    /**
     * @return operatorId 操作者 ID，根据 operator_id_type 的值，使用不同的类型。
     **/
    public String getOperatorId() {
        return operatorId;
    }

    /**
     * @param operatorId 操作者 ID，根据 operator_id_type 的值，使用不同的类型。 (required)
     */
    public void setOperatorId(String operatorId) {
        this.operatorId = operatorId;
    }
    /**
     * @param operatorIdType 操作者 ID 的类型： 1：userid (required)
     */
    public V1RecordsTransferRecordingPutRequest operatorIdType(@NotNull Long operatorIdType) {
        this.operatorIdType = operatorIdType;
        return this;
    }
    /**
     * @return operatorIdType 操作者 ID 的类型： 1：userid
     **/
    public Long getOperatorIdType() {
        return operatorIdType;
    }

    /**
     * @param operatorIdType 操作者 ID 的类型： 1：userid (required)
     */
    public void setOperatorIdType(Long operatorIdType) {
        this.operatorIdType = operatorIdType;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V1RecordsTransferRecordingPutRequest v1RecordsTransferRecordingPutRequest = (V1RecordsTransferRecordingPutRequest) o;
        return Objects.equals(this.deleteRecordingAfterTransfer, v1RecordsTransferRecordingPutRequest.deleteRecordingAfterTransfer) &&
            Objects.equals(this.instanceid, v1RecordsTransferRecordingPutRequest.instanceid) &&
            Objects.equals(this.operatorId, v1RecordsTransferRecordingPutRequest.operatorId) &&
            Objects.equals(this.operatorIdType, v1RecordsTransferRecordingPutRequest.operatorIdType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(deleteRecordingAfterTransfer, instanceid, operatorId, operatorIdType);
    }

    /**
    * Convert the given object to string with each line indented by 4 spaces
    * (except the first line).
    */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class V1RecordsTransferRecordingPutRequest {\n");
        sb.append("    deleteRecordingAfterTransfer: ").append(toIndentedString(deleteRecordingAfterTransfer)).append("\n");
        sb.append("    instanceid: ").append(toIndentedString(instanceid)).append("\n");
        sb.append("    operatorId: ").append(toIndentedString(operatorId)).append("\n");
        sb.append("    operatorIdType: ").append(toIndentedString(operatorIdType)).append("\n");
        sb.append("}");
        return sb.toString();
    }
}

