/*
 * 腾讯会议OpenAPI
 * SAAS版RESTFUL风格API
 *
 * The version of the OpenAPI document: v1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.tencentcloudapi.wemeet.service.records.model;

import java.util.*;

import com.fasterxml.jackson.annotation.*;

/**
 * 会议纪要对象。
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
public class V1RecordsTranscriptsDetailsGet200ResponseMinutes {
    @JsonProperty(value = "audio_detect")
    private Long audioDetect;

    @JsonProperty(value = "paragraphs")
    private List<V1RecordsTranscriptsDetailsGet200ResponseMinutesParagraphsInner> paragraphs;

    /**
     */
    public V1RecordsTranscriptsDetailsGet200ResponseMinutes() {
    }

    /**
     * @param audioDetect 声纹识别状态0-未完成 1-已完成。说明：声纹识别是针对 Rooms 等设备出现一台设备多人讲话场景时，自动区分为多个发言人的能力。声纹识别与纪要生成的过程独立。无需声纹识别或声纹识别已完成时，该值为1。
     */
    public V1RecordsTranscriptsDetailsGet200ResponseMinutes audioDetect(Long audioDetect) {
        this.audioDetect = audioDetect;
        return this;
    }
    /**
     * @return audioDetect 声纹识别状态0-未完成 1-已完成。说明：声纹识别是针对 Rooms 等设备出现一台设备多人讲话场景时，自动区分为多个发言人的能力。声纹识别与纪要生成的过程独立。无需声纹识别或声纹识别已完成时，该值为1。
     **/
    public Long getAudioDetect() {
        return audioDetect;
    }

    /**
     * @param audioDetect 声纹识别状态0-未完成 1-已完成。说明：声纹识别是针对 Rooms 等设备出现一台设备多人讲话场景时，自动区分为多个发言人的能力。声纹识别与纪要生成的过程独立。无需声纹识别或声纹识别已完成时，该值为1。
     */
    public void setAudioDetect(Long audioDetect) {
        this.audioDetect = audioDetect;
    }
    /**
     * @param paragraphs 段落对象列表
     */
    public V1RecordsTranscriptsDetailsGet200ResponseMinutes paragraphs(List<V1RecordsTranscriptsDetailsGet200ResponseMinutesParagraphsInner> paragraphs) {
        this.paragraphs = paragraphs;
        return this;
    }
    /**
     * @return paragraphs 段落对象列表
     **/
    public List<V1RecordsTranscriptsDetailsGet200ResponseMinutesParagraphsInner> getParagraphs() {
        return paragraphs;
    }

    /**
     * @param paragraphs 段落对象列表
     */
    public void setParagraphs(List<V1RecordsTranscriptsDetailsGet200ResponseMinutesParagraphsInner> paragraphs) {
        this.paragraphs = paragraphs;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V1RecordsTranscriptsDetailsGet200ResponseMinutes v1RecordsTranscriptsDetailsGet200ResponseMinutes = (V1RecordsTranscriptsDetailsGet200ResponseMinutes) o;
        return Objects.equals(this.audioDetect, v1RecordsTranscriptsDetailsGet200ResponseMinutes.audioDetect) &&
            Objects.equals(this.paragraphs, v1RecordsTranscriptsDetailsGet200ResponseMinutes.paragraphs);
    }

    @Override
    public int hashCode() {
        return Objects.hash(audioDetect, paragraphs);
    }

    /**
    * Convert the given object to string with each line indented by 4 spaces
    * (except the first line).
    */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class V1RecordsTranscriptsDetailsGet200ResponseMinutes {\n");
        sb.append("    audioDetect: ").append(toIndentedString(audioDetect)).append("\n");
        sb.append("    paragraphs: ").append(toIndentedString(paragraphs)).append("\n");
        sb.append("}");
        return sb.toString();
    }
}

