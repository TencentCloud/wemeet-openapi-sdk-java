/*
 * 腾讯会议OpenAPI
 * SAAS版RESTFUL风格API
 *
 * The version of the OpenAPI document: v1.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.tencentcloudapi.wemeet.service.record_intelligence.api;

import com.tencentcloudapi.wemeet.core.Config;
import com.tencentcloudapi.wemeet.core.Constants;
import com.tencentcloudapi.wemeet.core.authenticator.AuthenticatorBuilder;
import com.tencentcloudapi.wemeet.core.xhttp.*;
import com.tencentcloudapi.wemeet.core.exception.*;
import com.tencentcloudapi.wemeet.service.record_intelligence.model.*;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import java.io.File;


public class RecordIntelligenceApi {

    private final Config config;

    public RecordIntelligenceApi(Config config) {
        this.config = config;
    }

    public static class ApiV1SmartChaptersGetRequest {
    
        /**
         * operatorId 操作者ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
         */
        private String operatorId;

        /**
         * operatorIdType 操作者ID类型： 1：userid 2:openid (required)
         */
        private String operatorIdType;

        /**
         * recordFileId 录制文件ID，列表接口返回的 record_file_id。 (required)
         */
        private String recordFileId;

        /**
         * lang 翻译类型，默认原文展示 \&quot;default\&quot; ：原文（不翻译） \&quot;zh\&quot; ：简体中文 \&quot;en\&quot; ：英文 \&quot;ja\&quot;： 日语 (optional, default to default)
         */
        private String lang;

        /**
         * pwd  (optional)
         */
        private String pwd;
        private Object body;

        private ApiV1SmartChaptersGetRequest() {}

        private ApiV1SmartChaptersGetRequest(Builder builder) {
            
            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.recordFileId = builder.recordFileId;
            

            this.lang = builder.lang;
            

            this.pwd = builder.pwd;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * operatorId 操作者ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
             */
            private String operatorId;
            

            /**
             * operatorIdType 操作者ID类型： 1：userid 2:openid (required)
             */
            private String operatorIdType;
            

            /**
             * recordFileId 录制文件ID，列表接口返回的 record_file_id。 (required)
             */
            private String recordFileId;
            

            /**
             * lang 翻译类型，默认原文展示 \&quot;default\&quot; ：原文（不翻译） \&quot;zh\&quot; ：简体中文 \&quot;en\&quot; ：英文 \&quot;ja\&quot;： 日语 (optional, default to default)
             */
            private String lang;
            

            /**
             * pwd  (optional)
             */
            private String pwd;
            

            private Object body;

            /**
             */
            public Builder() {
            }
            
            /**
             * @param operatorId 操作者ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 操作者ID类型： 1：userid 2:openid (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
            
            /**
             * @param recordFileId 录制文件ID，列表接口返回的 record_file_id。 (required)
             */
            public Builder recordFileId(String recordFileId) {
                this.recordFileId = recordFileId;
                return this;
            }
            
            
            /**
             * @param lang 翻译类型，默认原文展示 \&quot;default\&quot; ：原文（不翻译） \&quot;zh\&quot; ：简体中文 \&quot;en\&quot; ：英文 \&quot;ja\&quot;： 日语 (optional, default to default)
             */
            public Builder lang(String lang) {
                this.lang = lang;
                return this;
            }
            
            
            /**
             * @param pwd  (optional)
             */
            public Builder pwd(String pwd) {
                this.pwd = pwd;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1SmartChaptersGetRequest build() {
                return new ApiV1SmartChaptersGetRequest(this);
            }
        }
        
        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public String getRecordFileId() {
            return this.recordFileId;
        }
        

        public String getLang() {
            return this.lang;
        }
        

        public String getPwd() {
            return this.pwd;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1SmartChaptersGetResponse extends ApiResponse {
        private final V1SmartChaptersGet200Response data;
        public ApiV1SmartChaptersGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1SmartChaptersGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1SmartChaptersGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1SmartFullsummaryGetRequest {
    
        /**
         * operatorId 操作者ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
         */
        private String operatorId;

        /**
         * operatorIdType 操作者ID类型： 1：userid 2:openid (required)
         */
        private String operatorIdType;

        /**
         * recordFileId 录制文件ID，列表接口返回的 record_file_id。 (required)
         */
        private String recordFileId;

        /**
         * lang 翻译类型，默认原文展示 \&quot;default\&quot; 原文（不翻译） \&quot;zh\&quot; 简体中文 \&quot;en\&quot; 英文 \&quot;ja\&quot; 日语 (optional)
         */
        private String lang;

        /**
         * pwd 录制文件的访问密码，非必填 (optional)
         */
        private String pwd;
        private Object body;

        private ApiV1SmartFullsummaryGetRequest() {}

        private ApiV1SmartFullsummaryGetRequest(Builder builder) {
            
            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.recordFileId = builder.recordFileId;
            

            this.lang = builder.lang;
            

            this.pwd = builder.pwd;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * operatorId 操作者ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
             */
            private String operatorId;
            

            /**
             * operatorIdType 操作者ID类型： 1：userid 2:openid (required)
             */
            private String operatorIdType;
            

            /**
             * recordFileId 录制文件ID，列表接口返回的 record_file_id。 (required)
             */
            private String recordFileId;
            

            /**
             * lang 翻译类型，默认原文展示 \&quot;default\&quot; 原文（不翻译） \&quot;zh\&quot; 简体中文 \&quot;en\&quot; 英文 \&quot;ja\&quot; 日语 (optional)
             */
            private String lang;
            

            /**
             * pwd 录制文件的访问密码，非必填 (optional)
             */
            private String pwd;
            

            private Object body;

            /**
             */
            public Builder() {
            }
            
            /**
             * @param operatorId 操作者ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 操作者ID类型： 1：userid 2:openid (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
            
            /**
             * @param recordFileId 录制文件ID，列表接口返回的 record_file_id。 (required)
             */
            public Builder recordFileId(String recordFileId) {
                this.recordFileId = recordFileId;
                return this;
            }
            
            
            /**
             * @param lang 翻译类型，默认原文展示 \&quot;default\&quot; 原文（不翻译） \&quot;zh\&quot; 简体中文 \&quot;en\&quot; 英文 \&quot;ja\&quot; 日语 (optional)
             */
            public Builder lang(String lang) {
                this.lang = lang;
                return this;
            }
            
            
            /**
             * @param pwd 录制文件的访问密码，非必填 (optional)
             */
            public Builder pwd(String pwd) {
                this.pwd = pwd;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1SmartFullsummaryGetRequest build() {
                return new ApiV1SmartFullsummaryGetRequest(this);
            }
        }
        
        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public String getRecordFileId() {
            return this.recordFileId;
        }
        

        public String getLang() {
            return this.lang;
        }
        

        public String getPwd() {
            return this.pwd;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1SmartFullsummaryGetResponse extends ApiResponse {
        private final V1SmartFullsummaryGet200Response data;
        public ApiV1SmartFullsummaryGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1SmartFullsummaryGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1SmartFullsummaryGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1SmartSpeakersGetRequest {
    
        /**
         * operatorId 操作者ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
         */
        private String operatorId;

        /**
         * operatorIdType 操作者ID类型： 1：userid 2:openid (required)
         */
        private String operatorIdType;

        /**
         * recordFileId 录制文件ID，列表接口返回的 record_file_id。 (required)
         */
        private String recordFileId;

        /**
         * page 页码，从1开始 (required)
         */
        private String page;

        /**
         * pageSize 返回数量，最大50 (required)
         */
        private String pageSize;

        /**
         * pwd 录制文件的访问密码，非必填 (optional)
         */
        private String pwd;
        private Object body;

        private ApiV1SmartSpeakersGetRequest() {}

        private ApiV1SmartSpeakersGetRequest(Builder builder) {
            
            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.recordFileId = builder.recordFileId;
            

            this.page = builder.page;
            

            this.pageSize = builder.pageSize;
            

            this.pwd = builder.pwd;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * operatorId 操作者ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
             */
            private String operatorId;
            

            /**
             * operatorIdType 操作者ID类型： 1：userid 2:openid (required)
             */
            private String operatorIdType;
            

            /**
             * recordFileId 录制文件ID，列表接口返回的 record_file_id。 (required)
             */
            private String recordFileId;
            

            /**
             * page 页码，从1开始 (required)
             */
            private String page;
            

            /**
             * pageSize 返回数量，最大50 (required)
             */
            private String pageSize;
            

            /**
             * pwd 录制文件的访问密码，非必填 (optional)
             */
            private String pwd;
            

            private Object body;

            /**
             */
            public Builder() {
            }
            
            /**
             * @param operatorId 操作者ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 操作者ID类型： 1：userid 2:openid (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
            
            /**
             * @param recordFileId 录制文件ID，列表接口返回的 record_file_id。 (required)
             */
            public Builder recordFileId(String recordFileId) {
                this.recordFileId = recordFileId;
                return this;
            }
            
            
            /**
             * @param page 页码，从1开始 (required)
             */
            public Builder page(String page) {
                this.page = page;
                return this;
            }
            
            
            /**
             * @param pageSize 返回数量，最大50 (required)
             */
            public Builder pageSize(String pageSize) {
                this.pageSize = pageSize;
                return this;
            }
            
            
            /**
             * @param pwd 录制文件的访问密码，非必填 (optional)
             */
            public Builder pwd(String pwd) {
                this.pwd = pwd;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1SmartSpeakersGetRequest build() {
                return new ApiV1SmartSpeakersGetRequest(this);
            }
        }
        
        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public String getRecordFileId() {
            return this.recordFileId;
        }
        

        public String getPage() {
            return this.page;
        }
        

        public String getPageSize() {
            return this.pageSize;
        }
        

        public String getPwd() {
            return this.pwd;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1SmartSpeakersGetResponse extends ApiResponse {
        private final V1SmartSpeakersGet200Response data;
        public ApiV1SmartSpeakersGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1SmartSpeakersGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1SmartSpeakersGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1SmartTopicsGetRequest {
    
        /**
         * operatorId 操作者ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
         */
        private String operatorId;

        /**
         * operatorIdType 操作者ID类型： 1：userid 2:openid (required)
         */
        private String operatorIdType;

        /**
         * recordFileId 录制文件ID，列表接口返回的 record_file_id。 (required)
         */
        private String recordFileId;

        /**
         * lang 翻译类型，默认原文展示 \&quot;default\&quot; 原文（不翻译） \&quot;zh\&quot; 简体中文 \&quot;en\&quot; 英文 \&quot;ja\&quot; 日语 (optional)
         */
        private String lang;

        /**
         * pwd 录制文件的访问密码，非必填 (optional)
         */
        private String pwd;
        private Object body;

        private ApiV1SmartTopicsGetRequest() {}

        private ApiV1SmartTopicsGetRequest(Builder builder) {
            
            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.recordFileId = builder.recordFileId;
            

            this.lang = builder.lang;
            

            this.pwd = builder.pwd;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * operatorId 操作者ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
             */
            private String operatorId;
            

            /**
             * operatorIdType 操作者ID类型： 1：userid 2:openid (required)
             */
            private String operatorIdType;
            

            /**
             * recordFileId 录制文件ID，列表接口返回的 record_file_id。 (required)
             */
            private String recordFileId;
            

            /**
             * lang 翻译类型，默认原文展示 \&quot;default\&quot; 原文（不翻译） \&quot;zh\&quot; 简体中文 \&quot;en\&quot; 英文 \&quot;ja\&quot; 日语 (optional)
             */
            private String lang;
            

            /**
             * pwd 录制文件的访问密码，非必填 (optional)
             */
            private String pwd;
            

            private Object body;

            /**
             */
            public Builder() {
            }
            
            /**
             * @param operatorId 操作者ID。operator_id 必须与 operator_id_type 配合使用。根据 operator_id_type 的值，operator_id 代表不同类型。 (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 操作者ID类型： 1：userid 2:openid (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
            
            /**
             * @param recordFileId 录制文件ID，列表接口返回的 record_file_id。 (required)
             */
            public Builder recordFileId(String recordFileId) {
                this.recordFileId = recordFileId;
                return this;
            }
            
            
            /**
             * @param lang 翻译类型，默认原文展示 \&quot;default\&quot; 原文（不翻译） \&quot;zh\&quot; 简体中文 \&quot;en\&quot; 英文 \&quot;ja\&quot; 日语 (optional)
             */
            public Builder lang(String lang) {
                this.lang = lang;
                return this;
            }
            
            
            /**
             * @param pwd 录制文件的访问密码，非必填 (optional)
             */
            public Builder pwd(String pwd) {
                this.pwd = pwd;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1SmartTopicsGetRequest build() {
                return new ApiV1SmartTopicsGetRequest(this);
            }
        }
        
        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public String getRecordFileId() {
            return this.recordFileId;
        }
        

        public String getLang() {
            return this.lang;
        }
        

        public String getPwd() {
            return this.pwd;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1SmartTopicsGetResponse extends ApiResponse {
        private final V1SmartTopicsGet200Response data;
        public ApiV1SmartTopicsGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1SmartTopicsGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1SmartTopicsGet200Response getData() {
            return this.data;
        }
    }

    /**
     * v1SmartChaptersGet 智能章节[/v1/smart/chapters - GET]
     * <p>查询单个云录制的智能章节，支持OAuth2.0鉴权调用，仅支持授权用户为商业版、企业版、教育版。 当该录制文件未开启相关智能化功能或内容处于生成中状态时，结果返回错误码<p/>
     * @param req ApiV1SmartChaptersGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1SmartChaptersGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1SmartChaptersGetResponse v1SmartChaptersGet(ApiV1SmartChaptersGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/smart/chapters")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            

            // verify the required parameter 'recordFileId' is set
            if (req.getRecordFileId() == null) {
                throw new IllegalArgumentException("'recordFileId' is required and must be specified");
            }
            

            

            

            
            // path 参数
            // query 参数
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getRecordFileId() != null) {
                apiReq.getQueryParams().set("record_file_id", req.getRecordFileId());
            }
            if (req.getLang() != null) {
                apiReq.getQueryParams().set("lang", req.getLang());
            }
            if (req.getPwd() != null) {
                apiReq.getQueryParams().set("pwd", req.getPwd());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1SmartChaptersGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1SmartChaptersGet 智能章节[/v1/smart/chapters - GET]
    * <p>查询单个云录制的智能章节，支持OAuth2.0鉴权调用，仅支持授权用户为商业版、企业版、教育版。 当该录制文件未开启相关智能化功能或内容处于生成中状态时，结果返回错误码<p/>
    * @param req ApiV1SmartChaptersGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1SmartChaptersGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1SmartChaptersGetResponse v1SmartChaptersGet(ApiV1SmartChaptersGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1SmartChaptersGet(req, null, builders);
    }
    /**
     * v1SmartFullsummaryGet 智能总结[/v1/smart/fullsummary - GET]
     * <p>查询单个云录制的智能总结。支持OAuth2.0鉴权调用，仅支持授权用户为商业版、企业版、教育版。 当该录制文件未开启相关智能化功能或内容处于生成中状态时，结果返回错误码<p/>
     * @param req ApiV1SmartFullsummaryGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1SmartFullsummaryGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1SmartFullsummaryGetResponse v1SmartFullsummaryGet(ApiV1SmartFullsummaryGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/smart/fullsummary")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            

            // verify the required parameter 'recordFileId' is set
            if (req.getRecordFileId() == null) {
                throw new IllegalArgumentException("'recordFileId' is required and must be specified");
            }
            

            

            

            
            // path 参数
            // query 参数
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getRecordFileId() != null) {
                apiReq.getQueryParams().set("record_file_id", req.getRecordFileId());
            }
            if (req.getLang() != null) {
                apiReq.getQueryParams().set("lang", req.getLang());
            }
            if (req.getPwd() != null) {
                apiReq.getQueryParams().set("pwd", req.getPwd());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1SmartFullsummaryGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1SmartFullsummaryGet 智能总结[/v1/smart/fullsummary - GET]
    * <p>查询单个云录制的智能总结。支持OAuth2.0鉴权调用，仅支持授权用户为商业版、企业版、教育版。 当该录制文件未开启相关智能化功能或内容处于生成中状态时，结果返回错误码<p/>
    * @param req ApiV1SmartFullsummaryGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1SmartFullsummaryGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1SmartFullsummaryGetResponse v1SmartFullsummaryGet(ApiV1SmartFullsummaryGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1SmartFullsummaryGet(req, null, builders);
    }
    /**
     * v1SmartSpeakersGet 智能发言人[/v1/smart/speakers - GET]
     * <p>查询单个云录制的发言人列表。支持OAuth2.0鉴权调用，仅支持授权用户为商业版、企业版、教育版。 当该录制文件未开启相关智能化功能或内容处于生成中状态时，结果返回错误码<p/>
     * @param req ApiV1SmartSpeakersGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1SmartSpeakersGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1SmartSpeakersGetResponse v1SmartSpeakersGet(ApiV1SmartSpeakersGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/smart/speakers")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            

            // verify the required parameter 'recordFileId' is set
            if (req.getRecordFileId() == null) {
                throw new IllegalArgumentException("'recordFileId' is required and must be specified");
            }
            

            // verify the required parameter 'page' is set
            if (req.getPage() == null) {
                throw new IllegalArgumentException("'page' is required and must be specified");
            }
            

            // verify the required parameter 'pageSize' is set
            if (req.getPageSize() == null) {
                throw new IllegalArgumentException("'pageSize' is required and must be specified");
            }
            

            

            
            // path 参数
            // query 参数
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getRecordFileId() != null) {
                apiReq.getQueryParams().set("record_file_id", req.getRecordFileId());
            }
            if (req.getPwd() != null) {
                apiReq.getQueryParams().set("pwd", req.getPwd());
            }
            if (req.getPage() != null) {
                apiReq.getQueryParams().set("page", req.getPage());
            }
            if (req.getPageSize() != null) {
                apiReq.getQueryParams().set("page_size", req.getPageSize());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1SmartSpeakersGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1SmartSpeakersGet 智能发言人[/v1/smart/speakers - GET]
    * <p>查询单个云录制的发言人列表。支持OAuth2.0鉴权调用，仅支持授权用户为商业版、企业版、教育版。 当该录制文件未开启相关智能化功能或内容处于生成中状态时，结果返回错误码<p/>
    * @param req ApiV1SmartSpeakersGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1SmartSpeakersGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1SmartSpeakersGetResponse v1SmartSpeakersGet(ApiV1SmartSpeakersGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1SmartSpeakersGet(req, null, builders);
    }
    /**
     * v1SmartTopicsGet 智能话题[/v1/smart/topics - GET]
     * <p>查询单个云录制的智能话题。支持OAuth2.0鉴权调用，仅支持授权用户为商业版、企业版、教育版。 当该录制文件未开启相关智能化功能或内容处于生成中状态时，结果返回错误码<p/>
     * @param req ApiV1SmartTopicsGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1SmartTopicsGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1SmartTopicsGetResponse v1SmartTopicsGet(ApiV1SmartTopicsGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/smart/topics")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            

            // verify the required parameter 'recordFileId' is set
            if (req.getRecordFileId() == null) {
                throw new IllegalArgumentException("'recordFileId' is required and must be specified");
            }
            

            

            

            
            // path 参数
            // query 参数
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getRecordFileId() != null) {
                apiReq.getQueryParams().set("record_file_id", req.getRecordFileId());
            }
            if (req.getLang() != null) {
                apiReq.getQueryParams().set("lang", req.getLang());
            }
            if (req.getPwd() != null) {
                apiReq.getQueryParams().set("pwd", req.getPwd());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1SmartTopicsGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1SmartTopicsGet 智能话题[/v1/smart/topics - GET]
    * <p>查询单个云录制的智能话题。支持OAuth2.0鉴权调用，仅支持授权用户为商业版、企业版、教育版。 当该录制文件未开启相关智能化功能或内容处于生成中状态时，结果返回错误码<p/>
    * @param req ApiV1SmartTopicsGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1SmartTopicsGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1SmartTopicsGetResponse v1SmartTopicsGet(ApiV1SmartTopicsGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1SmartTopicsGet(req, null, builders);
    }
}

