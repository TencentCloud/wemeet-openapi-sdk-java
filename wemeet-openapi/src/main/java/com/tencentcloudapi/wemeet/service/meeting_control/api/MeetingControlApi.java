/*
 * 腾讯会议OpenAPI
 * SAAS版RESTFUL风格API
 *
 * The version of the OpenAPI document: v1.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.tencentcloudapi.wemeet.service.meeting_control.api;

import com.tencentcloudapi.wemeet.core.Config;
import com.tencentcloudapi.wemeet.core.Constants;
import com.tencentcloudapi.wemeet.core.authenticator.AuthenticatorBuilder;
import com.tencentcloudapi.wemeet.core.xhttp.*;
import com.tencentcloudapi.wemeet.core.exception.*;
import com.tencentcloudapi.wemeet.service.meeting_control.model.*;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import java.io.File;


public class MeetingControlApi {

    private final Config config;

    public MeetingControlApi(Config config) {
        this.config = config;
    }

    public static class ApiV1MeetingsMeetingIdDismissPostRequest {
    
        /**
         * meetingId  (required)
         */
        private String meetingId;
        private V1MeetingsMeetingIdDismissPostRequest body;

        private ApiV1MeetingsMeetingIdDismissPostRequest() {}

        private ApiV1MeetingsMeetingIdDismissPostRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId  (required)
             */
            private final String meetingId;
            

            private V1MeetingsMeetingIdDismissPostRequest body;

            /**
             * @param meetingId 
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
                        public Builder body(V1MeetingsMeetingIdDismissPostRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingsMeetingIdDismissPostRequest build() {
                return new ApiV1MeetingsMeetingIdDismissPostRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public V1MeetingsMeetingIdDismissPostRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingsMeetingIdDismissPostResponse extends ApiResponse {
        private final Object data;
        public ApiV1MeetingsMeetingIdDismissPostResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1RealControlMeetingsMeetingIdAsrPutRequest {
    
        /**
         * meetingId  (required)
         */
        private String meetingId;
        private V1RealControlMeetingsMeetingIdAsrPutRequest body;

        private ApiV1RealControlMeetingsMeetingIdAsrPutRequest() {}

        private ApiV1RealControlMeetingsMeetingIdAsrPutRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId  (required)
             */
            private final String meetingId;
            

            private V1RealControlMeetingsMeetingIdAsrPutRequest body;

            /**
             * @param meetingId 
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
                        public Builder body(V1RealControlMeetingsMeetingIdAsrPutRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1RealControlMeetingsMeetingIdAsrPutRequest build() {
                return new ApiV1RealControlMeetingsMeetingIdAsrPutRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public V1RealControlMeetingsMeetingIdAsrPutRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1RealControlMeetingsMeetingIdAsrPutResponse extends ApiResponse {
        private final V1RealControlMeetingsMeetingIdAsrPut200Response data;
        public ApiV1RealControlMeetingsMeetingIdAsrPutResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1RealControlMeetingsMeetingIdAsrPut200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1RealControlMeetingsMeetingIdAsrPut200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1RealControlMeetingsMeetingIdCohostsPutRequest {
    
        /**
         * meetingId  (required)
         */
        private String meetingId;
        private V1RealControlMeetingsMeetingIdCohostsPutRequest body;

        private ApiV1RealControlMeetingsMeetingIdCohostsPutRequest() {}

        private ApiV1RealControlMeetingsMeetingIdCohostsPutRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId  (required)
             */
            private final String meetingId;
            

            private V1RealControlMeetingsMeetingIdCohostsPutRequest body;

            /**
             * @param meetingId 
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
                        public Builder body(V1RealControlMeetingsMeetingIdCohostsPutRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1RealControlMeetingsMeetingIdCohostsPutRequest build() {
                return new ApiV1RealControlMeetingsMeetingIdCohostsPutRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public V1RealControlMeetingsMeetingIdCohostsPutRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1RealControlMeetingsMeetingIdCohostsPutResponse extends ApiResponse {
        private final Object data;
        public ApiV1RealControlMeetingsMeetingIdCohostsPutResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1RealControlMeetingsMeetingIdDocPutRequest {
    
        /**
         * meetingId  (required)
         */
        private String meetingId;
        private V1RealControlMeetingsMeetingIdDocPutRequest body;

        private ApiV1RealControlMeetingsMeetingIdDocPutRequest() {}

        private ApiV1RealControlMeetingsMeetingIdDocPutRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId  (required)
             */
            private final String meetingId;
            

            private V1RealControlMeetingsMeetingIdDocPutRequest body;

            /**
             * @param meetingId 
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
                        public Builder body(V1RealControlMeetingsMeetingIdDocPutRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1RealControlMeetingsMeetingIdDocPutRequest build() {
                return new ApiV1RealControlMeetingsMeetingIdDocPutRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public V1RealControlMeetingsMeetingIdDocPutRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1RealControlMeetingsMeetingIdDocPutResponse extends ApiResponse {
        private final Object data;
        public ApiV1RealControlMeetingsMeetingIdDocPutResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1RealControlMeetingsMeetingIdKickoutPutRequest {
    
        /**
         * meetingId  (required)
         */
        private String meetingId;
        private V1RealControlMeetingsMeetingIdKickoutPutRequest body;

        private ApiV1RealControlMeetingsMeetingIdKickoutPutRequest() {}

        private ApiV1RealControlMeetingsMeetingIdKickoutPutRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId  (required)
             */
            private final String meetingId;
            

            private V1RealControlMeetingsMeetingIdKickoutPutRequest body;

            /**
             * @param meetingId 
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
                        public Builder body(V1RealControlMeetingsMeetingIdKickoutPutRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1RealControlMeetingsMeetingIdKickoutPutRequest build() {
                return new ApiV1RealControlMeetingsMeetingIdKickoutPutRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public V1RealControlMeetingsMeetingIdKickoutPutRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1RealControlMeetingsMeetingIdKickoutPutResponse extends ApiResponse {
        private final Object data;
        public ApiV1RealControlMeetingsMeetingIdKickoutPutResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1RealControlMeetingsMeetingIdMutesPutRequest {
    
        /**
         * meetingId  (required)
         */
        private String meetingId;
        private V1RealControlMeetingsMeetingIdMutesPutRequest body;

        private ApiV1RealControlMeetingsMeetingIdMutesPutRequest() {}

        private ApiV1RealControlMeetingsMeetingIdMutesPutRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId  (required)
             */
            private final String meetingId;
            

            private V1RealControlMeetingsMeetingIdMutesPutRequest body;

            /**
             * @param meetingId 
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
                        public Builder body(V1RealControlMeetingsMeetingIdMutesPutRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1RealControlMeetingsMeetingIdMutesPutRequest build() {
                return new ApiV1RealControlMeetingsMeetingIdMutesPutRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public V1RealControlMeetingsMeetingIdMutesPutRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1RealControlMeetingsMeetingIdMutesPutResponse extends ApiResponse {
        private final Object data;
        public ApiV1RealControlMeetingsMeetingIdMutesPutResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1RealControlMeetingsMeetingIdNamesPutRequest {
    
        /**
         * meetingId  (required)
         */
        private String meetingId;
        private V1RealControlMeetingsMeetingIdNamesPutRequest body;

        private ApiV1RealControlMeetingsMeetingIdNamesPutRequest() {}

        private ApiV1RealControlMeetingsMeetingIdNamesPutRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId  (required)
             */
            private final String meetingId;
            

            private V1RealControlMeetingsMeetingIdNamesPutRequest body;

            /**
             * @param meetingId 
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
                        public Builder body(V1RealControlMeetingsMeetingIdNamesPutRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1RealControlMeetingsMeetingIdNamesPutRequest build() {
                return new ApiV1RealControlMeetingsMeetingIdNamesPutRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public V1RealControlMeetingsMeetingIdNamesPutRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1RealControlMeetingsMeetingIdNamesPutResponse extends ApiResponse {
        private final Object data;
        public ApiV1RealControlMeetingsMeetingIdNamesPutResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1RealControlMeetingsMeetingIdScreenSharedPutRequest {
    
        /**
         * meetingId  (required)
         */
        private String meetingId;
        private V1RealControlMeetingsMeetingIdScreenSharedPutRequest body;

        private ApiV1RealControlMeetingsMeetingIdScreenSharedPutRequest() {}

        private ApiV1RealControlMeetingsMeetingIdScreenSharedPutRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId  (required)
             */
            private final String meetingId;
            

            private V1RealControlMeetingsMeetingIdScreenSharedPutRequest body;

            /**
             * @param meetingId 
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
                        public Builder body(V1RealControlMeetingsMeetingIdScreenSharedPutRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1RealControlMeetingsMeetingIdScreenSharedPutRequest build() {
                return new ApiV1RealControlMeetingsMeetingIdScreenSharedPutRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public V1RealControlMeetingsMeetingIdScreenSharedPutRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1RealControlMeetingsMeetingIdScreenSharedPutResponse extends ApiResponse {
        private final Object data;
        public ApiV1RealControlMeetingsMeetingIdScreenSharedPutResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1RealControlMeetingsMeetingIdStatusPutRequest {
    
        /**
         * meetingId  (required)
         */
        private String meetingId;
        private V1RealControlMeetingsMeetingIdStatusPutRequest body;

        private ApiV1RealControlMeetingsMeetingIdStatusPutRequest() {}

        private ApiV1RealControlMeetingsMeetingIdStatusPutRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId  (required)
             */
            private final String meetingId;
            

            private V1RealControlMeetingsMeetingIdStatusPutRequest body;

            /**
             * @param meetingId 
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
                        public Builder body(V1RealControlMeetingsMeetingIdStatusPutRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1RealControlMeetingsMeetingIdStatusPutRequest build() {
                return new ApiV1RealControlMeetingsMeetingIdStatusPutRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public V1RealControlMeetingsMeetingIdStatusPutRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1RealControlMeetingsMeetingIdStatusPutResponse extends ApiResponse {
        private final Object data;
        public ApiV1RealControlMeetingsMeetingIdStatusPutResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1RealControlMeetingsMeetingIdVideoPutRequest {
    
        /**
         * meetingId  (required)
         */
        private String meetingId;
        private V1RealControlMeetingsMeetingIdVideoPutRequest body;

        private ApiV1RealControlMeetingsMeetingIdVideoPutRequest() {}

        private ApiV1RealControlMeetingsMeetingIdVideoPutRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId  (required)
             */
            private final String meetingId;
            

            private V1RealControlMeetingsMeetingIdVideoPutRequest body;

            /**
             * @param meetingId 
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
                        public Builder body(V1RealControlMeetingsMeetingIdVideoPutRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1RealControlMeetingsMeetingIdVideoPutRequest build() {
                return new ApiV1RealControlMeetingsMeetingIdVideoPutRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public V1RealControlMeetingsMeetingIdVideoPutRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1RealControlMeetingsMeetingIdVideoPutResponse extends ApiResponse {
        private final Object data;
        public ApiV1RealControlMeetingsMeetingIdVideoPutResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1RealControlMeetingsMeetingIdWaitingRoomPutRequest {
    
        /**
         * meetingId  (required)
         */
        private String meetingId;
        private V1RealControlMeetingsMeetingIdWaitingRoomPutRequest body;

        private ApiV1RealControlMeetingsMeetingIdWaitingRoomPutRequest() {}

        private ApiV1RealControlMeetingsMeetingIdWaitingRoomPutRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId  (required)
             */
            private final String meetingId;
            

            private V1RealControlMeetingsMeetingIdWaitingRoomPutRequest body;

            /**
             * @param meetingId 
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
                        public Builder body(V1RealControlMeetingsMeetingIdWaitingRoomPutRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1RealControlMeetingsMeetingIdWaitingRoomPutRequest build() {
                return new ApiV1RealControlMeetingsMeetingIdWaitingRoomPutRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public V1RealControlMeetingsMeetingIdWaitingRoomPutRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1RealControlMeetingsMeetingIdWaitingRoomPutResponse extends ApiResponse {
        private final Object data;
        public ApiV1RealControlMeetingsMeetingIdWaitingRoomPutResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    /**
     * v1MeetingsMeetingIdDismissPost 结束会议[/v1/meetings/{meeting_id}/dismiss - POST]
     * <p>**描述**：结束一个进行中的会议。  * 只有会议创建者、主持人、联席主持人可以结束会议，且该会议是一个有效的进行中会议。 * 结束周期性会议需要传入主会议 ID。 * 企业 secret 鉴权用户可结束任何该企业该用户创建的进行中的会议，OAuth 2.0鉴权用户只能结束通过 OAuth 2.0鉴权创建的进行中的会议。 * 当您想实时监测会议结束状况时，您可以通过订阅 [会议结束](https://cloud.tencent.com/document/product/1095/51619) 的事件，接收事件通知。 * 此接口暂不支持 MRA 设备作为被操作者的情况。 * 结束会议不会释放 Rooms，如需释放请调用 [释放会议室（Rooms）](https://cloud.tencent.com/document/product/1095/55314) 接口<p/>
     * @param req ApiV1MeetingsMeetingIdDismissPostRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingsMeetingIdDismissPostResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingsMeetingIdDismissPostResponse v1MeetingsMeetingIdDismissPost(ApiV1MeetingsMeetingIdDismissPostRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meetings/{meeting_id}/dismiss")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().post(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingsMeetingIdDismissPostResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingsMeetingIdDismissPost 结束会议[/v1/meetings/{meeting_id}/dismiss - POST]
    * <p>**描述**：结束一个进行中的会议。  * 只有会议创建者、主持人、联席主持人可以结束会议，且该会议是一个有效的进行中会议。 * 结束周期性会议需要传入主会议 ID。 * 企业 secret 鉴权用户可结束任何该企业该用户创建的进行中的会议，OAuth 2.0鉴权用户只能结束通过 OAuth 2.0鉴权创建的进行中的会议。 * 当您想实时监测会议结束状况时，您可以通过订阅 [会议结束](https://cloud.tencent.com/document/product/1095/51619) 的事件，接收事件通知。 * 此接口暂不支持 MRA 设备作为被操作者的情况。 * 结束会议不会释放 Rooms，如需释放请调用 [释放会议室（Rooms）](https://cloud.tencent.com/document/product/1095/55314) 接口<p/>
    * @param req ApiV1MeetingsMeetingIdDismissPostRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingsMeetingIdDismissPostResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingsMeetingIdDismissPostResponse v1MeetingsMeetingIdDismissPost(ApiV1MeetingsMeetingIdDismissPostRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingsMeetingIdDismissPost(req, null, builders);
    }
    /**
     * v1RealControlMeetingsMeetingIdAsrPut 开启或关闭实时转写[/v1/real-control/meetings/{meeting_id}/asr - PUT]
     * <p>以创建者的身份开启/关闭会中实时转写，调用时需要会议处于进行中的状态；<p/>
     * @param req ApiV1RealControlMeetingsMeetingIdAsrPutRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RealControlMeetingsMeetingIdAsrPutResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RealControlMeetingsMeetingIdAsrPutResponse v1RealControlMeetingsMeetingIdAsrPut(ApiV1RealControlMeetingsMeetingIdAsrPutRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/real-control/meetings/{meeting_id}/asr")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().put(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RealControlMeetingsMeetingIdAsrPutResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RealControlMeetingsMeetingIdAsrPut 开启或关闭实时转写[/v1/real-control/meetings/{meeting_id}/asr - PUT]
    * <p>以创建者的身份开启/关闭会中实时转写，调用时需要会议处于进行中的状态；<p/>
    * @param req ApiV1RealControlMeetingsMeetingIdAsrPutRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RealControlMeetingsMeetingIdAsrPutResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RealControlMeetingsMeetingIdAsrPutResponse v1RealControlMeetingsMeetingIdAsrPut(ApiV1RealControlMeetingsMeetingIdAsrPutRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RealControlMeetingsMeetingIdAsrPut(req, null, builders);
    }
    /**
     * v1RealControlMeetingsMeetingIdCohostsPut 设置联席主持人[/v1/real-control/meetings/{meeting_id}/cohosts - PUT]
     * <p>**描述**：设置或撤销会议中的参会者联席主持人身份，目前暂不支持 MRA 设备作为被操作者的情况。企业 secret 鉴权用户可管理任何该企业该用户创建的有效会议，OAuth2.0 鉴权用户只能管理通过 OAuth2.0 鉴权创建的有效会议。  *  &gt; 说明 &gt;  &gt;  &gt; * 操作者必须是会议的主持人才可以设置。 &gt; * 调用该接口需要权限项 ： MANAGE_MEETING 查看和管理您的会议。<p/>
     * @param req ApiV1RealControlMeetingsMeetingIdCohostsPutRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RealControlMeetingsMeetingIdCohostsPutResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RealControlMeetingsMeetingIdCohostsPutResponse v1RealControlMeetingsMeetingIdCohostsPut(ApiV1RealControlMeetingsMeetingIdCohostsPutRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/real-control/meetings/{meeting_id}/cohosts")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().put(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RealControlMeetingsMeetingIdCohostsPutResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RealControlMeetingsMeetingIdCohostsPut 设置联席主持人[/v1/real-control/meetings/{meeting_id}/cohosts - PUT]
    * <p>**描述**：设置或撤销会议中的参会者联席主持人身份，目前暂不支持 MRA 设备作为被操作者的情况。企业 secret 鉴权用户可管理任何该企业该用户创建的有效会议，OAuth2.0 鉴权用户只能管理通过 OAuth2.0 鉴权创建的有效会议。  *  &gt; 说明 &gt;  &gt;  &gt; * 操作者必须是会议的主持人才可以设置。 &gt; * 调用该接口需要权限项 ： MANAGE_MEETING 查看和管理您的会议。<p/>
    * @param req ApiV1RealControlMeetingsMeetingIdCohostsPutRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RealControlMeetingsMeetingIdCohostsPutResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RealControlMeetingsMeetingIdCohostsPutResponse v1RealControlMeetingsMeetingIdCohostsPut(ApiV1RealControlMeetingsMeetingIdCohostsPutRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RealControlMeetingsMeetingIdCohostsPut(req, null, builders);
    }
    /**
     * v1RealControlMeetingsMeetingIdDocPut 文档上传权限设置[/v1/real-control/meetings/{meeting_id}/doc - PUT]
     * <p>**描述**：设置会议中文档上传权限，目前暂不支持 MRA 设备作为被操作者的情况，企业 secret 鉴权用户可管理任何该企业该用户创建的有效会议，OAuth2.0 鉴权用户只能管理通过 OAuth2.0 鉴权创建的有效会议。  *  &gt; 说明 &gt; 1：操作者必须是会议的主持人或者联席主持人才可以设置。 &gt; 2：调用该接口需要权限项：MANAGE_MEETING 查看和管理您的会议<p/>
     * @param req ApiV1RealControlMeetingsMeetingIdDocPutRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RealControlMeetingsMeetingIdDocPutResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RealControlMeetingsMeetingIdDocPutResponse v1RealControlMeetingsMeetingIdDocPut(ApiV1RealControlMeetingsMeetingIdDocPutRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/real-control/meetings/{meeting_id}/doc")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().put(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RealControlMeetingsMeetingIdDocPutResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RealControlMeetingsMeetingIdDocPut 文档上传权限设置[/v1/real-control/meetings/{meeting_id}/doc - PUT]
    * <p>**描述**：设置会议中文档上传权限，目前暂不支持 MRA 设备作为被操作者的情况，企业 secret 鉴权用户可管理任何该企业该用户创建的有效会议，OAuth2.0 鉴权用户只能管理通过 OAuth2.0 鉴权创建的有效会议。  *  &gt; 说明 &gt; 1：操作者必须是会议的主持人或者联席主持人才可以设置。 &gt; 2：调用该接口需要权限项：MANAGE_MEETING 查看和管理您的会议<p/>
    * @param req ApiV1RealControlMeetingsMeetingIdDocPutRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RealControlMeetingsMeetingIdDocPutResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RealControlMeetingsMeetingIdDocPutResponse v1RealControlMeetingsMeetingIdDocPut(ApiV1RealControlMeetingsMeetingIdDocPutRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RealControlMeetingsMeetingIdDocPut(req, null, builders);
    }
    /**
     * v1RealControlMeetingsMeetingIdKickoutPut 移出用户[/v1/real-control/meetings/{meeting_id}/kickout - PUT]
     * <p>**描述**：  * 将会议中用户移出会议，操作者必须是会议的主持人或者联席主持人才可以设置。 * 支持对云会议已入会成员和 Webinar 观众移出。 * 支持 MRA 设备和 PSTN 设备为被操作者时的移出用户操作。 * 企业 secret 鉴权用户可管理任何该企业该用户创建的有效会议，OAuth2.0 鉴权用户只能管理通过 OAuth2.0 鉴权创建的有效会议。  说明  *  &gt; 1：操作者必须是会议的主持人或者联席主持人才可以设置。 &gt; 2：调用该接口需要权限项：MANAGE_MEETING 查看和管理您的会议。<p/>
     * @param req ApiV1RealControlMeetingsMeetingIdKickoutPutRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RealControlMeetingsMeetingIdKickoutPutResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RealControlMeetingsMeetingIdKickoutPutResponse v1RealControlMeetingsMeetingIdKickoutPut(ApiV1RealControlMeetingsMeetingIdKickoutPutRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/real-control/meetings/{meeting_id}/kickout")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().put(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RealControlMeetingsMeetingIdKickoutPutResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RealControlMeetingsMeetingIdKickoutPut 移出用户[/v1/real-control/meetings/{meeting_id}/kickout - PUT]
    * <p>**描述**：  * 将会议中用户移出会议，操作者必须是会议的主持人或者联席主持人才可以设置。 * 支持对云会议已入会成员和 Webinar 观众移出。 * 支持 MRA 设备和 PSTN 设备为被操作者时的移出用户操作。 * 企业 secret 鉴权用户可管理任何该企业该用户创建的有效会议，OAuth2.0 鉴权用户只能管理通过 OAuth2.0 鉴权创建的有效会议。  说明  *  &gt; 1：操作者必须是会议的主持人或者联席主持人才可以设置。 &gt; 2：调用该接口需要权限项：MANAGE_MEETING 查看和管理您的会议。<p/>
    * @param req ApiV1RealControlMeetingsMeetingIdKickoutPutRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RealControlMeetingsMeetingIdKickoutPutResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RealControlMeetingsMeetingIdKickoutPutResponse v1RealControlMeetingsMeetingIdKickoutPut(ApiV1RealControlMeetingsMeetingIdKickoutPutRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RealControlMeetingsMeetingIdKickoutPut(req, null, builders);
    }
    /**
     * v1RealControlMeetingsMeetingIdMutesPut 静音用户[/v1/real-control/meetings/{meeting_id}/mutes - PUT]
     * <p>**描述**：  * 会议中用户静音操作，操作者必须是会议的主持人或者联席主持人才可以设置。 * 支持对云会议已入会成员和 Webinar 观众静音。 * 支持 MRA 设备和 PSTN 设备作为被操作者时的静音操作。 * 企业 secret 鉴权用户可管理任何该企业该用户创建的有效会议，OAuth2.0 鉴权用户只能管理通过 OAuth2.0 鉴权创建的有效会议。  说明 1：操作者必须是会议的主持人或者联席主持人才可以设置。 2：调用该接口需要权限项：MANAGE_MEETING 查看和管理您的会议。<p/>
     * @param req ApiV1RealControlMeetingsMeetingIdMutesPutRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RealControlMeetingsMeetingIdMutesPutResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RealControlMeetingsMeetingIdMutesPutResponse v1RealControlMeetingsMeetingIdMutesPut(ApiV1RealControlMeetingsMeetingIdMutesPutRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/real-control/meetings/{meeting_id}/mutes")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().put(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RealControlMeetingsMeetingIdMutesPutResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RealControlMeetingsMeetingIdMutesPut 静音用户[/v1/real-control/meetings/{meeting_id}/mutes - PUT]
    * <p>**描述**：  * 会议中用户静音操作，操作者必须是会议的主持人或者联席主持人才可以设置。 * 支持对云会议已入会成员和 Webinar 观众静音。 * 支持 MRA 设备和 PSTN 设备作为被操作者时的静音操作。 * 企业 secret 鉴权用户可管理任何该企业该用户创建的有效会议，OAuth2.0 鉴权用户只能管理通过 OAuth2.0 鉴权创建的有效会议。  说明 1：操作者必须是会议的主持人或者联席主持人才可以设置。 2：调用该接口需要权限项：MANAGE_MEETING 查看和管理您的会议。<p/>
    * @param req ApiV1RealControlMeetingsMeetingIdMutesPutRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RealControlMeetingsMeetingIdMutesPutResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RealControlMeetingsMeetingIdMutesPutResponse v1RealControlMeetingsMeetingIdMutesPut(ApiV1RealControlMeetingsMeetingIdMutesPutRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RealControlMeetingsMeetingIdMutesPut(req, null, builders);
    }
    /**
     * v1RealControlMeetingsMeetingIdNamesPut 更改会中成员昵称[/v1/real-control/meetings/{meeting_id}/names - PUT]
     * <p>**描述：**  * 会中修改参会者昵称，支持主持人和联席主持人对会中成员进行改名。 * 此接口支持对云会议已入会成员和 Webinar 观众进行改名。 * 操作者必须为已在会中的主持人与联席主持人。 * 支持 MRA 设备和 PSTN 设备作为被操作者时的改名操作。 * 企业 secret 鉴权用户可管理任何该企业该用户创建的有效会议，OAuth2.0 鉴权用户只能管理通过 OAuth2.0 鉴权创建的有效会议。  说明 1：操作者必须是会议的主持人或者联席主持人才可以设置。 2：调用该接口需要权限项：MANAGE_MEETING 查看和管理您的会议。<p/>
     * @param req ApiV1RealControlMeetingsMeetingIdNamesPutRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RealControlMeetingsMeetingIdNamesPutResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RealControlMeetingsMeetingIdNamesPutResponse v1RealControlMeetingsMeetingIdNamesPut(ApiV1RealControlMeetingsMeetingIdNamesPutRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/real-control/meetings/{meeting_id}/names")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().put(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RealControlMeetingsMeetingIdNamesPutResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RealControlMeetingsMeetingIdNamesPut 更改会中成员昵称[/v1/real-control/meetings/{meeting_id}/names - PUT]
    * <p>**描述：**  * 会中修改参会者昵称，支持主持人和联席主持人对会中成员进行改名。 * 此接口支持对云会议已入会成员和 Webinar 观众进行改名。 * 操作者必须为已在会中的主持人与联席主持人。 * 支持 MRA 设备和 PSTN 设备作为被操作者时的改名操作。 * 企业 secret 鉴权用户可管理任何该企业该用户创建的有效会议，OAuth2.0 鉴权用户只能管理通过 OAuth2.0 鉴权创建的有效会议。  说明 1：操作者必须是会议的主持人或者联席主持人才可以设置。 2：调用该接口需要权限项：MANAGE_MEETING 查看和管理您的会议。<p/>
    * @param req ApiV1RealControlMeetingsMeetingIdNamesPutRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RealControlMeetingsMeetingIdNamesPutResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RealControlMeetingsMeetingIdNamesPutResponse v1RealControlMeetingsMeetingIdNamesPut(ApiV1RealControlMeetingsMeetingIdNamesPutRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RealControlMeetingsMeetingIdNamesPut(req, null, builders);
    }
    /**
     * v1RealControlMeetingsMeetingIdScreenSharedPut 关闭用户屏幕共享[/v1/real-control/meetings/{meeting_id}/screen-shared - PUT]
     * <p>**描述**：关闭会议中用户屏幕共享权限，目前暂不支持 MRA 设备作为被操作者的情况。企业 secret 鉴权用户可管理任何该企业该用户创建的有效会议，OAuth2.0 鉴权用户只能管理通过 OAuth2.0 鉴权创建的有效会议。  *  &gt; 说明 &gt; 1：操作者必须是会议的主持人或者联席主持人才可以设置。 &gt; 2：调用该接口需要权限项：MANAGE_MEETING 查看和管理您的会议<p/>
     * @param req ApiV1RealControlMeetingsMeetingIdScreenSharedPutRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RealControlMeetingsMeetingIdScreenSharedPutResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RealControlMeetingsMeetingIdScreenSharedPutResponse v1RealControlMeetingsMeetingIdScreenSharedPut(ApiV1RealControlMeetingsMeetingIdScreenSharedPutRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/real-control/meetings/{meeting_id}/screen-shared")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().put(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RealControlMeetingsMeetingIdScreenSharedPutResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RealControlMeetingsMeetingIdScreenSharedPut 关闭用户屏幕共享[/v1/real-control/meetings/{meeting_id}/screen-shared - PUT]
    * <p>**描述**：关闭会议中用户屏幕共享权限，目前暂不支持 MRA 设备作为被操作者的情况。企业 secret 鉴权用户可管理任何该企业该用户创建的有效会议，OAuth2.0 鉴权用户只能管理通过 OAuth2.0 鉴权创建的有效会议。  *  &gt; 说明 &gt; 1：操作者必须是会议的主持人或者联席主持人才可以设置。 &gt; 2：调用该接口需要权限项：MANAGE_MEETING 查看和管理您的会议<p/>
    * @param req ApiV1RealControlMeetingsMeetingIdScreenSharedPutRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RealControlMeetingsMeetingIdScreenSharedPutResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RealControlMeetingsMeetingIdScreenSharedPutResponse v1RealControlMeetingsMeetingIdScreenSharedPut(ApiV1RealControlMeetingsMeetingIdScreenSharedPutRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RealControlMeetingsMeetingIdScreenSharedPut(req, null, builders);
    }
    /**
     * v1RealControlMeetingsMeetingIdStatusPut 会中状态设置[/v1/real-control/meetings/{meeting_id}/status - PUT]
     * <p>**描述**：设置会议中的会议属性，例如：全体静音、是否允许参会者聊天设置、锁定会议、隐藏会议号和密码、是否开启等候室等，具体设置内容可以查询接口协议，目前暂不支持 MRA 设备作为被操作者的情况。企业 secret 鉴权用户可管理任何该企业该用户创建的有效会议，OAuth2.0 鉴权用户只能管理通过 OAuth2.0 鉴权创建的有效会议。  *  &gt; 说明 &gt; 1：操作者必须是会议的主持人或者联席主持人才可以设置。 &gt; 2：调用该接口需要权限项 ：MANAGE_MEETING 查看和管理您的会议。<p/>
     * @param req ApiV1RealControlMeetingsMeetingIdStatusPutRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RealControlMeetingsMeetingIdStatusPutResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RealControlMeetingsMeetingIdStatusPutResponse v1RealControlMeetingsMeetingIdStatusPut(ApiV1RealControlMeetingsMeetingIdStatusPutRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/real-control/meetings/{meeting_id}/status")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().put(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RealControlMeetingsMeetingIdStatusPutResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RealControlMeetingsMeetingIdStatusPut 会中状态设置[/v1/real-control/meetings/{meeting_id}/status - PUT]
    * <p>**描述**：设置会议中的会议属性，例如：全体静音、是否允许参会者聊天设置、锁定会议、隐藏会议号和密码、是否开启等候室等，具体设置内容可以查询接口协议，目前暂不支持 MRA 设备作为被操作者的情况。企业 secret 鉴权用户可管理任何该企业该用户创建的有效会议，OAuth2.0 鉴权用户只能管理通过 OAuth2.0 鉴权创建的有效会议。  *  &gt; 说明 &gt; 1：操作者必须是会议的主持人或者联席主持人才可以设置。 &gt; 2：调用该接口需要权限项 ：MANAGE_MEETING 查看和管理您的会议。<p/>
    * @param req ApiV1RealControlMeetingsMeetingIdStatusPutRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RealControlMeetingsMeetingIdStatusPutResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RealControlMeetingsMeetingIdStatusPutResponse v1RealControlMeetingsMeetingIdStatusPut(ApiV1RealControlMeetingsMeetingIdStatusPutRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RealControlMeetingsMeetingIdStatusPut(req, null, builders);
    }
    /**
     * v1RealControlMeetingsMeetingIdVideoPut 关闭或开启用户视频[/v1/real-control/meetings/{meeting_id}/video - PUT]
     * <p>关闭指定用户视频，支持关闭或开启 MRA 设备的视频。 企业 secret 鉴权用户可管理任何该企业该用户创建的有效会议，OAuth2.0 鉴权用户只能管理通过 OAuth2.0 鉴权创建的有效会议。 &gt; 说明 &gt; 1：操作者必须是会议的主持人或者联席主持人才可以设置。 &gt; 2：使用 OAuth 2.0 鉴权方式时，调用该接口需要权限项：MANAGE_MEETING 查看和管理您的会议。<p/>
     * @param req ApiV1RealControlMeetingsMeetingIdVideoPutRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RealControlMeetingsMeetingIdVideoPutResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RealControlMeetingsMeetingIdVideoPutResponse v1RealControlMeetingsMeetingIdVideoPut(ApiV1RealControlMeetingsMeetingIdVideoPutRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/real-control/meetings/{meeting_id}/video")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().put(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RealControlMeetingsMeetingIdVideoPutResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RealControlMeetingsMeetingIdVideoPut 关闭或开启用户视频[/v1/real-control/meetings/{meeting_id}/video - PUT]
    * <p>关闭指定用户视频，支持关闭或开启 MRA 设备的视频。 企业 secret 鉴权用户可管理任何该企业该用户创建的有效会议，OAuth2.0 鉴权用户只能管理通过 OAuth2.0 鉴权创建的有效会议。 &gt; 说明 &gt; 1：操作者必须是会议的主持人或者联席主持人才可以设置。 &gt; 2：使用 OAuth 2.0 鉴权方式时，调用该接口需要权限项：MANAGE_MEETING 查看和管理您的会议。<p/>
    * @param req ApiV1RealControlMeetingsMeetingIdVideoPutRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RealControlMeetingsMeetingIdVideoPutResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RealControlMeetingsMeetingIdVideoPutResponse v1RealControlMeetingsMeetingIdVideoPut(ApiV1RealControlMeetingsMeetingIdVideoPutRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RealControlMeetingsMeetingIdVideoPut(req, null, builders);
    }
    /**
     * v1RealControlMeetingsMeetingIdWaitingRoomPut 用户等候室设置[/v1/real-control/meetings/{meeting_id}/waiting-room - PUT]
     * <p>会议等候室设置，允许主持人将等候室成员移入会议、主持人将会议成员移入等候室、主持人将等候室成员移出等候室等操作，目前暂不支持 MRA 设备作为被操作者的情况。企业 secret 鉴权用户可管理任何该企业该用户创建的有效会议，OAuth2.0 鉴权用户只能管理通过 OAuth2.0 鉴权创建的有效会议。 &gt; 说明 &gt; 1：操作者必须是会议的主持人或者联席主持人才可以设置。 &gt; 2：调用该接口需要权限项：MANAGE_MEETING 查看和管理您的会议<p/>
     * @param req ApiV1RealControlMeetingsMeetingIdWaitingRoomPutRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RealControlMeetingsMeetingIdWaitingRoomPutResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RealControlMeetingsMeetingIdWaitingRoomPutResponse v1RealControlMeetingsMeetingIdWaitingRoomPut(ApiV1RealControlMeetingsMeetingIdWaitingRoomPutRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/real-control/meetings/{meeting_id}/waiting-room")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().put(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RealControlMeetingsMeetingIdWaitingRoomPutResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RealControlMeetingsMeetingIdWaitingRoomPut 用户等候室设置[/v1/real-control/meetings/{meeting_id}/waiting-room - PUT]
    * <p>会议等候室设置，允许主持人将等候室成员移入会议、主持人将会议成员移入等候室、主持人将等候室成员移出等候室等操作，目前暂不支持 MRA 设备作为被操作者的情况。企业 secret 鉴权用户可管理任何该企业该用户创建的有效会议，OAuth2.0 鉴权用户只能管理通过 OAuth2.0 鉴权创建的有效会议。 &gt; 说明 &gt; 1：操作者必须是会议的主持人或者联席主持人才可以设置。 &gt; 2：调用该接口需要权限项：MANAGE_MEETING 查看和管理您的会议<p/>
    * @param req ApiV1RealControlMeetingsMeetingIdWaitingRoomPutRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RealControlMeetingsMeetingIdWaitingRoomPutResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RealControlMeetingsMeetingIdWaitingRoomPutResponse v1RealControlMeetingsMeetingIdWaitingRoomPut(ApiV1RealControlMeetingsMeetingIdWaitingRoomPutRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RealControlMeetingsMeetingIdWaitingRoomPut(req, null, builders);
    }
}

