/*
 * 腾讯会议OpenAPI
 * SAAS版RESTFUL风格API
 *
 * The version of the OpenAPI document: v1.0.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.tencentcloudapi.wemeet.service.meetings.model;

import java.util.*;
import java.math.BigDecimal;

import com.fasterxml.jackson.annotation.*;
import org.jetbrains.annotations.NotNull;

/**
 * 周期性会议设置。
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
public class V1MeetingsGet200ResponseMeetingInfoListInnerRecurringRule {
    @JsonProperty(value = "customized_recurring_days")
    private Long customizedRecurringDays;

    @JsonProperty(value = "customized_recurring_step")
    private Long customizedRecurringStep;

    @JsonProperty(value = "customized_recurring_type")
    private Long customizedRecurringType;

    @JsonProperty(value = "recurring_type")
    private Long recurringType;

    @JsonProperty(value = "until_count")
    private Long untilCount;

    @JsonProperty(value = "until_date")
    private Long untilDate;

    @JsonProperty(value = "until_type")
    private Long untilType;

    /**
     */
    public V1MeetingsGet200ResponseMeetingInfoListInnerRecurringRule() {
    }

    /**
     * @param customizedRecurringDays 
     */
    public V1MeetingsGet200ResponseMeetingInfoListInnerRecurringRule customizedRecurringDays(Long customizedRecurringDays) {
        this.customizedRecurringDays = customizedRecurringDays;
        return this;
    }
    /**
     * @return customizedRecurringDays 
     **/
    public Long getCustomizedRecurringDays() {
        return customizedRecurringDays;
    }

    /**
     * @param customizedRecurringDays 
     */
    public void setCustomizedRecurringDays(Long customizedRecurringDays) {
        this.customizedRecurringDays = customizedRecurringDays;
    }
    /**
     * @param customizedRecurringStep 
     */
    public V1MeetingsGet200ResponseMeetingInfoListInnerRecurringRule customizedRecurringStep(Long customizedRecurringStep) {
        this.customizedRecurringStep = customizedRecurringStep;
        return this;
    }
    /**
     * @return customizedRecurringStep 
     **/
    public Long getCustomizedRecurringStep() {
        return customizedRecurringStep;
    }

    /**
     * @param customizedRecurringStep 
     */
    public void setCustomizedRecurringStep(Long customizedRecurringStep) {
        this.customizedRecurringStep = customizedRecurringStep;
    }
    /**
     * @param customizedRecurringType 
     */
    public V1MeetingsGet200ResponseMeetingInfoListInnerRecurringRule customizedRecurringType(Long customizedRecurringType) {
        this.customizedRecurringType = customizedRecurringType;
        return this;
    }
    /**
     * @return customizedRecurringType 
     **/
    public Long getCustomizedRecurringType() {
        return customizedRecurringType;
    }

    /**
     * @param customizedRecurringType 
     */
    public void setCustomizedRecurringType(Long customizedRecurringType) {
        this.customizedRecurringType = customizedRecurringType;
    }
    /**
     * @param recurringType 周期性会议频率，默认值为0。 0：每天 1：每周一至周五 2：每周 3：每两周 4：每月
     */
    public V1MeetingsGet200ResponseMeetingInfoListInnerRecurringRule recurringType(Long recurringType) {
        this.recurringType = recurringType;
        return this;
    }
    /**
     * @return recurringType 周期性会议频率，默认值为0。 0：每天 1：每周一至周五 2：每周 3：每两周 4：每月
     **/
    public Long getRecurringType() {
        return recurringType;
    }

    /**
     * @param recurringType 周期性会议频率，默认值为0。 0：每天 1：每周一至周五 2：每周 3：每两周 4：每月
     */
    public void setRecurringType(Long recurringType) {
        this.recurringType = recurringType;
    }
    /**
     * @param untilCount integer  限定会议次数（1-50次）默认值为7次。
     */
    public V1MeetingsGet200ResponseMeetingInfoListInnerRecurringRule untilCount(Long untilCount) {
        this.untilCount = untilCount;
        return this;
    }
    /**
     * @return untilCount integer  限定会议次数（1-50次）默认值为7次。
     **/
    public Long getUntilCount() {
        return untilCount;
    }

    /**
     * @param untilCount integer  限定会议次数（1-50次）默认值为7次。
     */
    public void setUntilCount(Long untilCount) {
        this.untilCount = untilCount;
    }
    /**
     * @param untilDate 结束日期时间戳，默认值为当前日期 + 7天。
     */
    public V1MeetingsGet200ResponseMeetingInfoListInnerRecurringRule untilDate(Long untilDate) {
        this.untilDate = untilDate;
        return this;
    }
    /**
     * @return untilDate 结束日期时间戳，默认值为当前日期 + 7天。
     **/
    public Long getUntilDate() {
        return untilDate;
    }

    /**
     * @param untilDate 结束日期时间戳，默认值为当前日期 + 7天。
     */
    public void setUntilDate(Long untilDate) {
        this.untilDate = untilDate;
    }
    /**
     * @param untilType 结束重复类型，默认值为0。 0：按日期结束重复 1：按次数结束重复
     */
    public V1MeetingsGet200ResponseMeetingInfoListInnerRecurringRule untilType(Long untilType) {
        this.untilType = untilType;
        return this;
    }
    /**
     * @return untilType 结束重复类型，默认值为0。 0：按日期结束重复 1：按次数结束重复
     **/
    public Long getUntilType() {
        return untilType;
    }

    /**
     * @param untilType 结束重复类型，默认值为0。 0：按日期结束重复 1：按次数结束重复
     */
    public void setUntilType(Long untilType) {
        this.untilType = untilType;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V1MeetingsGet200ResponseMeetingInfoListInnerRecurringRule v1MeetingsGet200ResponseMeetingInfoListInnerRecurringRule = (V1MeetingsGet200ResponseMeetingInfoListInnerRecurringRule) o;
        return Objects.equals(this.customizedRecurringDays, v1MeetingsGet200ResponseMeetingInfoListInnerRecurringRule.customizedRecurringDays) &&
            Objects.equals(this.customizedRecurringStep, v1MeetingsGet200ResponseMeetingInfoListInnerRecurringRule.customizedRecurringStep) &&
            Objects.equals(this.customizedRecurringType, v1MeetingsGet200ResponseMeetingInfoListInnerRecurringRule.customizedRecurringType) &&
            Objects.equals(this.recurringType, v1MeetingsGet200ResponseMeetingInfoListInnerRecurringRule.recurringType) &&
            Objects.equals(this.untilCount, v1MeetingsGet200ResponseMeetingInfoListInnerRecurringRule.untilCount) &&
            Objects.equals(this.untilDate, v1MeetingsGet200ResponseMeetingInfoListInnerRecurringRule.untilDate) &&
            Objects.equals(this.untilType, v1MeetingsGet200ResponseMeetingInfoListInnerRecurringRule.untilType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(customizedRecurringDays, customizedRecurringStep, customizedRecurringType, recurringType, untilCount, untilDate, untilType);
    }

    /**
    * Convert the given object to string with each line indented by 4 spaces
    * (except the first line).
    */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class V1MeetingsGet200ResponseMeetingInfoListInnerRecurringRule {\n");
        sb.append("    customizedRecurringDays: ").append(toIndentedString(customizedRecurringDays)).append("\n");
        sb.append("    customizedRecurringStep: ").append(toIndentedString(customizedRecurringStep)).append("\n");
        sb.append("    customizedRecurringType: ").append(toIndentedString(customizedRecurringType)).append("\n");
        sb.append("    recurringType: ").append(toIndentedString(recurringType)).append("\n");
        sb.append("    untilCount: ").append(toIndentedString(untilCount)).append("\n");
        sb.append("    untilDate: ").append(toIndentedString(untilDate)).append("\n");
        sb.append("    untilType: ").append(toIndentedString(untilType)).append("\n");
        sb.append("}");
        return sb.toString();
    }
}

