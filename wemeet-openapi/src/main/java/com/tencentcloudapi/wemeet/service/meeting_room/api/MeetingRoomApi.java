/*
 * 腾讯会议OpenAPI
 * SAAS版RESTFUL风格API
 *
 * The version of the OpenAPI document: v1.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.tencentcloudapi.wemeet.service.meeting_room.api;

import com.tencentcloudapi.wemeet.core.Config;
import com.tencentcloudapi.wemeet.core.Constants;
import com.tencentcloudapi.wemeet.core.authenticator.AuthenticatorBuilder;
import com.tencentcloudapi.wemeet.core.xhttp.*;
import com.tencentcloudapi.wemeet.core.exception.*;
import com.tencentcloudapi.wemeet.service.meeting_room.model.*;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import java.io.File;


public class MeetingRoomApi {

    private final Config config;

    public MeetingRoomApi(Config config) {
        this.config = config;
    }

    public static class ApiV1DevicesGetRequest {
    
        /**
         * page 页码，从1开始，默认1。 (optional)
         */
        private String page;

        /**
         * pageSize 分页大小，从1开始，最大50，默认20。 (optional)
         */
        private String pageSize;

        /**
         * meetingRoomName 会议室名称 (optional)
         */
        private String meetingRoomName;
        private Object body;

        private ApiV1DevicesGetRequest() {}

        private ApiV1DevicesGetRequest(Builder builder) {
            
            this.page = builder.page;
            

            this.pageSize = builder.pageSize;
            

            this.meetingRoomName = builder.meetingRoomName;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * page 页码，从1开始，默认1。 (optional)
             */
            private String page;
            

            /**
             * pageSize 分页大小，从1开始，最大50，默认20。 (optional)
             */
            private String pageSize;
            

            /**
             * meetingRoomName 会议室名称 (optional)
             */
            private String meetingRoomName;
            

            private Object body;

            /**
             */
            public Builder() {
            }
            
            /**
             * @param page 页码，从1开始，默认1。 (optional)
             */
            public Builder page(String page) {
                this.page = page;
                return this;
            }
            
            
            /**
             * @param pageSize 分页大小，从1开始，最大50，默认20。 (optional)
             */
            public Builder pageSize(String pageSize) {
                this.pageSize = pageSize;
                return this;
            }
            
            
            /**
             * @param meetingRoomName 会议室名称 (optional)
             */
            public Builder meetingRoomName(String meetingRoomName) {
                this.meetingRoomName = meetingRoomName;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1DevicesGetRequest build() {
                return new ApiV1DevicesGetRequest(this);
            }
        }
        
        public String getPage() {
            return this.page;
        }
        

        public String getPageSize() {
            return this.pageSize;
        }
        

        public String getMeetingRoomName() {
            return this.meetingRoomName;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1DevicesGetResponse extends ApiResponse {
        private final V1DevicesGet200Response data;
        public ApiV1DevicesGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1DevicesGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1DevicesGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingRoomsCancelRoomCallPutRequest {
            private V1MeetingRoomsCancelRoomCallPutRequest body;

        private ApiV1MeetingRoomsCancelRoomCallPutRequest() {}

        private ApiV1MeetingRoomsCancelRoomCallPutRequest(Builder builder) {
            
            this.body = builder.body;
        }

        public static class Builder {
            
            private V1MeetingRoomsCancelRoomCallPutRequest body;

            /**
             */
            public Builder() {
            }
                        public Builder body(V1MeetingRoomsCancelRoomCallPutRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingRoomsCancelRoomCallPutRequest build() {
                return new ApiV1MeetingRoomsCancelRoomCallPutRequest(this);
            }
        }
        
        public V1MeetingRoomsCancelRoomCallPutRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingRoomsCancelRoomCallPutResponse extends ApiResponse {
        private final Object data;
        public ApiV1MeetingRoomsCancelRoomCallPutResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingRoomsGetRequest {
    
        /**
         * page 页码 (optional)
         */
        private String page;

        /**
         * pageSize 分页大小 (optional)
         */
        private String pageSize;

        /**
         * meetingRoomName 会议室名称 (optional)
         */
        private String meetingRoomName;
        private Object body;

        private ApiV1MeetingRoomsGetRequest() {}

        private ApiV1MeetingRoomsGetRequest(Builder builder) {
            
            this.page = builder.page;
            

            this.pageSize = builder.pageSize;
            

            this.meetingRoomName = builder.meetingRoomName;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * page 页码 (optional)
             */
            private String page;
            

            /**
             * pageSize 分页大小 (optional)
             */
            private String pageSize;
            

            /**
             * meetingRoomName 会议室名称 (optional)
             */
            private String meetingRoomName;
            

            private Object body;

            /**
             */
            public Builder() {
            }
            
            /**
             * @param page 页码 (optional)
             */
            public Builder page(String page) {
                this.page = page;
                return this;
            }
            
            
            /**
             * @param pageSize 分页大小 (optional)
             */
            public Builder pageSize(String pageSize) {
                this.pageSize = pageSize;
                return this;
            }
            
            
            /**
             * @param meetingRoomName 会议室名称 (optional)
             */
            public Builder meetingRoomName(String meetingRoomName) {
                this.meetingRoomName = meetingRoomName;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingRoomsGetRequest build() {
                return new ApiV1MeetingRoomsGetRequest(this);
            }
        }
        
        public String getPage() {
            return this.page;
        }
        

        public String getPageSize() {
            return this.pageSize;
        }
        

        public String getMeetingRoomName() {
            return this.meetingRoomName;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingRoomsGetResponse extends ApiResponse {
        private final V1MeetingRoomsGet200Response data;
        public ApiV1MeetingRoomsGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingRoomsGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingRoomsGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingRoomsMeetingRoomIdActiveCodePostRequest {
    
        /**
         * meetingRoomId 会议室id (required)
         */
        private String meetingRoomId;
        private Object body;

        private ApiV1MeetingRoomsMeetingRoomIdActiveCodePostRequest() {}

        private ApiV1MeetingRoomsMeetingRoomIdActiveCodePostRequest(Builder builder) {
            
            this.meetingRoomId = builder.meetingRoomId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingRoomId 会议室id (required)
             */
            private final String meetingRoomId;
            

            private Object body;

            /**
             * @param meetingRoomId 会议室id
             */
            public Builder(String meetingRoomId) {
                this.meetingRoomId = meetingRoomId;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingRoomsMeetingRoomIdActiveCodePostRequest build() {
                return new ApiV1MeetingRoomsMeetingRoomIdActiveCodePostRequest(this);
            }
        }
        
        public String getMeetingRoomId() {
            return this.meetingRoomId;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingRoomsMeetingRoomIdActiveCodePostResponse extends ApiResponse {
        private final V1MeetingRoomsMeetingRoomIdActiveCodePost200Response data;
        public ApiV1MeetingRoomsMeetingRoomIdActiveCodePostResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingRoomsMeetingRoomIdActiveCodePost200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingRoomsMeetingRoomIdActiveCodePost200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingRoomsMeetingRoomIdBackgroundGetRequest {
    
        /**
         * meetingRoomId  (required)
         */
        private String meetingRoomId;

        /**
         * operatorId  (required)
         */
        private String operatorId;

        /**
         * operatorIdType 1:userid (required)
         */
        private String operatorIdType;

        private ApiV1MeetingRoomsMeetingRoomIdBackgroundGetRequest() {}

        private ApiV1MeetingRoomsMeetingRoomIdBackgroundGetRequest(Builder builder) {
            
            this.meetingRoomId = builder.meetingRoomId;
            

            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            
        }

        public static class Builder {
            
            /**
             * meetingRoomId  (required)
             */
            private final String meetingRoomId;
            

            /**
             * operatorId  (required)
             */
            private String operatorId;
            

            /**
             * operatorIdType 1:userid (required)
             */
            private String operatorIdType;
            

            /**
             * @param meetingRoomId 
             */
            public Builder(String meetingRoomId) {
                this.meetingRoomId = meetingRoomId;
            }
            
            
            /**
             * @param operatorId  (required)
             */
            public Builder operatorId(String operatorId) {
                this.operatorId = operatorId;
                return this;
            }
            
            
            /**
             * @param operatorIdType 1:userid (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            

            public ApiV1MeetingRoomsMeetingRoomIdBackgroundGetRequest build() {
                return new ApiV1MeetingRoomsMeetingRoomIdBackgroundGetRequest(this);
            }
        }
        
        public String getMeetingRoomId() {
            return this.meetingRoomId;
        }
        

        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        
    }

    public static class ApiV1MeetingRoomsMeetingRoomIdBackgroundGetResponse extends ApiResponse {
        private final V1MeetingRoomsMeetingRoomIdBackgroundGet200Response data;
        public ApiV1MeetingRoomsMeetingRoomIdBackgroundGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingRoomsMeetingRoomIdBackgroundGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingRoomsMeetingRoomIdBackgroundGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingRoomsMeetingRoomIdBackgroundPostRequest {
    
        /**
         * meetingRoomId  (required)
         */
        private String meetingRoomId;
        private V1MeetingRoomsMeetingRoomIdBackgroundPostRequest body;

        private ApiV1MeetingRoomsMeetingRoomIdBackgroundPostRequest() {}

        private ApiV1MeetingRoomsMeetingRoomIdBackgroundPostRequest(Builder builder) {
            
            this.meetingRoomId = builder.meetingRoomId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingRoomId  (required)
             */
            private final String meetingRoomId;
            

            private V1MeetingRoomsMeetingRoomIdBackgroundPostRequest body;

            /**
             * @param meetingRoomId 
             */
            public Builder(String meetingRoomId) {
                this.meetingRoomId = meetingRoomId;
            }
            
                        public Builder body(V1MeetingRoomsMeetingRoomIdBackgroundPostRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingRoomsMeetingRoomIdBackgroundPostRequest build() {
                return new ApiV1MeetingRoomsMeetingRoomIdBackgroundPostRequest(this);
            }
        }
        
        public String getMeetingRoomId() {
            return this.meetingRoomId;
        }
        

        public V1MeetingRoomsMeetingRoomIdBackgroundPostRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingRoomsMeetingRoomIdBackgroundPostResponse extends ApiResponse {
        private final V1MeetingRoomsMeetingRoomIdBackgroundPost200Response data;
        public ApiV1MeetingRoomsMeetingRoomIdBackgroundPostResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingRoomsMeetingRoomIdBackgroundPost200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingRoomsMeetingRoomIdBackgroundPost200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingRoomsMeetingRoomIdGetRequest {
    
        /**
         * meetingRoomId 会议室ID (required)
         */
        private String meetingRoomId;
        private Object body;

        private ApiV1MeetingRoomsMeetingRoomIdGetRequest() {}

        private ApiV1MeetingRoomsMeetingRoomIdGetRequest(Builder builder) {
            
            this.meetingRoomId = builder.meetingRoomId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingRoomId 会议室ID (required)
             */
            private final String meetingRoomId;
            

            private Object body;

            /**
             * @param meetingRoomId 会议室ID
             */
            public Builder(String meetingRoomId) {
                this.meetingRoomId = meetingRoomId;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingRoomsMeetingRoomIdGetRequest build() {
                return new ApiV1MeetingRoomsMeetingRoomIdGetRequest(this);
            }
        }
        
        public String getMeetingRoomId() {
            return this.meetingRoomId;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingRoomsMeetingRoomIdGetResponse extends ApiResponse {
        private final V1MeetingRoomsMeetingRoomIdGet200Response data;
        public ApiV1MeetingRoomsMeetingRoomIdGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingRoomsMeetingRoomIdGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingRoomsMeetingRoomIdGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingRoomsModifyPutRequest {
            private V1MeetingRoomsModifyPutRequest body;

        private ApiV1MeetingRoomsModifyPutRequest() {}

        private ApiV1MeetingRoomsModifyPutRequest(Builder builder) {
            
            this.body = builder.body;
        }

        public static class Builder {
            
            private V1MeetingRoomsModifyPutRequest body;

            /**
             */
            public Builder() {
            }
                        public Builder body(V1MeetingRoomsModifyPutRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingRoomsModifyPutRequest build() {
                return new ApiV1MeetingRoomsModifyPutRequest(this);
            }
        }
        
        public V1MeetingRoomsModifyPutRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingRoomsModifyPutResponse extends ApiResponse {
        private final Object data;
        public ApiV1MeetingRoomsModifyPutResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingRoomsModifyRoomConfigInfoPostRequest {
            private V1MeetingRoomsModifyRoomConfigInfoPostRequest body;

        private ApiV1MeetingRoomsModifyRoomConfigInfoPostRequest() {}

        private ApiV1MeetingRoomsModifyRoomConfigInfoPostRequest(Builder builder) {
            
            this.body = builder.body;
        }

        public static class Builder {
            
            private V1MeetingRoomsModifyRoomConfigInfoPostRequest body;

            /**
             */
            public Builder() {
            }
                        public Builder body(V1MeetingRoomsModifyRoomConfigInfoPostRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingRoomsModifyRoomConfigInfoPostRequest build() {
                return new ApiV1MeetingRoomsModifyRoomConfigInfoPostRequest(this);
            }
        }
        
        public V1MeetingRoomsModifyRoomConfigInfoPostRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingRoomsModifyRoomConfigInfoPostResponse extends ApiResponse {
        private final Object data;
        public ApiV1MeetingRoomsModifyRoomConfigInfoPostResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingRoomsMonitorDeviceControllerInfoGetRequest {
    
        /**
         * controllerName 需要查询的设备名称（支持模糊匹配查找），如需获取全量列表，则不需要传入。 (optional)
         */
        private String controllerName;

        /**
         * page 页码，从1开始，默认1。 (optional)
         */
        private String page;

        /**
         * pageSize 分页大小，从1开始，最大50，默认20。 (optional)
         */
        private String pageSize;

        private ApiV1MeetingRoomsMonitorDeviceControllerInfoGetRequest() {}

        private ApiV1MeetingRoomsMonitorDeviceControllerInfoGetRequest(Builder builder) {
            
            this.controllerName = builder.controllerName;
            

            this.page = builder.page;
            

            this.pageSize = builder.pageSize;
            
        }

        public static class Builder {
            
            /**
             * controllerName 需要查询的设备名称（支持模糊匹配查找），如需获取全量列表，则不需要传入。 (optional)
             */
            private String controllerName;
            

            /**
             * page 页码，从1开始，默认1。 (optional)
             */
            private String page;
            

            /**
             * pageSize 分页大小，从1开始，最大50，默认20。 (optional)
             */
            private String pageSize;
            

            /**
             */
            public Builder() {
            }
            
            /**
             * @param controllerName 需要查询的设备名称（支持模糊匹配查找），如需获取全量列表，则不需要传入。 (optional)
             */
            public Builder controllerName(String controllerName) {
                this.controllerName = controllerName;
                return this;
            }
            
            
            /**
             * @param page 页码，从1开始，默认1。 (optional)
             */
            public Builder page(String page) {
                this.page = page;
                return this;
            }
            
            
            /**
             * @param pageSize 分页大小，从1开始，最大50，默认20。 (optional)
             */
            public Builder pageSize(String pageSize) {
                this.pageSize = pageSize;
                return this;
            }
            

            public ApiV1MeetingRoomsMonitorDeviceControllerInfoGetRequest build() {
                return new ApiV1MeetingRoomsMonitorDeviceControllerInfoGetRequest(this);
            }
        }
        
        public String getControllerName() {
            return this.controllerName;
        }
        

        public String getPage() {
            return this.page;
        }
        

        public String getPageSize() {
            return this.pageSize;
        }
        
    }

    public static class ApiV1MeetingRoomsMonitorDeviceControllerInfoGetResponse extends ApiResponse {
        private final V1MeetingRoomsMonitorDeviceControllerInfoGet200Response data;
        public ApiV1MeetingRoomsMonitorDeviceControllerInfoGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingRoomsMonitorDeviceControllerInfoGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingRoomsMonitorDeviceControllerInfoGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingRoomsOperatorIdMeetingsGetRequest {
    
        /**
         * operatorId  (required)
         */
        private String operatorId;

        /**
         * operatorIdType 操作者 ID 的类型： 3. rooms 设备 rooms_id 5. 会议室ID meeting_room_id (required)
         */
        private String operatorIdType;

        /**
         * instanceid 用户的终端设备类型： 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：linux 20：Rooms for Touch Windows 21：Rooms for Touch Mac 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch Iphone (required)
         */
        private String instanceid;

        /**
         * startTime Unix 时间戳。查询起始时间，时间区间不超过90天。 (optional)
         */
        private String startTime;

        /**
         * endTime Unix 时间戳。查询结束时间，时间区间不超过90天。 (optional)
         */
        private String endTime;

        /**
         * page 当前页，页码起始值为1，默认为1。 (optional, default to 1)
         */
        private String page;

        /**
         * pageSize 分页大小，默认20条，最大20条。 (optional, default to 20)
         */
        private String pageSize;
        private Object body;

        private ApiV1MeetingRoomsOperatorIdMeetingsGetRequest() {}

        private ApiV1MeetingRoomsOperatorIdMeetingsGetRequest(Builder builder) {
            
            this.operatorId = builder.operatorId;
            

            this.operatorIdType = builder.operatorIdType;
            

            this.instanceid = builder.instanceid;
            

            this.startTime = builder.startTime;
            

            this.endTime = builder.endTime;
            

            this.page = builder.page;
            

            this.pageSize = builder.pageSize;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * operatorId  (required)
             */
            private final String operatorId;
            

            /**
             * operatorIdType 操作者 ID 的类型： 3. rooms 设备 rooms_id 5. 会议室ID meeting_room_id (required)
             */
            private String operatorIdType;
            

            /**
             * instanceid 用户的终端设备类型： 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：linux 20：Rooms for Touch Windows 21：Rooms for Touch Mac 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch Iphone (required)
             */
            private String instanceid;
            

            /**
             * startTime Unix 时间戳。查询起始时间，时间区间不超过90天。 (optional)
             */
            private String startTime;
            

            /**
             * endTime Unix 时间戳。查询结束时间，时间区间不超过90天。 (optional)
             */
            private String endTime;
            

            /**
             * page 当前页，页码起始值为1，默认为1。 (optional, default to 1)
             */
            private String page;
            

            /**
             * pageSize 分页大小，默认20条，最大20条。 (optional, default to 20)
             */
            private String pageSize;
            

            private Object body;

            /**
             * @param operatorId 
             */
            public Builder(String operatorId) {
                this.operatorId = operatorId;
            }
            
            
            /**
             * @param operatorIdType 操作者 ID 的类型： 3. rooms 设备 rooms_id 5. 会议室ID meeting_room_id (required)
             */
            public Builder operatorIdType(String operatorIdType) {
                this.operatorIdType = operatorIdType;
                return this;
            }
            
            
            /**
             * @param instanceid 用户的终端设备类型： 1：PC 2：Mac 3：Android 4：iOS 5：Web 6：iPad 7：Android Pad 8：小程序 9：voip、sip 设备 10：linux 20：Rooms for Touch Windows 21：Rooms for Touch Mac 22：Rooms for Touch Android 30：Controller for Touch Windows 32：Controller for Touch Android 33：Controller for Touch Iphone (required)
             */
            public Builder instanceid(String instanceid) {
                this.instanceid = instanceid;
                return this;
            }
            
            
            /**
             * @param startTime Unix 时间戳。查询起始时间，时间区间不超过90天。 (optional)
             */
            public Builder startTime(String startTime) {
                this.startTime = startTime;
                return this;
            }
            
            
            /**
             * @param endTime Unix 时间戳。查询结束时间，时间区间不超过90天。 (optional)
             */
            public Builder endTime(String endTime) {
                this.endTime = endTime;
                return this;
            }
            
            
            /**
             * @param page 当前页，页码起始值为1，默认为1。 (optional, default to 1)
             */
            public Builder page(String page) {
                this.page = page;
                return this;
            }
            
            
            /**
             * @param pageSize 分页大小，默认20条，最大20条。 (optional, default to 20)
             */
            public Builder pageSize(String pageSize) {
                this.pageSize = pageSize;
                return this;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingRoomsOperatorIdMeetingsGetRequest build() {
                return new ApiV1MeetingRoomsOperatorIdMeetingsGetRequest(this);
            }
        }
        
        public String getOperatorId() {
            return this.operatorId;
        }
        

        public String getOperatorIdType() {
            return this.operatorIdType;
        }
        

        public String getInstanceid() {
            return this.instanceid;
        }
        

        public String getStartTime() {
            return this.startTime;
        }
        

        public String getEndTime() {
            return this.endTime;
        }
        

        public String getPage() {
            return this.page;
        }
        

        public String getPageSize() {
            return this.pageSize;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingRoomsOperatorIdMeetingsGetResponse extends ApiResponse {
        private final V1MeetingRoomsOperatorIdMeetingsGet200Response data;
        public ApiV1MeetingRoomsOperatorIdMeetingsGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingRoomsOperatorIdMeetingsGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingRoomsOperatorIdMeetingsGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingRoomsRoomCallInfoPostRequest {
            private V1MeetingRoomsRoomCallInfoPostRequest body;

        private ApiV1MeetingRoomsRoomCallInfoPostRequest() {}

        private ApiV1MeetingRoomsRoomCallInfoPostRequest(Builder builder) {
            
            this.body = builder.body;
        }

        public static class Builder {
            
            private V1MeetingRoomsRoomCallInfoPostRequest body;

            /**
             */
            public Builder() {
            }
                        public Builder body(V1MeetingRoomsRoomCallInfoPostRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingRoomsRoomCallInfoPostRequest build() {
                return new ApiV1MeetingRoomsRoomCallInfoPostRequest(this);
            }
        }
        
        public V1MeetingRoomsRoomCallInfoPostRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingRoomsRoomCallInfoPostResponse extends ApiResponse {
        private final V1MeetingRoomsRoomCallInfoPost200Response data;
        public ApiV1MeetingRoomsRoomCallInfoPostResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingRoomsRoomCallInfoPost200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingRoomsRoomCallInfoPost200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingRoomsRoomCallPutRequest {
            private V1MeetingRoomsRoomCallPutRequest body;

        private ApiV1MeetingRoomsRoomCallPutRequest() {}

        private ApiV1MeetingRoomsRoomCallPutRequest(Builder builder) {
            
            this.body = builder.body;
        }

        public static class Builder {
            
            private V1MeetingRoomsRoomCallPutRequest body;

            /**
             */
            public Builder() {
            }
                        public Builder body(V1MeetingRoomsRoomCallPutRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingRoomsRoomCallPutRequest build() {
                return new ApiV1MeetingRoomsRoomCallPutRequest(this);
            }
        }
        
        public V1MeetingRoomsRoomCallPutRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingRoomsRoomCallPutResponse extends ApiResponse {
        private final V1MeetingRoomsRoomCallPut200Response data;
        public ApiV1MeetingRoomsRoomCallPutResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingRoomsRoomCallPut200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingRoomsRoomCallPut200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingRoomsRoomConfigInfoPostRequest {
            private V1MeetingRoomsRoomConfigInfoPostRequest body;

        private ApiV1MeetingRoomsRoomConfigInfoPostRequest() {}

        private ApiV1MeetingRoomsRoomConfigInfoPostRequest(Builder builder) {
            
            this.body = builder.body;
        }

        public static class Builder {
            
            private V1MeetingRoomsRoomConfigInfoPostRequest body;

            /**
             */
            public Builder() {
            }
                        public Builder body(V1MeetingRoomsRoomConfigInfoPostRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingRoomsRoomConfigInfoPostRequest build() {
                return new ApiV1MeetingRoomsRoomConfigInfoPostRequest(this);
            }
        }
        
        public V1MeetingRoomsRoomConfigInfoPostRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingRoomsRoomConfigInfoPostResponse extends ApiResponse {
        private final V1MeetingRoomsRoomConfigInfoPost200Response data;
        public ApiV1MeetingRoomsRoomConfigInfoPostResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingRoomsRoomConfigInfoPost200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingRoomsRoomConfigInfoPost200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingRoomsScreencastCodeRoomsInfoGetRequest {
    
        /**
         * screencastCode 投屏码 (required)
         */
        private String screencastCode;
        private Object body;

        private ApiV1MeetingRoomsScreencastCodeRoomsInfoGetRequest() {}

        private ApiV1MeetingRoomsScreencastCodeRoomsInfoGetRequest(Builder builder) {
            
            this.screencastCode = builder.screencastCode;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * screencastCode 投屏码 (required)
             */
            private final String screencastCode;
            

            private Object body;

            /**
             * @param screencastCode 投屏码
             */
            public Builder(String screencastCode) {
                this.screencastCode = screencastCode;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingRoomsScreencastCodeRoomsInfoGetRequest build() {
                return new ApiV1MeetingRoomsScreencastCodeRoomsInfoGetRequest(this);
            }
        }
        
        public String getScreencastCode() {
            return this.screencastCode;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingRoomsScreencastCodeRoomsInfoGetResponse extends ApiResponse {
        private final V1MeetingRoomsScreencastCodeRoomsInfoGet200Response data;
        public ApiV1MeetingRoomsScreencastCodeRoomsInfoGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingRoomsScreencastCodeRoomsInfoGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingRoomsScreencastCodeRoomsInfoGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingsMeetingIdBookRoomsPostRequest {
    
        /**
         * meetingId 会议唯一id (required)
         */
        private String meetingId;
        private V1MeetingsMeetingIdBookRoomsPostRequest body;

        private ApiV1MeetingsMeetingIdBookRoomsPostRequest() {}

        private ApiV1MeetingsMeetingIdBookRoomsPostRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId 会议唯一id (required)
             */
            private final String meetingId;
            

            private V1MeetingsMeetingIdBookRoomsPostRequest body;

            /**
             * @param meetingId 会议唯一id
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
                        public Builder body(V1MeetingsMeetingIdBookRoomsPostRequest body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingsMeetingIdBookRoomsPostRequest build() {
                return new ApiV1MeetingsMeetingIdBookRoomsPostRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public V1MeetingsMeetingIdBookRoomsPostRequest getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingsMeetingIdBookRoomsPostResponse extends ApiResponse {
        private final V1MeetingsMeetingIdBookRoomsPost200Response data;
        public ApiV1MeetingsMeetingIdBookRoomsPostResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1MeetingsMeetingIdBookRoomsPost200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1MeetingsMeetingIdBookRoomsPost200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1MeetingsMeetingIdReleaseRoomsPostRequest {
    
        /**
         * meetingId 会议唯一id (required)
         */
        private String meetingId;
        private Object body;

        private ApiV1MeetingsMeetingIdReleaseRoomsPostRequest() {}

        private ApiV1MeetingsMeetingIdReleaseRoomsPostRequest(Builder builder) {
            
            this.meetingId = builder.meetingId;
            

            this.body = builder.body;
        }

        public static class Builder {
            
            /**
             * meetingId 会议唯一id (required)
             */
            private final String meetingId;
            

            private Object body;

            /**
             * @param meetingId 会议唯一id
             */
            public Builder(String meetingId) {
                this.meetingId = meetingId;
            }
            
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1MeetingsMeetingIdReleaseRoomsPostRequest build() {
                return new ApiV1MeetingsMeetingIdReleaseRoomsPostRequest(this);
            }
        }
        
        public String getMeetingId() {
            return this.meetingId;
        }
        

        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1MeetingsMeetingIdReleaseRoomsPostResponse extends ApiResponse {
        private final Object data;
        public ApiV1MeetingsMeetingIdReleaseRoomsPostResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(Object.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public Object getData() {
            return this.data;
        }
    }

    public static class ApiV1RoomsInventoryAccountStatisticsGetRequest {
            private Object body;

        private ApiV1RoomsInventoryAccountStatisticsGetRequest() {}

        private ApiV1RoomsInventoryAccountStatisticsGetRequest(Builder builder) {
            
            this.body = builder.body;
        }

        public static class Builder {
            
            private Object body;

            /**
             */
            public Builder() {
            }
                        public Builder body(Object body) {
                this.body = body;
                return this;
            }

            public ApiV1RoomsInventoryAccountStatisticsGetRequest build() {
                return new ApiV1RoomsInventoryAccountStatisticsGetRequest(this);
            }
        }
        
        public Object getBody() {
            return this.body;
        }
    }

    public static class ApiV1RoomsInventoryAccountStatisticsGetResponse extends ApiResponse {
        private final V1RoomsInventoryAccountStatisticsGet200Response data;
        public ApiV1RoomsInventoryAccountStatisticsGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1RoomsInventoryAccountStatisticsGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1RoomsInventoryAccountStatisticsGet200Response getData() {
            return this.data;
        }
    }

    public static class ApiV1RoomsInventoryGetRequest {
    
        private ApiV1RoomsInventoryGetRequest() {}

        private ApiV1RoomsInventoryGetRequest(Builder builder) {
                    }

        public static class Builder {
            
            /**
             */
            public Builder() {
            }

            public ApiV1RoomsInventoryGetRequest build() {
                return new ApiV1RoomsInventoryGetRequest(this);
            }
        }
            }

    public static class ApiV1RoomsInventoryGetResponse extends ApiResponse {
        private final V1RoomsInventoryGet200Response data;
        public ApiV1RoomsInventoryGetResponse(ApiResponse apiRsp) throws ClientException {
            super(apiRsp);
            try {
                this.data = apiRsp.translate(V1RoomsInventoryGet200Response.class);
            } catch (Exception e) {
                throw new ClientException(String.format("http status code: %d, response: %s, err: %s",
                this.getStatusCode(), new String(this.getRawBody()), e.getMessage()), e);
            }
        }
        public V1RoomsInventoryGet200Response getData() {
            return this.data;
        }
    }

    /**
     * v1DevicesGet 查询设备列表[/v1/devices - GET]
     * <p>查询企业下的可用设备列表。&lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(51, 51, 51)\&quot;&gt;目前暂不支持 OAuth2.0 鉴权访问。&lt;/span&gt;<p/>
     * @param req ApiV1DevicesGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1DevicesGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1DevicesGetResponse v1DevicesGet(ApiV1DevicesGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/devices")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            

            

            

            
            // path 参数
            // query 参数
            if (req.getPage() != null) {
                apiReq.getQueryParams().set("page", req.getPage());
            }
            if (req.getPageSize() != null) {
                apiReq.getQueryParams().set("page_size", req.getPageSize());
            }
            if (req.getMeetingRoomName() != null) {
                apiReq.getQueryParams().set("meeting_room_name", req.getMeetingRoomName());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1DevicesGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1DevicesGet 查询设备列表[/v1/devices - GET]
    * <p>查询企业下的可用设备列表。&lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(51, 51, 51)\&quot;&gt;目前暂不支持 OAuth2.0 鉴权访问。&lt;/span&gt;<p/>
    * @param req ApiV1DevicesGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1DevicesGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1DevicesGetResponse v1DevicesGet(ApiV1DevicesGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1DevicesGet(req, null, builders);
    }
    /**
     * v1MeetingRoomsCancelRoomCallPut 取消呼叫会议室[/v1/meeting-rooms/cancel-room-call - PUT]
     * <p>**描述**：会议可以通过会议室 ID 进行取消呼叫操作。  * \\*\\*权限：\\*\\*同会议室呼叫权限。 * **调用方式**：PUT<p/>
     * @param req ApiV1MeetingRoomsCancelRoomCallPutRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingRoomsCancelRoomCallPutResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingRoomsCancelRoomCallPutResponse v1MeetingRoomsCancelRoomCallPut(ApiV1MeetingRoomsCancelRoomCallPutRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meeting-rooms/cancel-room-call")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            
            // path 参数
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().put(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingRoomsCancelRoomCallPutResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingRoomsCancelRoomCallPut 取消呼叫会议室[/v1/meeting-rooms/cancel-room-call - PUT]
    * <p>**描述**：会议可以通过会议室 ID 进行取消呼叫操作。  * \\*\\*权限：\\*\\*同会议室呼叫权限。 * **调用方式**：PUT<p/>
    * @param req ApiV1MeetingRoomsCancelRoomCallPutRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingRoomsCancelRoomCallPutResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingRoomsCancelRoomCallPutResponse v1MeetingRoomsCancelRoomCallPut(ApiV1MeetingRoomsCancelRoomCallPutRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingRoomsCancelRoomCallPut(req, null, builders);
    }
    /**
     * v1MeetingRoomsGet 查询会议室（Rooms）列表[/v1/meeting-rooms - GET]
     * <p>查询企业下的会议室列表。&lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(51, 51, 51)\&quot;&gt;目前暂不支持 OAuth2.0 鉴权访问。&lt;/span&gt;<p/>
     * @param req ApiV1MeetingRoomsGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingRoomsGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingRoomsGetResponse v1MeetingRoomsGet(ApiV1MeetingRoomsGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meeting-rooms")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            

            

            

            
            // path 参数
            // query 参数
            if (req.getPage() != null) {
                apiReq.getQueryParams().set("page", req.getPage());
            }
            if (req.getPageSize() != null) {
                apiReq.getQueryParams().set("page_size", req.getPageSize());
            }
            if (req.getMeetingRoomName() != null) {
                apiReq.getQueryParams().set("meeting_room_name", req.getMeetingRoomName());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingRoomsGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingRoomsGet 查询会议室（Rooms）列表[/v1/meeting-rooms - GET]
    * <p>查询企业下的会议室列表。&lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(51, 51, 51)\&quot;&gt;目前暂不支持 OAuth2.0 鉴权访问。&lt;/span&gt;<p/>
    * @param req ApiV1MeetingRoomsGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingRoomsGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingRoomsGetResponse v1MeetingRoomsGet(ApiV1MeetingRoomsGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingRoomsGet(req, null, builders);
    }
    /**
     * v1MeetingRoomsMeetingRoomIdActiveCodePost 生成设备激活码[/v1/meeting-rooms/{meeting_room_id}/active-code - POST]
     * <p>生成会议室中设备激活码。&lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(51, 51, 51)\&quot;&gt;目前暂不支持 OAuth2.0 鉴权访问。&lt;/span&gt;<p/>
     * @param req ApiV1MeetingRoomsMeetingRoomIdActiveCodePostRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingRoomsMeetingRoomIdActiveCodePostResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingRoomsMeetingRoomIdActiveCodePostResponse v1MeetingRoomsMeetingRoomIdActiveCodePost(ApiV1MeetingRoomsMeetingRoomIdActiveCodePostRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meeting-rooms/{meeting_room_id}/active-code")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingRoomId' is set
            if (req.getMeetingRoomId() == null) {
                throw new IllegalArgumentException("'meetingRoomId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_room_id", req.getMeetingRoomId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().post(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingRoomsMeetingRoomIdActiveCodePostResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingRoomsMeetingRoomIdActiveCodePost 生成设备激活码[/v1/meeting-rooms/{meeting_room_id}/active-code - POST]
    * <p>生成会议室中设备激活码。&lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(51, 51, 51)\&quot;&gt;目前暂不支持 OAuth2.0 鉴权访问。&lt;/span&gt;<p/>
    * @param req ApiV1MeetingRoomsMeetingRoomIdActiveCodePostRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingRoomsMeetingRoomIdActiveCodePostResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingRoomsMeetingRoomIdActiveCodePostResponse v1MeetingRoomsMeetingRoomIdActiveCodePost(ApiV1MeetingRoomsMeetingRoomIdActiveCodePostRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingRoomsMeetingRoomIdActiveCodePost(req, null, builders);
    }
    /**
     * v1MeetingRoomsMeetingRoomIdBackgroundGet 查询会议室背景[/v1/meeting-rooms/{meeting_room_id}/background - GET]
     * <p>查询会议室的会议室背景<p/>
     * @param req ApiV1MeetingRoomsMeetingRoomIdBackgroundGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingRoomsMeetingRoomIdBackgroundGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingRoomsMeetingRoomIdBackgroundGetResponse v1MeetingRoomsMeetingRoomIdBackgroundGet(ApiV1MeetingRoomsMeetingRoomIdBackgroundGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meeting-rooms/{meeting_room_id}/background")
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingRoomId' is set
            if (req.getMeetingRoomId() == null) {
                throw new IllegalArgumentException("'meetingRoomId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            
            // path 参数
            apiReq.getPathParams().set("meeting_room_id", req.getMeetingRoomId());
            // query 参数
            if (req.getOperatorId() != null) {
                apiReq.getQueryParams().set("operator_id", req.getOperatorId());
            }
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingRoomsMeetingRoomIdBackgroundGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingRoomsMeetingRoomIdBackgroundGet 查询会议室背景[/v1/meeting-rooms/{meeting_room_id}/background - GET]
    * <p>查询会议室的会议室背景<p/>
    * @param req ApiV1MeetingRoomsMeetingRoomIdBackgroundGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingRoomsMeetingRoomIdBackgroundGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingRoomsMeetingRoomIdBackgroundGetResponse v1MeetingRoomsMeetingRoomIdBackgroundGet(ApiV1MeetingRoomsMeetingRoomIdBackgroundGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingRoomsMeetingRoomIdBackgroundGet(req, null, builders);
    }
    /**
     * v1MeetingRoomsMeetingRoomIdBackgroundPost 设置会议室背景[/v1/meeting-rooms/{meeting_room_id}/background - POST]
     * <p>为会议室设置会议室背景，支持为批量会议室设置。异步上传背景，需要订阅素材上传结果通知。<p/>
     * @param req ApiV1MeetingRoomsMeetingRoomIdBackgroundPostRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingRoomsMeetingRoomIdBackgroundPostResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingRoomsMeetingRoomIdBackgroundPostResponse v1MeetingRoomsMeetingRoomIdBackgroundPost(ApiV1MeetingRoomsMeetingRoomIdBackgroundPostRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meeting-rooms/{meeting_room_id}/background")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingRoomId' is set
            if (req.getMeetingRoomId() == null) {
                throw new IllegalArgumentException("'meetingRoomId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_room_id", req.getMeetingRoomId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().post(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingRoomsMeetingRoomIdBackgroundPostResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingRoomsMeetingRoomIdBackgroundPost 设置会议室背景[/v1/meeting-rooms/{meeting_room_id}/background - POST]
    * <p>为会议室设置会议室背景，支持为批量会议室设置。异步上传背景，需要订阅素材上传结果通知。<p/>
    * @param req ApiV1MeetingRoomsMeetingRoomIdBackgroundPostRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingRoomsMeetingRoomIdBackgroundPostResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingRoomsMeetingRoomIdBackgroundPostResponse v1MeetingRoomsMeetingRoomIdBackgroundPost(ApiV1MeetingRoomsMeetingRoomIdBackgroundPostRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingRoomsMeetingRoomIdBackgroundPost(req, null, builders);
    }
    /**
     * v1MeetingRoomsMeetingRoomIdGet 查询会议室（Rooms）详情[/v1/meeting-rooms/{meeting_room_id} - GET]
     * <p>根据会议室 ID 查询该会议室详细信息。&lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(51, 51, 51)\&quot;&gt;目前暂不支持 OAuth2.0 鉴权访问。&lt;/span&gt;<p/>
     * @param req ApiV1MeetingRoomsMeetingRoomIdGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingRoomsMeetingRoomIdGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingRoomsMeetingRoomIdGetResponse v1MeetingRoomsMeetingRoomIdGet(ApiV1MeetingRoomsMeetingRoomIdGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meeting-rooms/{meeting_room_id}")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingRoomId' is set
            if (req.getMeetingRoomId() == null) {
                throw new IllegalArgumentException("'meetingRoomId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_room_id", req.getMeetingRoomId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingRoomsMeetingRoomIdGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingRoomsMeetingRoomIdGet 查询会议室（Rooms）详情[/v1/meeting-rooms/{meeting_room_id} - GET]
    * <p>根据会议室 ID 查询该会议室详细信息。&lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(51, 51, 51)\&quot;&gt;目前暂不支持 OAuth2.0 鉴权访问。&lt;/span&gt;<p/>
    * @param req ApiV1MeetingRoomsMeetingRoomIdGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingRoomsMeetingRoomIdGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingRoomsMeetingRoomIdGetResponse v1MeetingRoomsMeetingRoomIdGet(ApiV1MeetingRoomsMeetingRoomIdGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingRoomsMeetingRoomIdGet(req, null, builders);
    }
    /**
     * v1MeetingRoomsModifyPut 修改会议室信息[/v1/meeting-rooms/modify - PUT]
     * <p>**描述**：对会议室信息进行设置。  * \\*\\*权限：\\*\\*支持 JWT 鉴权，拥有会议室管理编辑权限。暂不支持 OAuth 2\\.0鉴权。 * **调用方式**：PUT<p/>
     * @param req ApiV1MeetingRoomsModifyPutRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingRoomsModifyPutResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingRoomsModifyPutResponse v1MeetingRoomsModifyPut(ApiV1MeetingRoomsModifyPutRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meeting-rooms/modify")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            
            // path 参数
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().put(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingRoomsModifyPutResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingRoomsModifyPut 修改会议室信息[/v1/meeting-rooms/modify - PUT]
    * <p>**描述**：对会议室信息进行设置。  * \\*\\*权限：\\*\\*支持 JWT 鉴权，拥有会议室管理编辑权限。暂不支持 OAuth 2\\.0鉴权。 * **调用方式**：PUT<p/>
    * @param req ApiV1MeetingRoomsModifyPutRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingRoomsModifyPutResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingRoomsModifyPutResponse v1MeetingRoomsModifyPut(ApiV1MeetingRoomsModifyPutRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingRoomsModifyPut(req, null, builders);
    }
    /**
     * v1MeetingRoomsModifyRoomConfigInfoPost 修改会议室配置项[/v1/meeting-rooms/modify-room-config-info - POST]
     * <p>**描述**：修改会议室各种配置项。  * \\*\\*权限：\\*\\*JWT 鉴权，拥有会议室管理编辑权限，暂不支持 OAuth 2\\.0鉴权。 * **调用方式**：POST<p/>
     * @param req ApiV1MeetingRoomsModifyRoomConfigInfoPostRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingRoomsModifyRoomConfigInfoPostResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingRoomsModifyRoomConfigInfoPostResponse v1MeetingRoomsModifyRoomConfigInfoPost(ApiV1MeetingRoomsModifyRoomConfigInfoPostRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meeting-rooms/modify-room-config-info")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            
            // path 参数
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().post(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingRoomsModifyRoomConfigInfoPostResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingRoomsModifyRoomConfigInfoPost 修改会议室配置项[/v1/meeting-rooms/modify-room-config-info - POST]
    * <p>**描述**：修改会议室各种配置项。  * \\*\\*权限：\\*\\*JWT 鉴权，拥有会议室管理编辑权限，暂不支持 OAuth 2\\.0鉴权。 * **调用方式**：POST<p/>
    * @param req ApiV1MeetingRoomsModifyRoomConfigInfoPostRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingRoomsModifyRoomConfigInfoPostResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingRoomsModifyRoomConfigInfoPostResponse v1MeetingRoomsModifyRoomConfigInfoPost(ApiV1MeetingRoomsModifyRoomConfigInfoPostRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingRoomsModifyRoomConfigInfoPost(req, null, builders);
    }
    /**
     * v1MeetingRoomsMonitorDeviceControllerInfoGet 查询控制器列表[/v1/meeting-rooms-monitor/device-controller-info - GET]
     * <p>\\*\\*描述：\\*\\*查询企业下的控制器列表，目前暂不支持 OAuth2\\.0 鉴权访问。<p/>
     * @param req ApiV1MeetingRoomsMonitorDeviceControllerInfoGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingRoomsMonitorDeviceControllerInfoGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingRoomsMonitorDeviceControllerInfoGetResponse v1MeetingRoomsMonitorDeviceControllerInfoGet(ApiV1MeetingRoomsMonitorDeviceControllerInfoGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meeting-rooms-monitor/device-controller-info")
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            

            

            
            // path 参数
            // query 参数
            if (req.getControllerName() != null) {
                apiReq.getQueryParams().set("controller_name", req.getControllerName());
            }
            if (req.getPage() != null) {
                apiReq.getQueryParams().set("page", req.getPage());
            }
            if (req.getPageSize() != null) {
                apiReq.getQueryParams().set("page_size", req.getPageSize());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingRoomsMonitorDeviceControllerInfoGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingRoomsMonitorDeviceControllerInfoGet 查询控制器列表[/v1/meeting-rooms-monitor/device-controller-info - GET]
    * <p>\\*\\*描述：\\*\\*查询企业下的控制器列表，目前暂不支持 OAuth2\\.0 鉴权访问。<p/>
    * @param req ApiV1MeetingRoomsMonitorDeviceControllerInfoGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingRoomsMonitorDeviceControllerInfoGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingRoomsMonitorDeviceControllerInfoGetResponse v1MeetingRoomsMonitorDeviceControllerInfoGet(ApiV1MeetingRoomsMonitorDeviceControllerInfoGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingRoomsMonitorDeviceControllerInfoGet(req, null, builders);
    }
    /**
     * v1MeetingRoomsOperatorIdMeetingsGet 查询会议室（Rooms）下的会议列表[/v1/meeting-rooms/{operator_id}/meetings - GET]
     * <p>&lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(51, 51, 51)\&quot;&gt;查询指定会议室（Rooms）下的会议列表，目前暂不支持 OAuth2.0 鉴权访问。&lt;/span&gt;<p/>
     * @param req ApiV1MeetingRoomsOperatorIdMeetingsGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingRoomsOperatorIdMeetingsGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingRoomsOperatorIdMeetingsGetResponse v1MeetingRoomsOperatorIdMeetingsGet(ApiV1MeetingRoomsOperatorIdMeetingsGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meeting-rooms/{operator_id}/meetings")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'operatorId' is set
            if (req.getOperatorId() == null) {
                throw new IllegalArgumentException("'operatorId' is required and must be specified");
            }
            

            // verify the required parameter 'operatorIdType' is set
            if (req.getOperatorIdType() == null) {
                throw new IllegalArgumentException("'operatorIdType' is required and must be specified");
            }
            

            // verify the required parameter 'instanceid' is set
            if (req.getInstanceid() == null) {
                throw new IllegalArgumentException("'instanceid' is required and must be specified");
            }
            

            

            

            

            

            
            // path 参数
            apiReq.getPathParams().set("operator_id", req.getOperatorId());
            // query 参数
            if (req.getOperatorIdType() != null) {
                apiReq.getQueryParams().set("operator_id_type", req.getOperatorIdType());
            }
            if (req.getInstanceid() != null) {
                apiReq.getQueryParams().set("instanceid", req.getInstanceid());
            }
            if (req.getStartTime() != null) {
                apiReq.getQueryParams().set("start_time", req.getStartTime());
            }
            if (req.getEndTime() != null) {
                apiReq.getQueryParams().set("end_time", req.getEndTime());
            }
            if (req.getPage() != null) {
                apiReq.getQueryParams().set("page", req.getPage());
            }
            if (req.getPageSize() != null) {
                apiReq.getQueryParams().set("page_size", req.getPageSize());
            }
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingRoomsOperatorIdMeetingsGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingRoomsOperatorIdMeetingsGet 查询会议室（Rooms）下的会议列表[/v1/meeting-rooms/{operator_id}/meetings - GET]
    * <p>&lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(51, 51, 51)\&quot;&gt;查询指定会议室（Rooms）下的会议列表，目前暂不支持 OAuth2.0 鉴权访问。&lt;/span&gt;<p/>
    * @param req ApiV1MeetingRoomsOperatorIdMeetingsGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingRoomsOperatorIdMeetingsGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingRoomsOperatorIdMeetingsGetResponse v1MeetingRoomsOperatorIdMeetingsGet(ApiV1MeetingRoomsOperatorIdMeetingsGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingRoomsOperatorIdMeetingsGet(req, null, builders);
    }
    /**
     * v1MeetingRoomsRoomCallInfoPost 查询会议室应答状态[/v1/meeting-rooms/room-call-info - POST]
     * <p>**描述**：一个会议可以查询它所呼叫的会议室对其的应答状态。  * \\*\\*权限：\\*\\*同会议室呼叫权限。 * **调用方式**：POST<p/>
     * @param req ApiV1MeetingRoomsRoomCallInfoPostRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingRoomsRoomCallInfoPostResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingRoomsRoomCallInfoPostResponse v1MeetingRoomsRoomCallInfoPost(ApiV1MeetingRoomsRoomCallInfoPostRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meeting-rooms/room-call-info")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            
            // path 参数
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().post(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingRoomsRoomCallInfoPostResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingRoomsRoomCallInfoPost 查询会议室应答状态[/v1/meeting-rooms/room-call-info - POST]
    * <p>**描述**：一个会议可以查询它所呼叫的会议室对其的应答状态。  * \\*\\*权限：\\*\\*同会议室呼叫权限。 * **调用方式**：POST<p/>
    * @param req ApiV1MeetingRoomsRoomCallInfoPostRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingRoomsRoomCallInfoPostResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingRoomsRoomCallInfoPostResponse v1MeetingRoomsRoomCallInfoPost(ApiV1MeetingRoomsRoomCallInfoPostRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingRoomsRoomCallInfoPost(req, null, builders);
    }
    /**
     * v1MeetingRoomsRoomCallPut 呼叫会议室[/v1/meeting-rooms/room-call - PUT]
     * <p>**描述**：会议可以通过会议室 ID 呼叫会议室邀请其入会。  * \\*\\*权限：\\*\\*支持 JWT 鉴权，会议创建者所在企业的管理员和会议参会者可呼叫与自己同企业下的会议室入会，若使用会议室呼叫地址，需主持人或联席主持人身份，暂不支持 OAuth 2\\.0鉴权。 * **调用方式**：PUT<p/>
     * @param req ApiV1MeetingRoomsRoomCallPutRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingRoomsRoomCallPutResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingRoomsRoomCallPutResponse v1MeetingRoomsRoomCallPut(ApiV1MeetingRoomsRoomCallPutRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meeting-rooms/room-call")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            
            // path 参数
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().put(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingRoomsRoomCallPutResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingRoomsRoomCallPut 呼叫会议室[/v1/meeting-rooms/room-call - PUT]
    * <p>**描述**：会议可以通过会议室 ID 呼叫会议室邀请其入会。  * \\*\\*权限：\\*\\*支持 JWT 鉴权，会议创建者所在企业的管理员和会议参会者可呼叫与自己同企业下的会议室入会，若使用会议室呼叫地址，需主持人或联席主持人身份，暂不支持 OAuth 2\\.0鉴权。 * **调用方式**：PUT<p/>
    * @param req ApiV1MeetingRoomsRoomCallPutRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingRoomsRoomCallPutResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingRoomsRoomCallPutResponse v1MeetingRoomsRoomCallPut(ApiV1MeetingRoomsRoomCallPutRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingRoomsRoomCallPut(req, null, builders);
    }
    /**
     * v1MeetingRoomsRoomConfigInfoPost 查询会议室配置项[/v1/meeting-rooms/room-config-info - POST]
     * <p>**描述**：查询会议室的配置项。  * \\*\\*权限：\\*\\*JWT 鉴权，拥有会议室查看权限，暂不支持 OAuth 2\\.0鉴权。 * **调用方式**：POST<p/>
     * @param req ApiV1MeetingRoomsRoomConfigInfoPostRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingRoomsRoomConfigInfoPostResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingRoomsRoomConfigInfoPostResponse v1MeetingRoomsRoomConfigInfoPost(ApiV1MeetingRoomsRoomConfigInfoPostRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meeting-rooms/room-config-info")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            
            // path 参数
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().post(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingRoomsRoomConfigInfoPostResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingRoomsRoomConfigInfoPost 查询会议室配置项[/v1/meeting-rooms/room-config-info - POST]
    * <p>**描述**：查询会议室的配置项。  * \\*\\*权限：\\*\\*JWT 鉴权，拥有会议室查看权限，暂不支持 OAuth 2\\.0鉴权。 * **调用方式**：POST<p/>
    * @param req ApiV1MeetingRoomsRoomConfigInfoPostRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingRoomsRoomConfigInfoPostResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingRoomsRoomConfigInfoPostResponse v1MeetingRoomsRoomConfigInfoPost(ApiV1MeetingRoomsRoomConfigInfoPostRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingRoomsRoomConfigInfoPost(req, null, builders);
    }
    /**
     * v1MeetingRoomsScreencastCodeRoomsInfoGet 通过投屏码查询会议室信息[/v1/meeting-rooms/{screencast_code}/rooms-info - GET]
     * <p><p/>
     * @param req ApiV1MeetingRoomsScreencastCodeRoomsInfoGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingRoomsScreencastCodeRoomsInfoGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingRoomsScreencastCodeRoomsInfoGetResponse v1MeetingRoomsScreencastCodeRoomsInfoGet(ApiV1MeetingRoomsScreencastCodeRoomsInfoGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meeting-rooms/{screencast_code}/rooms-info")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'screencastCode' is set
            if (req.getScreencastCode() == null) {
                throw new IllegalArgumentException("'screencastCode' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("screencast_code", req.getScreencastCode());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingRoomsScreencastCodeRoomsInfoGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingRoomsScreencastCodeRoomsInfoGet 通过投屏码查询会议室信息[/v1/meeting-rooms/{screencast_code}/rooms-info - GET]
    * <p><p/>
    * @param req ApiV1MeetingRoomsScreencastCodeRoomsInfoGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingRoomsScreencastCodeRoomsInfoGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingRoomsScreencastCodeRoomsInfoGetResponse v1MeetingRoomsScreencastCodeRoomsInfoGet(ApiV1MeetingRoomsScreencastCodeRoomsInfoGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingRoomsScreencastCodeRoomsInfoGet(req, null, builders);
    }
    /**
     * v1MeetingsMeetingIdBookRoomsPost 预定会议室（Rooms）[/v1/meetings/{meeting_id}/book-rooms - POST]
     * <p>对成功预定的会议添加会议室，支持多个会议室预定。说明：会议室预定对会议时长有硬性要求，会议时长不得小于15分钟且不得大于24小时；不支持周期性会议。）  * 通过会议 ID 预定会议室。 * 目前暂不支持 OAuth2.0 鉴权访问。<p/>
     * @param req ApiV1MeetingsMeetingIdBookRoomsPostRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingsMeetingIdBookRoomsPostResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingsMeetingIdBookRoomsPostResponse v1MeetingsMeetingIdBookRoomsPost(ApiV1MeetingsMeetingIdBookRoomsPostRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meetings/{meeting_id}/book-rooms")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().post(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingsMeetingIdBookRoomsPostResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingsMeetingIdBookRoomsPost 预定会议室（Rooms）[/v1/meetings/{meeting_id}/book-rooms - POST]
    * <p>对成功预定的会议添加会议室，支持多个会议室预定。说明：会议室预定对会议时长有硬性要求，会议时长不得小于15分钟且不得大于24小时；不支持周期性会议。）  * 通过会议 ID 预定会议室。 * 目前暂不支持 OAuth2.0 鉴权访问。<p/>
    * @param req ApiV1MeetingsMeetingIdBookRoomsPostRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingsMeetingIdBookRoomsPostResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingsMeetingIdBookRoomsPostResponse v1MeetingsMeetingIdBookRoomsPost(ApiV1MeetingsMeetingIdBookRoomsPostRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingsMeetingIdBookRoomsPost(req, null, builders);
    }
    /**
     * v1MeetingsMeetingIdReleaseRoomsPost 释放会议室（Rooms）[/v1/meetings/{meeting_id}/release-rooms - POST]
     * <p>通过会议 ID 释放会议室，支持多个会议室释放。&lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(51, 51, 51)\&quot;&gt;目前暂不支持 OAuth2.0 鉴权访问。&lt;/span&gt;<p/>
     * @param req ApiV1MeetingsMeetingIdReleaseRoomsPostRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1MeetingsMeetingIdReleaseRoomsPostResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1MeetingsMeetingIdReleaseRoomsPostResponse v1MeetingsMeetingIdReleaseRoomsPost(ApiV1MeetingsMeetingIdReleaseRoomsPostRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/meetings/{meeting_id}/release-rooms")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            // verify the required parameter 'meetingId' is set
            if (req.getMeetingId() == null) {
                throw new IllegalArgumentException("'meetingId' is required and must be specified");
            }
            

            
            // path 参数
            apiReq.getPathParams().set("meeting_id", req.getMeetingId());
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().post(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1MeetingsMeetingIdReleaseRoomsPostResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1MeetingsMeetingIdReleaseRoomsPost 释放会议室（Rooms）[/v1/meetings/{meeting_id}/release-rooms - POST]
    * <p>通过会议 ID 释放会议室，支持多个会议室释放。&lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color:rgb(51, 51, 51)\&quot;&gt;目前暂不支持 OAuth2.0 鉴权访问。&lt;/span&gt;<p/>
    * @param req ApiV1MeetingsMeetingIdReleaseRoomsPostRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1MeetingsMeetingIdReleaseRoomsPostResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1MeetingsMeetingIdReleaseRoomsPostResponse v1MeetingsMeetingIdReleaseRoomsPost(ApiV1MeetingsMeetingIdReleaseRoomsPostRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1MeetingsMeetingIdReleaseRoomsPost(req, null, builders);
    }
    /**
     * v1RoomsInventoryAccountStatisticsGet 查询账号类型资源使用统计[/v1/rooms-inventory/account-statistics - GET]
     * <p>查询 Rooms 账号资源使用情况，暂不支持 OAuth 2.0鉴权访问。<p/>
     * @param req ApiV1RoomsInventoryAccountStatisticsGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RoomsInventoryAccountStatisticsGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RoomsInventoryAccountStatisticsGetResponse v1RoomsInventoryAccountStatisticsGet(ApiV1RoomsInventoryAccountStatisticsGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/rooms-inventory/account-statistics")
                    .body(req.getBody())
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();

            
            // path 参数
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RoomsInventoryAccountStatisticsGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RoomsInventoryAccountStatisticsGet 查询账号类型资源使用统计[/v1/rooms-inventory/account-statistics - GET]
    * <p>查询 Rooms 账号资源使用情况，暂不支持 OAuth 2.0鉴权访问。<p/>
    * @param req ApiV1RoomsInventoryAccountStatisticsGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RoomsInventoryAccountStatisticsGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RoomsInventoryAccountStatisticsGetResponse v1RoomsInventoryAccountStatisticsGet(ApiV1RoomsInventoryAccountStatisticsGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RoomsInventoryAccountStatisticsGet(req, null, builders);
    }
    /**
     * v1RoomsInventoryGet 查询账户下 Rooms 资源[/v1/rooms-inventory - GET]
     * <p>查询企业购买的 Rooms 资源。&lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color: rgb(51, 51, 51);\&quot;&gt;目前暂不支持 OAuth2.0 鉴权访问。&lt;/span&gt;<p/>
     * @param req ApiV1RoomsInventoryGetRequest
     * @param serializer The serializer for HTTP request's body. (Optional)
     * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
     * @return ApiV1RoomsInventoryGetResponse
     * @throws ClientException If fail to serialize the request body object or some parameter's exception
     * @throws ServiceException If fail to call the api service
     */
    public ApiV1RoomsInventoryGetResponse v1RoomsInventoryGet(ApiV1RoomsInventoryGetRequest req, Serializable serializer, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        try {
            // 构造 authenticators
            Authentication[] authenticators = new Authentication[builders.length];
            for (int index = 0; index < authenticators.length; index++) {
                authenticators[index] = builders[index].build(this.config);
            }
            
            
            ApiRequest apiReq = new ApiRequest.Builder("/v1/rooms-inventory")
                    .serializer(serializer)
                    .authenticators(authenticators)
                    .build();
            // path 参数
            // query 参数
            // 增加 SDK Version 标识
            apiReq.getAuthenticators().add(Constants.DEFAULT_AUTHENTICATOR);

            ApiResponse apiRsp = this.config.getClt().get(apiReq);

            if (apiRsp.getStatusCode() >= 300) {
                throw new ServiceException(apiRsp);
            }
            return new ApiV1RoomsInventoryGetResponse(apiRsp);
        } catch (ServiceException | ClientException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientException(e);
        }
    }

   /**
    * v1RoomsInventoryGet 查询账户下 Rooms 资源[/v1/rooms-inventory - GET]
    * <p>查询企业购买的 Rooms 资源。&lt;span class&#x3D;\&quot;colour\&quot; style&#x3D;\&quot;color: rgb(51, 51, 51);\&quot;&gt;目前暂不支持 OAuth2.0 鉴权访问。&lt;/span&gt;<p/>
    * @param req ApiV1RoomsInventoryGetRequest
    * @param builders The authenticator's builder for create the api authenticator which can add special authentication HTTP request's headers. (Optional)
    * @return ApiV1RoomsInventoryGetResponse
    * @throws ClientException If fail to serialize the request body object or some parameter's exception
    * @throws ServiceException If fail to call the api service
    */
    public ApiV1RoomsInventoryGetResponse v1RoomsInventoryGet(ApiV1RoomsInventoryGetRequest req, AuthenticatorBuilder<?>... builders) throws ClientException, ServiceException {
        return v1RoomsInventoryGet(req, null, builders);
    }
}

